/*
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = spoonacular.Client.OpenAPIDateConverter;

namespace spoonacular.Model
{
    /// <summary>
    /// SearchRestaurants200ResponseRestaurantsInner
    /// </summary>
    [DataContract(Name = "searchRestaurants_200_response_restaurants_inner")]
    public partial class SearchRestaurants200ResponseRestaurantsInner : IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="SearchRestaurants200ResponseRestaurantsInner" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name.</param>
        /// <param name="phoneNumber">phoneNumber.</param>
        /// <param name="address">address.</param>
        /// <param name="type">type.</param>
        /// <param name="description">description.</param>
        /// <param name="localHours">localHours.</param>
        /// <param name="cuisines">cuisines.</param>
        /// <param name="foodPhotos">foodPhotos.</param>
        /// <param name="logoPhotos">logoPhotos.</param>
        /// <param name="storePhotos">storePhotos.</param>
        /// <param name="dollarSigns">dollarSigns.</param>
        /// <param name="pickupEnabled">pickupEnabled.</param>
        /// <param name="deliveryEnabled">deliveryEnabled.</param>
        /// <param name="isOpen">isOpen.</param>
        /// <param name="offersFirstPartyDelivery">offersFirstPartyDelivery.</param>
        /// <param name="offersThirdPartyDelivery">offersThirdPartyDelivery.</param>
        /// <param name="miles">miles.</param>
        /// <param name="weightedRatingValue">weightedRatingValue.</param>
        /// <param name="aggregatedRatingCount">aggregatedRatingCount.</param>
        public SearchRestaurants200ResponseRestaurantsInner(string id = default(string), string name = default(string), int phoneNumber = default(int), SearchRestaurants200ResponseRestaurantsInnerAddress address = default(SearchRestaurants200ResponseRestaurantsInnerAddress), string type = default(string), string description = default(string), SearchRestaurants200ResponseRestaurantsInnerLocalHours localHours = default(SearchRestaurants200ResponseRestaurantsInnerLocalHours), List<string> cuisines = default(List<string>), List<string> foodPhotos = default(List<string>), List<string> logoPhotos = default(List<string>), List<string> storePhotos = default(List<string>), int dollarSigns = default(int), bool pickupEnabled = default(bool), bool deliveryEnabled = default(bool), bool isOpen = default(bool), bool offersFirstPartyDelivery = default(bool), bool offersThirdPartyDelivery = default(bool), decimal miles = default(decimal), decimal weightedRatingValue = default(decimal), int aggregatedRatingCount = default(int))
        {
            this.Id = id;
            this.Name = name;
            this.PhoneNumber = phoneNumber;
            this.Address = address;
            this.Type = type;
            this.Description = description;
            this.LocalHours = localHours;
            this.Cuisines = cuisines;
            this.FoodPhotos = foodPhotos;
            this.LogoPhotos = logoPhotos;
            this.StorePhotos = storePhotos;
            this.DollarSigns = dollarSigns;
            this.PickupEnabled = pickupEnabled;
            this.DeliveryEnabled = deliveryEnabled;
            this.IsOpen = isOpen;
            this.OffersFirstPartyDelivery = offersFirstPartyDelivery;
            this.OffersThirdPartyDelivery = offersThirdPartyDelivery;
            this.Miles = miles;
            this.WeightedRatingValue = weightedRatingValue;
            this.AggregatedRatingCount = aggregatedRatingCount;
        }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name = "_id", EmitDefaultValue = false)]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name = "name", EmitDefaultValue = false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets PhoneNumber
        /// </summary>
        [DataMember(Name = "phone_number", EmitDefaultValue = false)]
        public int PhoneNumber { get; set; }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public SearchRestaurants200ResponseRestaurantsInnerAddress Address { get; set; }

        /// <summary>
        /// Gets or Sets Type
        /// </summary>
        [DataMember(Name = "type", EmitDefaultValue = false)]
        public string Type { get; set; }

        /// <summary>
        /// Gets or Sets Description
        /// </summary>
        [DataMember(Name = "description", EmitDefaultValue = false)]
        public string Description { get; set; }

        /// <summary>
        /// Gets or Sets LocalHours
        /// </summary>
        [DataMember(Name = "local_hours", EmitDefaultValue = false)]
        public SearchRestaurants200ResponseRestaurantsInnerLocalHours LocalHours { get; set; }

        /// <summary>
        /// Gets or Sets Cuisines
        /// </summary>
        [DataMember(Name = "cuisines", EmitDefaultValue = false)]
        public List<string> Cuisines { get; set; }

        /// <summary>
        /// Gets or Sets FoodPhotos
        /// </summary>
        [DataMember(Name = "food_photos", EmitDefaultValue = false)]
        public List<string> FoodPhotos { get; set; }

        /// <summary>
        /// Gets or Sets LogoPhotos
        /// </summary>
        [DataMember(Name = "logo_photos", EmitDefaultValue = false)]
        public List<string> LogoPhotos { get; set; }

        /// <summary>
        /// Gets or Sets StorePhotos
        /// </summary>
        [DataMember(Name = "store_photos", EmitDefaultValue = false)]
        public List<string> StorePhotos { get; set; }

        /// <summary>
        /// Gets or Sets DollarSigns
        /// </summary>
        [DataMember(Name = "dollar_signs", EmitDefaultValue = false)]
        public int DollarSigns { get; set; }

        /// <summary>
        /// Gets or Sets PickupEnabled
        /// </summary>
        [DataMember(Name = "pickup_enabled", EmitDefaultValue = true)]
        public bool PickupEnabled { get; set; }

        /// <summary>
        /// Gets or Sets DeliveryEnabled
        /// </summary>
        [DataMember(Name = "delivery_enabled", EmitDefaultValue = true)]
        public bool DeliveryEnabled { get; set; }

        /// <summary>
        /// Gets or Sets IsOpen
        /// </summary>
        [DataMember(Name = "is_open", EmitDefaultValue = true)]
        public bool IsOpen { get; set; }

        /// <summary>
        /// Gets or Sets OffersFirstPartyDelivery
        /// </summary>
        [DataMember(Name = "offers_first_party_delivery", EmitDefaultValue = true)]
        public bool OffersFirstPartyDelivery { get; set; }

        /// <summary>
        /// Gets or Sets OffersThirdPartyDelivery
        /// </summary>
        [DataMember(Name = "offers_third_party_delivery", EmitDefaultValue = true)]
        public bool OffersThirdPartyDelivery { get; set; }

        /// <summary>
        /// Gets or Sets Miles
        /// </summary>
        [DataMember(Name = "miles", EmitDefaultValue = false)]
        public decimal Miles { get; set; }

        /// <summary>
        /// Gets or Sets WeightedRatingValue
        /// </summary>
        [DataMember(Name = "weighted_rating_value", EmitDefaultValue = false)]
        public decimal WeightedRatingValue { get; set; }

        /// <summary>
        /// Gets or Sets AggregatedRatingCount
        /// </summary>
        [DataMember(Name = "aggregated_rating_count", EmitDefaultValue = false)]
        public int AggregatedRatingCount { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class SearchRestaurants200ResponseRestaurantsInner {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  PhoneNumber: ").Append(PhoneNumber).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Type: ").Append(Type).Append("\n");
            sb.Append("  Description: ").Append(Description).Append("\n");
            sb.Append("  LocalHours: ").Append(LocalHours).Append("\n");
            sb.Append("  Cuisines: ").Append(Cuisines).Append("\n");
            sb.Append("  FoodPhotos: ").Append(FoodPhotos).Append("\n");
            sb.Append("  LogoPhotos: ").Append(LogoPhotos).Append("\n");
            sb.Append("  StorePhotos: ").Append(StorePhotos).Append("\n");
            sb.Append("  DollarSigns: ").Append(DollarSigns).Append("\n");
            sb.Append("  PickupEnabled: ").Append(PickupEnabled).Append("\n");
            sb.Append("  DeliveryEnabled: ").Append(DeliveryEnabled).Append("\n");
            sb.Append("  IsOpen: ").Append(IsOpen).Append("\n");
            sb.Append("  OffersFirstPartyDelivery: ").Append(OffersFirstPartyDelivery).Append("\n");
            sb.Append("  OffersThirdPartyDelivery: ").Append(OffersThirdPartyDelivery).Append("\n");
            sb.Append("  Miles: ").Append(Miles).Append("\n");
            sb.Append("  WeightedRatingValue: ").Append(WeightedRatingValue).Append("\n");
            sb.Append("  AggregatedRatingCount: ").Append(AggregatedRatingCount).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
