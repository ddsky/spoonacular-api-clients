/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.spoonacular.RecipesApi
import com.spoonacular.client.model.AnalyzeARecipeSearchQuery200Response
import com.spoonacular.client.model.AnalyzeRecipeInstructions200Response
import com.spoonacular.client.model.AutocompleteRecipeSearch200ResponseInner
import com.spoonacular.client.model.ClassifyCuisine200Response
import com.spoonacular.client.model.ComputeGlycemicLoad200Response
import com.spoonacular.client.model.ComputeGlycemicLoadRequest
import com.spoonacular.client.model.ConvertAmounts200Response
import com.spoonacular.client.model.CreateRecipeCard200Response
import com.spoonacular.client.model.GetAnalyzedRecipeInstructions200Response
import com.spoonacular.client.model.GetRandomRecipes200Response
import com.spoonacular.client.model.GetRecipeEquipmentByID200Response
import com.spoonacular.client.model.GetRecipeInformation200Response
import com.spoonacular.client.model.GetRecipeInformationBulk200ResponseInner
import com.spoonacular.client.model.GetRecipeIngredientsByID200Response
import com.spoonacular.client.model.GetRecipeNutritionWidgetByID200Response
import com.spoonacular.client.model.GetRecipePriceBreakdownByID200Response
import com.spoonacular.client.model.GetRecipeTasteByID200Response
import com.spoonacular.client.model.GetSimilarRecipes200ResponseInner
import com.spoonacular.client.model.GuessNutritionByDishName200Response
import com.spoonacular.client.model.ParseIngredients200ResponseInner
import com.spoonacular.client.model.QuickAnswer200Response
import com.spoonacular.client.model.SearchRecipes200Response
import com.spoonacular.client.model.SearchRecipesByIngredients200ResponseInner
import com.spoonacular.client.model.SearchRecipesByNutrients200ResponseInner
import com.spoonacular.client.model.SummarizeRecipe200Response

class RecipesApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of RecipesApi
        //val apiInstance = RecipesApi()

        // to test analyzeARecipeSearchQuery
        should("test analyzeARecipeSearchQuery") {
            // uncomment below to test analyzeARecipeSearchQuery
            //val q : kotlin.String = salmon with fusilli and no nuts // kotlin.String | The recipe search query.
            //val result : AnalyzeARecipeSearchQuery200Response = apiInstance.analyzeARecipeSearchQuery(q)
            //result shouldBe ("TODO")
        }

        // to test analyzeRecipeInstructions
        should("test analyzeRecipeInstructions") {
            // uncomment below to test analyzeRecipeInstructions
            //val instructions : kotlin.String = instructions_example // kotlin.String | The recipe's instructions.
            //val result : AnalyzeRecipeInstructions200Response = apiInstance.analyzeRecipeInstructions(instructions)
            //result shouldBe ("TODO")
        }

        // to test autocompleteRecipeSearch
        should("test autocompleteRecipeSearch") {
            // uncomment below to test autocompleteRecipeSearch
            //val query : kotlin.String = burger // kotlin.String | The (natural language) search query.
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val result : kotlin.collections.Set<AutocompleteRecipeSearch200ResponseInner> = apiInstance.autocompleteRecipeSearch(query, number)
            //result shouldBe ("TODO")
        }

        // to test classifyCuisine
        should("test classifyCuisine") {
            // uncomment below to test classifyCuisine
            //val title : kotlin.String = title_example // kotlin.String | The title of the recipe.
            //val ingredientList : kotlin.String = ingredientList_example // kotlin.String | The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
            //val language : kotlin.String = en // kotlin.String | The language of the input. Either 'en' or 'de'.
            //val result : ClassifyCuisine200Response = apiInstance.classifyCuisine(title, ingredientList, language)
            //result shouldBe ("TODO")
        }

        // to test computeGlycemicLoad
        should("test computeGlycemicLoad") {
            // uncomment below to test computeGlycemicLoad
            //val computeGlycemicLoadRequest : ComputeGlycemicLoadRequest = {"ingredients":["1 kiwi","2 cups rice","2 glasses of water"]} // ComputeGlycemicLoadRequest | 
            //val language : kotlin.String = en // kotlin.String | The language of the input. Either 'en' or 'de'.
            //val result : ComputeGlycemicLoad200Response = apiInstance.computeGlycemicLoad(computeGlycemicLoadRequest, language)
            //result shouldBe ("TODO")
        }

        // to test convertAmounts
        should("test convertAmounts") {
            // uncomment below to test convertAmounts
            //val ingredientName : kotlin.String = flour // kotlin.String | The ingredient which you want to convert.
            //val sourceAmount : java.math.BigDecimal = 2.5 // java.math.BigDecimal | The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
            //val sourceUnit : kotlin.String = cups // kotlin.String | The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
            //val targetUnit : kotlin.String = grams // kotlin.String | The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
            //val result : ConvertAmounts200Response = apiInstance.convertAmounts(ingredientName, sourceAmount, sourceUnit, targetUnit)
            //result shouldBe ("TODO")
        }

        // to test createRecipeCard
        should("test createRecipeCard") {
            // uncomment below to test createRecipeCard
            //val title : kotlin.String = title_example // kotlin.String | The title of the recipe.
            //val ingredients : kotlin.String = ingredients_example // kotlin.String | The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
            //val instructions : kotlin.String = instructions_example // kotlin.String | The instructions to make the recipe. One step per line (separate lines with \\\\n).
            //val readyInMinutes : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The number of minutes it takes to get the recipe on the table.
            //val servings : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The number of servings the recipe makes.
            //val mask : kotlin.String = mask_example // kotlin.String | The mask to put over the recipe image ('ellipseMask', 'diamondMask', 'starMask', 'heartMask', 'potMask', 'fishMask').
            //val backgroundImage : kotlin.String = backgroundImage_example // kotlin.String | The background image ('none', 'background1', or 'background2').
            //val image : java.io.File = BINARY_DATA_HERE // java.io.File | The binary image of the recipe as jpg.
            //val imageUrl : kotlin.String = imageUrl_example // kotlin.String | If you do not sent a binary image you can also pass the image URL.
            //val author : kotlin.String = author_example // kotlin.String | The author of the recipe.
            //val backgroundColor : kotlin.String = backgroundColor_example // kotlin.String | The background color for the recipe card as a hex-string.
            //val fontColor : kotlin.String = fontColor_example // kotlin.String | The font color for the recipe card as a hex-string.
            //val source : kotlin.String = source_example // kotlin.String | The source of the recipe.
            //val result : CreateRecipeCard200Response = apiInstance.createRecipeCard(title, ingredients, instructions, readyInMinutes, servings, mask, backgroundImage, image, imageUrl, author, backgroundColor, fontColor, source)
            //result shouldBe ("TODO")
        }

        // to test equipmentByIDImage
        should("test equipmentByIDImage") {
            // uncomment below to test equipmentByIDImage
            //val id : java.math.BigDecimal = 44860 // java.math.BigDecimal | The recipe id.
            //val result : java.io.File = apiInstance.equipmentByIDImage(id)
            //result shouldBe ("TODO")
        }

        // to test extractRecipeFromWebsite
        should("test extractRecipeFromWebsite") {
            // uncomment below to test extractRecipeFromWebsite
            //val url : kotlin.String = https://foodista.com/recipe/ZHK4KPB6/chocolate-crinkle-cookies // kotlin.String | The URL of the recipe page.
            //val forceExtraction : kotlin.Boolean = true // kotlin.Boolean | If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
            //val analyze : kotlin.Boolean = false // kotlin.Boolean | If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
            //val includeNutrition : kotlin.Boolean = true // kotlin.Boolean | Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
            //val includeTaste : kotlin.Boolean = false // kotlin.Boolean | Whether taste data should be added to correctly parsed ingredients.
            //val result : GetRecipeInformation200Response = apiInstance.extractRecipeFromWebsite(url, forceExtraction, analyze, includeNutrition, includeTaste)
            //result shouldBe ("TODO")
        }

        // to test getAnalyzedRecipeInstructions
        should("test getAnalyzedRecipeInstructions") {
            // uncomment below to test getAnalyzedRecipeInstructions
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val stepBreakdown : kotlin.Boolean = true // kotlin.Boolean | Whether to break down the recipe steps even more.
            //val result : GetAnalyzedRecipeInstructions200Response = apiInstance.getAnalyzedRecipeInstructions(id, stepBreakdown)
            //result shouldBe ("TODO")
        }

        // to test getRandomRecipes
        should("test getRandomRecipes") {
            // uncomment below to test getRandomRecipes
            //val limitLicense : kotlin.Boolean = true // kotlin.Boolean | Whether the recipes should have an open license that allows display with proper attribution.
            //val includeNutrition : kotlin.Boolean = true // kotlin.Boolean | Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
            //val includeTags : kotlin.String = vegetarian,gluten // kotlin.String | A comma-separated list of tags that the random recipe(s) must adhere to.
            //val excludeTags : kotlin.String = meat,dairy // kotlin.String | A comma-separated list of tags that the random recipe(s) must not adhere to.
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val result : GetRandomRecipes200Response = apiInstance.getRandomRecipes(limitLicense, includeNutrition, includeTags, excludeTags, number)
            //result shouldBe ("TODO")
        }

        // to test getRecipeEquipmentByID
        should("test getRecipeEquipmentByID") {
            // uncomment below to test getRecipeEquipmentByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val result : GetRecipeEquipmentByID200Response = apiInstance.getRecipeEquipmentByID(id)
            //result shouldBe ("TODO")
        }

        // to test getRecipeInformation
        should("test getRecipeInformation") {
            // uncomment below to test getRecipeInformation
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val includeNutrition : kotlin.Boolean = true // kotlin.Boolean | Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
            //val result : GetRecipeInformation200Response = apiInstance.getRecipeInformation(id, includeNutrition)
            //result shouldBe ("TODO")
        }

        // to test getRecipeInformationBulk
        should("test getRecipeInformationBulk") {
            // uncomment below to test getRecipeInformationBulk
            //val ids : kotlin.String = 715538,716429 // kotlin.String | A comma-separated list of recipe ids.
            //val includeNutrition : kotlin.Boolean = true // kotlin.Boolean | Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
            //val result : kotlin.collections.Set<GetRecipeInformationBulk200ResponseInner> = apiInstance.getRecipeInformationBulk(ids, includeNutrition)
            //result shouldBe ("TODO")
        }

        // to test getRecipeIngredientsByID
        should("test getRecipeIngredientsByID") {
            // uncomment below to test getRecipeIngredientsByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val result : GetRecipeIngredientsByID200Response = apiInstance.getRecipeIngredientsByID(id)
            //result shouldBe ("TODO")
        }

        // to test getRecipeNutritionWidgetByID
        should("test getRecipeNutritionWidgetByID") {
            // uncomment below to test getRecipeNutritionWidgetByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val result : GetRecipeNutritionWidgetByID200Response = apiInstance.getRecipeNutritionWidgetByID(id)
            //result shouldBe ("TODO")
        }

        // to test getRecipePriceBreakdownByID
        should("test getRecipePriceBreakdownByID") {
            // uncomment below to test getRecipePriceBreakdownByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val result : GetRecipePriceBreakdownByID200Response = apiInstance.getRecipePriceBreakdownByID(id)
            //result shouldBe ("TODO")
        }

        // to test getRecipeTasteByID
        should("test getRecipeTasteByID") {
            // uncomment below to test getRecipeTasteByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val normalize : kotlin.Boolean = true // kotlin.Boolean | Normalize to the strongest taste.
            //val result : GetRecipeTasteByID200Response = apiInstance.getRecipeTasteByID(id, normalize)
            //result shouldBe ("TODO")
        }

        // to test getSimilarRecipes
        should("test getSimilarRecipes") {
            // uncomment below to test getSimilarRecipes
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val limitLicense : kotlin.Boolean = true // kotlin.Boolean | Whether the recipes should have an open license that allows display with proper attribution.
            //val result : kotlin.collections.Set<GetSimilarRecipes200ResponseInner> = apiInstance.getSimilarRecipes(id, number, limitLicense)
            //result shouldBe ("TODO")
        }

        // to test guessNutritionByDishName
        should("test guessNutritionByDishName") {
            // uncomment below to test guessNutritionByDishName
            //val title : kotlin.String = Spaghetti Aglio et Olio // kotlin.String | The title of the dish.
            //val result : GuessNutritionByDishName200Response = apiInstance.guessNutritionByDishName(title)
            //result shouldBe ("TODO")
        }

        // to test parseIngredients
        should("test parseIngredients") {
            // uncomment below to test parseIngredients
            //val ingredientList : kotlin.String = ingredientList_example // kotlin.String | The ingredient list of the recipe, one ingredient per line.
            //val servings : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The number of servings that you can make from the ingredients.
            //val language : kotlin.String = en // kotlin.String | The language of the input. Either 'en' or 'de'.
            //val includeNutrition : kotlin.Boolean = true // kotlin.Boolean | 
            //val result : kotlin.collections.Set<ParseIngredients200ResponseInner> = apiInstance.parseIngredients(ingredientList, servings, language, includeNutrition)
            //result shouldBe ("TODO")
        }

        // to test priceBreakdownByIDImage
        should("test priceBreakdownByIDImage") {
            // uncomment below to test priceBreakdownByIDImage
            //val id : java.math.BigDecimal = 1082038 // java.math.BigDecimal | The recipe id.
            //val result : java.io.File = apiInstance.priceBreakdownByIDImage(id)
            //result shouldBe ("TODO")
        }

        // to test quickAnswer
        should("test quickAnswer") {
            // uncomment below to test quickAnswer
            //val q : kotlin.String = How much vitamin c is in 2 apples? // kotlin.String | The nutrition related question.
            //val result : QuickAnswer200Response = apiInstance.quickAnswer(q)
            //result shouldBe ("TODO")
        }

        // to test recipeNutritionByIDImage
        should("test recipeNutritionByIDImage") {
            // uncomment below to test recipeNutritionByIDImage
            //val id : java.math.BigDecimal = 1082038 // java.math.BigDecimal | The recipe id.
            //val result : java.io.File = apiInstance.recipeNutritionByIDImage(id)
            //result shouldBe ("TODO")
        }

        // to test recipeNutritionLabelImage
        should("test recipeNutritionLabelImage") {
            // uncomment below to test recipeNutritionLabelImage
            //val id : java.math.BigDecimal = 641166 // java.math.BigDecimal | The recipe id.
            //val showOptionalNutrients : kotlin.Boolean = false // kotlin.Boolean | Whether to show optional nutrients.
            //val showZeroValues : kotlin.Boolean = false // kotlin.Boolean | Whether to show zero values.
            //val showIngredients : kotlin.Boolean = false // kotlin.Boolean | Whether to show a list of ingredients.
            //val result : java.io.File = apiInstance.recipeNutritionLabelImage(id, showOptionalNutrients, showZeroValues, showIngredients)
            //result shouldBe ("TODO")
        }

        // to test recipeNutritionLabelWidget
        should("test recipeNutritionLabelWidget") {
            // uncomment below to test recipeNutritionLabelWidget
            //val id : java.math.BigDecimal = 641166 // java.math.BigDecimal | The recipe id.
            //val defaultCss : kotlin.Boolean = false // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val showOptionalNutrients : kotlin.Boolean = false // kotlin.Boolean | Whether to show optional nutrients.
            //val showZeroValues : kotlin.Boolean = false // kotlin.Boolean | Whether to show zero values.
            //val showIngredients : kotlin.Boolean = false // kotlin.Boolean | Whether to show a list of ingredients.
            //val result : kotlin.String = apiInstance.recipeNutritionLabelWidget(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients)
            //result shouldBe ("TODO")
        }

        // to test recipeTasteByIDImage
        should("test recipeTasteByIDImage") {
            // uncomment below to test recipeTasteByIDImage
            //val id : java.math.BigDecimal = 69095 // java.math.BigDecimal | The recipe id.
            //val normalize : kotlin.Boolean = false // kotlin.Boolean | Normalize to the strongest taste.
            //val rgb : kotlin.String = 75,192,192 // kotlin.String | Red, green, blue values for the chart color.
            //val result : java.io.File = apiInstance.recipeTasteByIDImage(id, normalize, rgb)
            //result shouldBe ("TODO")
        }

        // to test searchRecipes
        should("test searchRecipes") {
            // uncomment below to test searchRecipes
            //val query : kotlin.String = burger // kotlin.String | The (natural language) search query.
            //val cuisine : kotlin.String = italian // kotlin.String | The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
            //val excludeCuisine : kotlin.String = greek // kotlin.String | The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
            //val diet : kotlin.String = vegetarian // kotlin.String | The diet for which the recipes must be suitable. See a full list of supported diets.
            //val intolerances : kotlin.String = gluten // kotlin.String | A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
            //val equipment : kotlin.String = pan // kotlin.String | The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
            //val includeIngredients : kotlin.String = tomato,cheese // kotlin.String | A comma-separated list of ingredients that should/must be used in the recipes.
            //val excludeIngredients : kotlin.String = eggs // kotlin.String | A comma-separated list of ingredients or ingredient types that the recipes must not contain.
            //val type : kotlin.String = main course // kotlin.String | The type of recipe. See a full list of supported meal types.
            //val instructionsRequired : kotlin.Boolean = true // kotlin.Boolean | Whether the recipes must have instructions.
            //val fillIngredients : kotlin.Boolean = false // kotlin.Boolean | Add information about the ingredients and whether they are used or missing in relation to the query.
            //val addRecipeInformation : kotlin.Boolean = false // kotlin.Boolean | If set to true, you get more information about the recipes returned.
            //val addRecipeNutrition : kotlin.Boolean = false // kotlin.Boolean | If set to true, you get nutritional information about each recipes returned.
            //val author : kotlin.String = coffeebean // kotlin.String | The username of the recipe author.
            //val tags : kotlin.String = tags_example // kotlin.String | The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
            //val recipeBoxId : java.math.BigDecimal = 2468 // java.math.BigDecimal | The id of the recipe box to which the search should be limited to.
            //val titleMatch : kotlin.String = Crock Pot // kotlin.String | Enter text that must be found in the title of the recipes.
            //val maxReadyTime : java.math.BigDecimal = 20 // java.math.BigDecimal | The maximum time in minutes it should take to prepare and cook the recipe.
            //val minServings : java.math.BigDecimal = 1 // java.math.BigDecimal | The minimum amount of servings the recipe is for.
            //val maxServings : java.math.BigDecimal = 8 // java.math.BigDecimal | The maximum amount of servings the recipe is for.
            //val ignorePantry : kotlin.Boolean = false // kotlin.Boolean | Whether to ignore typical pantry items, such as water, salt, flour, etc.
            //val sort : kotlin.String = calories // kotlin.String | The strategy to sort recipes by. See a full list of supported sorting options.
            //val sortDirection : kotlin.String = asc // kotlin.String | The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
            //val minCarbs : java.math.BigDecimal = 10 // java.math.BigDecimal | The minimum amount of carbohydrates in grams the recipe must have.
            //val maxCarbs : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of carbohydrates in grams the recipe can have.
            //val minProtein : java.math.BigDecimal = 10 // java.math.BigDecimal | The minimum amount of protein in grams the recipe must have.
            //val maxProtein : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of protein in grams the recipe can have.
            //val minCalories : java.math.BigDecimal = 50 // java.math.BigDecimal | The minimum amount of calories the recipe must have.
            //val maxCalories : java.math.BigDecimal = 800 // java.math.BigDecimal | The maximum amount of calories the recipe can have.
            //val minFat : java.math.BigDecimal = 1 // java.math.BigDecimal | The minimum amount of fat in grams the recipe must have.
            //val maxFat : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of fat in grams the recipe can have.
            //val minAlcohol : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of alcohol in grams the recipe must have.
            //val maxAlcohol : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of alcohol in grams the recipe can have.
            //val minCaffeine : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of caffeine in milligrams the recipe must have.
            //val maxCaffeine : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of caffeine in milligrams the recipe can have.
            //val minCopper : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of copper in milligrams the recipe must have.
            //val maxCopper : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of copper in milligrams the recipe can have.
            //val minCalcium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of calcium in milligrams the recipe must have.
            //val maxCalcium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of calcium in milligrams the recipe can have.
            //val minCholine : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of choline in milligrams the recipe must have.
            //val maxCholine : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of choline in milligrams the recipe can have.
            //val minCholesterol : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of cholesterol in milligrams the recipe must have.
            //val maxCholesterol : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of cholesterol in milligrams the recipe can have.
            //val minFluoride : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of fluoride in milligrams the recipe must have.
            //val maxFluoride : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of fluoride in milligrams the recipe can have.
            //val minSaturatedFat : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of saturated fat in grams the recipe must have.
            //val maxSaturatedFat : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of saturated fat in grams the recipe can have.
            //val minVitaminA : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin A in IU the recipe must have.
            //val maxVitaminA : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin A in IU the recipe can have.
            //val minVitaminC : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin C milligrams the recipe must have.
            //val maxVitaminC : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin C in milligrams the recipe can have.
            //val minVitaminD : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin D in micrograms the recipe must have.
            //val maxVitaminD : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin D in micrograms the recipe can have.
            //val minVitaminE : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin E in milligrams the recipe must have.
            //val maxVitaminE : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin E in milligrams the recipe can have.
            //val minVitaminK : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin K in micrograms the recipe must have.
            //val maxVitaminK : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin K in micrograms the recipe can have.
            //val minVitaminB1 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B1 in milligrams the recipe must have.
            //val maxVitaminB1 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B1 in milligrams the recipe can have.
            //val minVitaminB2 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B2 in milligrams the recipe must have.
            //val maxVitaminB2 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B2 in milligrams the recipe can have.
            //val minVitaminB5 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B5 in milligrams the recipe must have.
            //val maxVitaminB5 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B5 in milligrams the recipe can have.
            //val minVitaminB3 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B3 in milligrams the recipe must have.
            //val maxVitaminB3 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B3 in milligrams the recipe can have.
            //val minVitaminB6 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B6 in milligrams the recipe must have.
            //val maxVitaminB6 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B6 in milligrams the recipe can have.
            //val minVitaminB12 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B12 in micrograms the recipe must have.
            //val maxVitaminB12 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B12 in micrograms the recipe can have.
            //val minFiber : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of fiber in grams the recipe must have.
            //val maxFiber : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of fiber in grams the recipe can have.
            //val minFolate : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of folate in micrograms the recipe must have.
            //val maxFolate : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of folate in micrograms the recipe can have.
            //val minFolicAcid : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of folic acid in micrograms the recipe must have.
            //val maxFolicAcid : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of folic acid in micrograms the recipe can have.
            //val minIodine : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of iodine in micrograms the recipe must have.
            //val maxIodine : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of iodine in micrograms the recipe can have.
            //val minIron : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of iron in milligrams the recipe must have.
            //val maxIron : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of iron in milligrams the recipe can have.
            //val minMagnesium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of magnesium in milligrams the recipe must have.
            //val maxMagnesium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of magnesium in milligrams the recipe can have.
            //val minManganese : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of manganese in milligrams the recipe must have.
            //val maxManganese : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of manganese in milligrams the recipe can have.
            //val minPhosphorus : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of phosphorus in milligrams the recipe must have.
            //val maxPhosphorus : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of phosphorus in milligrams the recipe can have.
            //val minPotassium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of potassium in milligrams the recipe must have.
            //val maxPotassium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of potassium in milligrams the recipe can have.
            //val minSelenium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of selenium in micrograms the recipe must have.
            //val maxSelenium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of selenium in micrograms the recipe can have.
            //val minSodium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of sodium in milligrams the recipe must have.
            //val maxSodium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of sodium in milligrams the recipe can have.
            //val minSugar : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of sugar in grams the recipe must have.
            //val maxSugar : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of sugar in grams the recipe can have.
            //val minZinc : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of zinc in milligrams the recipe must have.
            //val maxZinc : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of zinc in milligrams the recipe can have.
            //val offset : kotlin.Int = 56 // kotlin.Int | The number of results to skip (between 0 and 900).
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val limitLicense : kotlin.Boolean = true // kotlin.Boolean | Whether the recipes should have an open license that allows display with proper attribution.
            //val result : SearchRecipes200Response = apiInstance.searchRecipes(query, cuisine, excludeCuisine, diet, intolerances, equipment, includeIngredients, excludeIngredients, type, instructionsRequired, fillIngredients, addRecipeInformation, addRecipeNutrition, author, tags, recipeBoxId, titleMatch, maxReadyTime, minServings, maxServings, ignorePantry, sort, sortDirection, minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, limitLicense)
            //result shouldBe ("TODO")
        }

        // to test searchRecipesByIngredients
        should("test searchRecipesByIngredients") {
            // uncomment below to test searchRecipesByIngredients
            //val ingredients : kotlin.String = carrots,tomatoes // kotlin.String | A comma-separated list of ingredients that the recipes should contain.
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val limitLicense : kotlin.Boolean = true // kotlin.Boolean | Whether the recipes should have an open license that allows display with proper attribution.
            //val ranking : java.math.BigDecimal = 1 // java.math.BigDecimal | Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
            //val ignorePantry : kotlin.Boolean = false // kotlin.Boolean | Whether to ignore typical pantry items, such as water, salt, flour, etc.
            //val result : kotlin.collections.Set<SearchRecipesByIngredients200ResponseInner> = apiInstance.searchRecipesByIngredients(ingredients, number, limitLicense, ranking, ignorePantry)
            //result shouldBe ("TODO")
        }

        // to test searchRecipesByNutrients
        should("test searchRecipesByNutrients") {
            // uncomment below to test searchRecipesByNutrients
            //val minCarbs : java.math.BigDecimal = 10 // java.math.BigDecimal | The minimum amount of carbohydrates in grams the recipe must have.
            //val maxCarbs : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of carbohydrates in grams the recipe can have.
            //val minProtein : java.math.BigDecimal = 10 // java.math.BigDecimal | The minimum amount of protein in grams the recipe must have.
            //val maxProtein : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of protein in grams the recipe can have.
            //val minCalories : java.math.BigDecimal = 50 // java.math.BigDecimal | The minimum amount of calories the recipe must have.
            //val maxCalories : java.math.BigDecimal = 800 // java.math.BigDecimal | The maximum amount of calories the recipe can have.
            //val minFat : java.math.BigDecimal = 1 // java.math.BigDecimal | The minimum amount of fat in grams the recipe must have.
            //val maxFat : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of fat in grams the recipe can have.
            //val minAlcohol : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of alcohol in grams the recipe must have.
            //val maxAlcohol : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of alcohol in grams the recipe can have.
            //val minCaffeine : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of caffeine in milligrams the recipe must have.
            //val maxCaffeine : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of caffeine in milligrams the recipe can have.
            //val minCopper : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of copper in milligrams the recipe must have.
            //val maxCopper : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of copper in milligrams the recipe can have.
            //val minCalcium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of calcium in milligrams the recipe must have.
            //val maxCalcium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of calcium in milligrams the recipe can have.
            //val minCholine : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of choline in milligrams the recipe must have.
            //val maxCholine : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of choline in milligrams the recipe can have.
            //val minCholesterol : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of cholesterol in milligrams the recipe must have.
            //val maxCholesterol : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of cholesterol in milligrams the recipe can have.
            //val minFluoride : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of fluoride in milligrams the recipe must have.
            //val maxFluoride : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of fluoride in milligrams the recipe can have.
            //val minSaturatedFat : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of saturated fat in grams the recipe must have.
            //val maxSaturatedFat : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of saturated fat in grams the recipe can have.
            //val minVitaminA : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin A in IU the recipe must have.
            //val maxVitaminA : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin A in IU the recipe can have.
            //val minVitaminC : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin C in milligrams the recipe must have.
            //val maxVitaminC : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin C in milligrams the recipe can have.
            //val minVitaminD : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin D in micrograms the recipe must have.
            //val maxVitaminD : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin D in micrograms the recipe can have.
            //val minVitaminE : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin E in milligrams the recipe must have.
            //val maxVitaminE : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin E in milligrams the recipe can have.
            //val minVitaminK : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin K in micrograms the recipe must have.
            //val maxVitaminK : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin K in micrograms the recipe can have.
            //val minVitaminB1 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B1 in milligrams the recipe must have.
            //val maxVitaminB1 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B1 in milligrams the recipe can have.
            //val minVitaminB2 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B2 in milligrams the recipe must have.
            //val maxVitaminB2 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B2 in milligrams the recipe can have.
            //val minVitaminB5 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B5 in milligrams the recipe must have.
            //val maxVitaminB5 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B5 in milligrams the recipe can have.
            //val minVitaminB3 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B3 in milligrams the recipe must have.
            //val maxVitaminB3 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B3 in milligrams the recipe can have.
            //val minVitaminB6 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B6 in milligrams the recipe must have.
            //val maxVitaminB6 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B6 in milligrams the recipe can have.
            //val minVitaminB12 : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of Vitamin B12 in micrograms the recipe must have.
            //val maxVitaminB12 : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of Vitamin B12 in micrograms the recipe can have.
            //val minFiber : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of fiber in grams the recipe must have.
            //val maxFiber : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of fiber in grams the recipe can have.
            //val minFolate : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of folate in micrograms the recipe must have.
            //val maxFolate : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of folate in micrograms the recipe can have.
            //val minFolicAcid : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of folic acid in micrograms the recipe must have.
            //val maxFolicAcid : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of folic acid in micrograms the recipe can have.
            //val minIodine : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of iodine in micrograms the recipe must have.
            //val maxIodine : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of iodine in micrograms the recipe can have.
            //val minIron : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of iron in milligrams the recipe must have.
            //val maxIron : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of iron in milligrams the recipe can have.
            //val minMagnesium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of magnesium in milligrams the recipe must have.
            //val maxMagnesium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of magnesium in milligrams the recipe can have.
            //val minManganese : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of manganese in milligrams the recipe must have.
            //val maxManganese : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of manganese in milligrams the recipe can have.
            //val minPhosphorus : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of phosphorus in milligrams the recipe must have.
            //val maxPhosphorus : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of phosphorus in milligrams the recipe can have.
            //val minPotassium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of potassium in milligrams the recipe must have.
            //val maxPotassium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of potassium in milligrams the recipe can have.
            //val minSelenium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of selenium in micrograms the recipe must have.
            //val maxSelenium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of selenium in micrograms the recipe can have.
            //val minSodium : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of sodium in milligrams the recipe must have.
            //val maxSodium : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of sodium in milligrams the recipe can have.
            //val minSugar : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of sugar in grams the recipe must have.
            //val maxSugar : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of sugar in grams the recipe can have.
            //val minZinc : java.math.BigDecimal = 0 // java.math.BigDecimal | The minimum amount of zinc in milligrams the recipe must have.
            //val maxZinc : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of zinc in milligrams the recipe can have.
            //val offset : kotlin.Int = 56 // kotlin.Int | The number of results to skip (between 0 and 900).
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val random : kotlin.Boolean = false // kotlin.Boolean | If true, every request will give you a random set of recipes within the requested limits.
            //val limitLicense : kotlin.Boolean = true // kotlin.Boolean | Whether the recipes should have an open license that allows display with proper attribution.
            //val result : kotlin.collections.Set<SearchRecipesByNutrients200ResponseInner> = apiInstance.searchRecipesByNutrients(minCarbs, maxCarbs, minProtein, maxProtein, minCalories, maxCalories, minFat, maxFat, minAlcohol, maxAlcohol, minCaffeine, maxCaffeine, minCopper, maxCopper, minCalcium, maxCalcium, minCholine, maxCholine, minCholesterol, maxCholesterol, minFluoride, maxFluoride, minSaturatedFat, maxSaturatedFat, minVitaminA, maxVitaminA, minVitaminC, maxVitaminC, minVitaminD, maxVitaminD, minVitaminE, maxVitaminE, minVitaminK, maxVitaminK, minVitaminB1, maxVitaminB1, minVitaminB2, maxVitaminB2, minVitaminB5, maxVitaminB5, minVitaminB3, maxVitaminB3, minVitaminB6, maxVitaminB6, minVitaminB12, maxVitaminB12, minFiber, maxFiber, minFolate, maxFolate, minFolicAcid, maxFolicAcid, minIodine, maxIodine, minIron, maxIron, minMagnesium, maxMagnesium, minManganese, maxManganese, minPhosphorus, maxPhosphorus, minPotassium, maxPotassium, minSelenium, maxSelenium, minSodium, maxSodium, minSugar, maxSugar, minZinc, maxZinc, offset, number, random, limitLicense)
            //result shouldBe ("TODO")
        }

        // to test summarizeRecipe
        should("test summarizeRecipe") {
            // uncomment below to test summarizeRecipe
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val result : SummarizeRecipe200Response = apiInstance.summarizeRecipe(id)
            //result shouldBe ("TODO")
        }

        // to test visualizeEquipment
        should("test visualizeEquipment") {
            // uncomment below to test visualizeEquipment
            //val instructions : kotlin.String = instructions_example // kotlin.String | The recipe's instructions.
            //val view : kotlin.String = view_example // kotlin.String | How to visualize the ingredients, either 'grid' or 'list'.
            //val defaultCss : kotlin.Boolean = true // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val showBacklink : kotlin.Boolean = true // kotlin.Boolean | Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
            //val result : kotlin.String = apiInstance.visualizeEquipment(instructions, view, defaultCss, showBacklink)
            //result shouldBe ("TODO")
        }

        // to test visualizePriceBreakdown
        should("test visualizePriceBreakdown") {
            // uncomment below to test visualizePriceBreakdown
            //val ingredientList : kotlin.String = ingredientList_example // kotlin.String | The ingredient list of the recipe, one ingredient per line.
            //val servings : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The number of servings.
            //val language : kotlin.String = en // kotlin.String | The language of the input. Either 'en' or 'de'.
            //val mode : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
            //val defaultCss : kotlin.Boolean = true // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val showBacklink : kotlin.Boolean = true // kotlin.Boolean | Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
            //val result : kotlin.String = apiInstance.visualizePriceBreakdown(ingredientList, servings, language, mode, defaultCss, showBacklink)
            //result shouldBe ("TODO")
        }

        // to test visualizeRecipeEquipmentByID
        should("test visualizeRecipeEquipmentByID") {
            // uncomment below to test visualizeRecipeEquipmentByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val defaultCss : kotlin.Boolean = false // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val result : kotlin.String = apiInstance.visualizeRecipeEquipmentByID(id, defaultCss)
            //result shouldBe ("TODO")
        }

        // to test visualizeRecipeIngredientsByID
        should("test visualizeRecipeIngredientsByID") {
            // uncomment below to test visualizeRecipeIngredientsByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val defaultCss : kotlin.Boolean = false // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val measure : kotlin.String = metric // kotlin.String | Whether the the measures should be 'us' or 'metric'.
            //val result : kotlin.String = apiInstance.visualizeRecipeIngredientsByID(id, defaultCss, measure)
            //result shouldBe ("TODO")
        }

        // to test visualizeRecipeNutrition
        should("test visualizeRecipeNutrition") {
            // uncomment below to test visualizeRecipeNutrition
            //val ingredientList : kotlin.String = ingredientList_example // kotlin.String | The ingredient list of the recipe, one ingredient per line.
            //val servings : java.math.BigDecimal = 8.14 // java.math.BigDecimal | The number of servings.
            //val language : kotlin.String = en // kotlin.String | The language of the input. Either 'en' or 'de'.
            //val defaultCss : kotlin.Boolean = true // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val showBacklink : kotlin.Boolean = true // kotlin.Boolean | Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
            //val result : kotlin.String = apiInstance.visualizeRecipeNutrition(ingredientList, servings, language, defaultCss, showBacklink)
            //result shouldBe ("TODO")
        }

        // to test visualizeRecipeNutritionByID
        should("test visualizeRecipeNutritionByID") {
            // uncomment below to test visualizeRecipeNutritionByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val defaultCss : kotlin.Boolean = false // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val result : kotlin.String = apiInstance.visualizeRecipeNutritionByID(id, defaultCss)
            //result shouldBe ("TODO")
        }

        // to test visualizeRecipePriceBreakdownByID
        should("test visualizeRecipePriceBreakdownByID") {
            // uncomment below to test visualizeRecipePriceBreakdownByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val defaultCss : kotlin.Boolean = false // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val result : kotlin.String = apiInstance.visualizeRecipePriceBreakdownByID(id, defaultCss)
            //result shouldBe ("TODO")
        }

        // to test visualizeRecipeTaste
        should("test visualizeRecipeTaste") {
            // uncomment below to test visualizeRecipeTaste
            //val ingredientList : kotlin.String = ingredientList_example // kotlin.String | The ingredient list of the recipe, one ingredient per line.
            //val language : kotlin.String = en // kotlin.String | The language of the input. Either 'en' or 'de'.
            //val normalize : kotlin.Boolean = true // kotlin.Boolean | Normalize to the strongest taste.
            //val rgb : kotlin.String = rgb_example // kotlin.String | Red, green, blue values for the chart color.
            //val result : kotlin.String = apiInstance.visualizeRecipeTaste(ingredientList, language, normalize, rgb)
            //result shouldBe ("TODO")
        }

        // to test visualizeRecipeTasteByID
        should("test visualizeRecipeTasteByID") {
            // uncomment below to test visualizeRecipeTasteByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val normalize : kotlin.Boolean = true // kotlin.Boolean | Whether to normalize to the strongest taste.
            //val rgb : kotlin.String = 75,192,192 // kotlin.String | Red, green, blue values for the chart color.
            //val result : kotlin.String = apiInstance.visualizeRecipeTasteByID(id, normalize, rgb)
            //result shouldBe ("TODO")
        }

    }
}
