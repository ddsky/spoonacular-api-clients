/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.spoonacular.ProductsApi
import com.spoonacular.client.model.AutocompleteProductSearch200Response
import com.spoonacular.client.model.ClassifyGroceryProduct200Response
import com.spoonacular.client.model.ClassifyGroceryProductBulk200ResponseInner
import com.spoonacular.client.model.ClassifyGroceryProductBulkRequestInner
import com.spoonacular.client.model.ClassifyGroceryProductRequest
import com.spoonacular.client.model.GetComparableProducts200Response
import com.spoonacular.client.model.GetProductInformation200Response
import com.spoonacular.client.model.SearchGroceryProducts200Response
import com.spoonacular.client.model.SearchGroceryProductsByUPC200Response

class ProductsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of ProductsApi
        //val apiInstance = ProductsApi()

        // to test autocompleteProductSearch
        should("test autocompleteProductSearch") {
            // uncomment below to test autocompleteProductSearch
            //val query : kotlin.String = chicke // kotlin.String | The (partial) search query.
            //val number : kotlin.Int = 10 // kotlin.Int | The number of results to return (between 1 and 25).
            //val result : AutocompleteProductSearch200Response = apiInstance.autocompleteProductSearch(query, number)
            //result shouldBe ("TODO")
        }

        // to test classifyGroceryProduct
        should("test classifyGroceryProduct") {
            // uncomment below to test classifyGroceryProduct
            //val classifyGroceryProductRequest : ClassifyGroceryProductRequest = {"title":"Kroger Vitamin A & D Reduced Fat 2% Milk","upc":"","plu_code":""} // ClassifyGroceryProductRequest | 
            //val locale : kotlin.String = en_US // kotlin.String | The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
            //val result : ClassifyGroceryProduct200Response = apiInstance.classifyGroceryProduct(classifyGroceryProductRequest, locale)
            //result shouldBe ("TODO")
        }

        // to test classifyGroceryProductBulk
        should("test classifyGroceryProductBulk") {
            // uncomment below to test classifyGroceryProductBulk
            //val classifyGroceryProductBulkRequestInner : kotlin.collections.Set<ClassifyGroceryProductBulkRequestInner> = [{"title":"Kroger Vitamin A & D Reduced Fat 2% Milk","upc":"","plu_code":""}] // kotlin.collections.Set<ClassifyGroceryProductBulkRequestInner> | 
            //val locale : kotlin.String = en_US // kotlin.String | The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).
            //val result : kotlin.collections.Set<ClassifyGroceryProductBulk200ResponseInner> = apiInstance.classifyGroceryProductBulk(classifyGroceryProductBulkRequestInner, locale)
            //result shouldBe ("TODO")
        }

        // to test getComparableProducts
        should("test getComparableProducts") {
            // uncomment below to test getComparableProducts
            //val upc : java.math.BigDecimal = 33698816271 // java.math.BigDecimal | The UPC of the product for which you want to find comparable products.
            //val result : GetComparableProducts200Response = apiInstance.getComparableProducts(upc)
            //result shouldBe ("TODO")
        }

        // to test getProductInformation
        should("test getProductInformation") {
            // uncomment below to test getProductInformation
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val result : GetProductInformation200Response = apiInstance.getProductInformation(id)
            //result shouldBe ("TODO")
        }

        // to test productNutritionByIDImage
        should("test productNutritionByIDImage") {
            // uncomment below to test productNutritionByIDImage
            //val id : java.math.BigDecimal = 7657 // java.math.BigDecimal | The id of the product.
            //val result : java.io.File = apiInstance.productNutritionByIDImage(id)
            //result shouldBe ("TODO")
        }

        // to test productNutritionLabelImage
        should("test productNutritionLabelImage") {
            // uncomment below to test productNutritionLabelImage
            //val id : java.math.BigDecimal = 22347 // java.math.BigDecimal | The product id.
            //val showOptionalNutrients : kotlin.Boolean = false // kotlin.Boolean | Whether to show optional nutrients.
            //val showZeroValues : kotlin.Boolean = false // kotlin.Boolean | Whether to show zero values.
            //val showIngredients : kotlin.Boolean = false // kotlin.Boolean | Whether to show a list of ingredients.
            //val result : java.io.File = apiInstance.productNutritionLabelImage(id, showOptionalNutrients, showZeroValues, showIngredients)
            //result shouldBe ("TODO")
        }

        // to test productNutritionLabelWidget
        should("test productNutritionLabelWidget") {
            // uncomment below to test productNutritionLabelWidget
            //val id : java.math.BigDecimal = 22347 // java.math.BigDecimal | The product id.
            //val defaultCss : kotlin.Boolean = false // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val showOptionalNutrients : kotlin.Boolean = false // kotlin.Boolean | Whether to show optional nutrients.
            //val showZeroValues : kotlin.Boolean = false // kotlin.Boolean | Whether to show zero values.
            //val showIngredients : kotlin.Boolean = false // kotlin.Boolean | Whether to show a list of ingredients.
            //val result : kotlin.String = apiInstance.productNutritionLabelWidget(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients)
            //result shouldBe ("TODO")
        }

        // to test searchGroceryProducts
        should("test searchGroceryProducts") {
            // uncomment below to test searchGroceryProducts
            //val query : kotlin.String = burger // kotlin.String | The (natural language) search query.
            //val minCalories : java.math.BigDecimal = 50 // java.math.BigDecimal | The minimum amount of calories the product must have.
            //val maxCalories : java.math.BigDecimal = 800 // java.math.BigDecimal | The maximum amount of calories the product can have.
            //val minCarbs : java.math.BigDecimal = 10 // java.math.BigDecimal | The minimum amount of carbohydrates in grams the product must have.
            //val maxCarbs : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of carbohydrates in grams the product can have.
            //val minProtein : java.math.BigDecimal = 10 // java.math.BigDecimal | The minimum amount of protein in grams the product must have.
            //val maxProtein : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of protein in grams the product can have.
            //val minFat : java.math.BigDecimal = 1 // java.math.BigDecimal | The minimum amount of fat in grams the product must have.
            //val maxFat : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of fat in grams the product can have.
            //val addProductInformation : kotlin.Boolean = true // kotlin.Boolean | If set to true, you get more information about the products returned.
            //val offset : kotlin.Int = 56 // kotlin.Int | The number of results to skip (between 0 and 900).
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val result : SearchGroceryProducts200Response = apiInstance.searchGroceryProducts(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addProductInformation, offset, number)
            //result shouldBe ("TODO")
        }

        // to test searchGroceryProductsByUPC
        should("test searchGroceryProductsByUPC") {
            // uncomment below to test searchGroceryProductsByUPC
            //val upc : java.math.BigDecimal = 41631000564 // java.math.BigDecimal | The product's UPC.
            //val result : SearchGroceryProductsByUPC200Response = apiInstance.searchGroceryProductsByUPC(upc)
            //result shouldBe ("TODO")
        }

        // to test visualizeProductNutritionByID
        should("test visualizeProductNutritionByID") {
            // uncomment below to test visualizeProductNutritionByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val defaultCss : kotlin.Boolean = false // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val result : kotlin.String = apiInstance.visualizeProductNutritionByID(id, defaultCss)
            //result shouldBe ("TODO")
        }

    }
}
