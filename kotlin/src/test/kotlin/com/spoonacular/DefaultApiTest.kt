/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.spoonacular.DefaultApi
import com.spoonacular.client.model.AnalyzeRecipeRequest
import com.spoonacular.client.model.SearchRestaurants200Response

class DefaultApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of DefaultApi
        //val apiInstance = DefaultApi()

        // to test analyzeRecipe
        should("test analyzeRecipe") {
            // uncomment below to test analyzeRecipe
            //val analyzeRecipeRequest : AnalyzeRecipeRequest = {"title":"Spaghetti Carbonara","servings":2,"ingredients":["1 lb spaghetti","3.5 oz pancetta","2 Tbsps olive oil","1  egg","0.5 cup parmesan cheese"],"instructions":"Bring a large pot of water to a boil and season generously with salt. Add the pasta to the water once boiling and cook until al dente. Reserve 2 cups of cooking water and drain the pasta. "} // AnalyzeRecipeRequest | Example request body.
            //val language : kotlin.String = en // kotlin.String | The input language, either \"en\" or \"de\".
            //val includeNutrition : kotlin.Boolean = false // kotlin.Boolean | Whether nutrition data should be added to correctly parsed ingredients.
            //val includeTaste : kotlin.Boolean = false // kotlin.Boolean | Whether taste data should be added to correctly parsed ingredients.
            //val result : kotlin.Any = apiInstance.analyzeRecipe(analyzeRecipeRequest, language, includeNutrition, includeTaste)
            //result shouldBe ("TODO")
        }

        // to test createRecipeCardGet
        should("test createRecipeCardGet") {
            // uncomment below to test createRecipeCardGet
            //val id : java.math.BigDecimal = 4632 // java.math.BigDecimal | The recipe id.
            //val mask : kotlin.String = ellipseMask // kotlin.String | The mask to put over the recipe image (\"ellipseMask\", \"diamondMask\", \"starMask\", \"heartMask\", \"potMask\", \"fishMask\").
            //val backgroundImage : kotlin.String = background1 // kotlin.String | The background image (\"none\",\"background1\", or \"background2\").
            //val backgroundColor : kotlin.String = ffffff // kotlin.String | The background color for the recipe card as a hex-string.
            //val fontColor : kotlin.String = 333333 // kotlin.String | The font color for the recipe card as a hex-string.
            //val result : kotlin.Any = apiInstance.createRecipeCardGet(id, mask, backgroundImage, backgroundColor, fontColor)
            //result shouldBe ("TODO")
        }

        // to test searchRestaurants
        should("test searchRestaurants") {
            // uncomment below to test searchRestaurants
            //val query : kotlin.String = beach cafe // kotlin.String | The search query.
            //val lat : java.math.BigDecimal = 37.7786357 // java.math.BigDecimal | The latitude of the user's location.
            //val lng : java.math.BigDecimal = -122.3918135 // java.math.BigDecimal | The longitude of the user's location.\".
            //val distance : java.math.BigDecimal = 2 // java.math.BigDecimal | The distance around the location in miles.
            //val budget : java.math.BigDecimal = 20 // java.math.BigDecimal | The user's budget for a meal in USD.
            //val cuisine : kotlin.String = italian // kotlin.String | The cuisine of the restaurant.
            //val minRating : java.math.BigDecimal = 4.4 // java.math.BigDecimal | The minimum rating of the restaurant between 0 and 5.
            //val isOpen : kotlin.Boolean = true // kotlin.Boolean | Whether the restaurant must be open at the time of search.
            //val sort : kotlin.String = distance // kotlin.String | How to sort the results, one of the following 'cheapest', 'fastest', 'rating', 'distance' or the default 'relevance'.
            //val page : java.math.BigDecimal = 0 // java.math.BigDecimal | The page number of results.
            //val result : SearchRestaurants200Response = apiInstance.searchRestaurants(query, lat, lng, distance, budget, cuisine, minRating, isOpen, sort, page)
            //result shouldBe ("TODO")
        }

    }
}
