# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule SpoonacularAPI.Api.Wine do
  @moduledoc """
  API calls for all endpoints tagged `Wine`.
  """

  alias SpoonacularAPI.Connection
  import SpoonacularAPI.RequestBuilder

  @doc """
  Dish Pairing for Wine
  Find a dish that goes well with a given wine.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `wine` (String.t): The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetDishPairingForWine200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_dish_pairing_for_wine(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetDishPairingForWine200Response.t} | {:error, Tesla.Env.t}
  def get_dish_pairing_for_wine(connection, wine, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/wine/dishes")
      |> add_param(:query, :wine, wine)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetDishPairingForWine200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Wine Description
  Get a simple description of a certain wine, e.g. \"malbec\", \"riesling\", or \"merlot\".

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `wine` (String.t): The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetWineDescription200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_wine_description(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetWineDescription200Response.t} | {:error, Tesla.Env.t}
  def get_wine_description(connection, wine, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/wine/description")
      |> add_param(:query, :wine, wine)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetWineDescription200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Wine Pairing
  Find a wine that goes well with a food. Food can be a dish name (\"steak\"), an ingredient name (\"salmon\"), or a cuisine (\"italian\").

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `food` (String.t): The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").
  - `opts` (keyword): Optional parameters
    - `:maxPrice` (float()): The maximum price for the specific wine recommendation in USD.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetWinePairing200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_wine_pairing(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetWinePairing200Response.t} | {:error, Tesla.Env.t}
  def get_wine_pairing(connection, food, opts \\ []) do
    optional_params = %{
      :maxPrice => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/wine/pairing")
      |> add_param(:query, :food, food)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetWinePairing200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Wine Recommendation
  Get a specific wine recommendation (concrete product) for a given wine type, e.g. \"merlot\".

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `wine` (String.t): The type of wine to get a specific product recommendation for.
  - `opts` (keyword): Optional parameters
    - `:maxPrice` (float()): The maximum price for the specific wine recommendation in USD.
    - `:minRating` (float()): The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
    - `:number` (float()): The number of wine recommendations expected (between 1 and 100).

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetWineRecommendation200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_wine_recommendation(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetWineRecommendation200Response.t} | {:error, Tesla.Env.t}
  def get_wine_recommendation(connection, wine, opts \\ []) do
    optional_params = %{
      :maxPrice => :query,
      :minRating => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/wine/recommendation")
      |> add_param(:query, :wine, wine)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetWineRecommendation200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end
end
