/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.spoonacular.WineApi
import com.spoonacular.client.model.GetDishPairingForWine200Response
import com.spoonacular.client.model.GetWineDescription200Response
import com.spoonacular.client.model.GetWinePairing200Response
import com.spoonacular.client.model.GetWineRecommendation200Response

class WineApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of WineApi
        //val apiInstance = WineApi()

        // to test getDishPairingForWine
        should("test getDishPairingForWine") {
            // uncomment below to test getDishPairingForWine
            //val wine : kotlin.String = malbec // kotlin.String | The type of wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
            //val result : GetDishPairingForWine200Response = apiInstance.getDishPairingForWine(wine)
            //result shouldBe ("TODO")
        }

        // to test getWineDescription
        should("test getWineDescription") {
            // uncomment below to test getWineDescription
            //val wine : kotlin.String = merlot // kotlin.String | The name of the wine that should be paired, e.g. \"merlot\", \"riesling\", or \"malbec\".
            //val result : GetWineDescription200Response = apiInstance.getWineDescription(wine)
            //result shouldBe ("TODO")
        }

        // to test getWinePairing
        should("test getWinePairing") {
            // uncomment below to test getWinePairing
            //val food : kotlin.String = steak // kotlin.String | The food to get a pairing for. This can be a dish (\"steak\"), an ingredient (\"salmon\"), or a cuisine (\"italian\").
            //val maxPrice : java.math.BigDecimal = 50 // java.math.BigDecimal | The maximum price for the specific wine recommendation in USD.
            //val result : GetWinePairing200Response = apiInstance.getWinePairing(food, maxPrice)
            //result shouldBe ("TODO")
        }

        // to test getWineRecommendation
        should("test getWineRecommendation") {
            // uncomment below to test getWineRecommendation
            //val wine : kotlin.String = merlot // kotlin.String | The type of wine to get a specific product recommendation for.
            //val maxPrice : java.math.BigDecimal = 50 // java.math.BigDecimal | The maximum price for the specific wine recommendation in USD.
            //val minRating : java.math.BigDecimal = 0.7 // java.math.BigDecimal | The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
            //val number : java.math.BigDecimal = 3 // java.math.BigDecimal | The number of wine recommendations expected (between 1 and 100).
            //val result : GetWineRecommendation200Response = apiInstance.getWineRecommendation(wine, maxPrice, minRating, number)
            //result shouldBe ("TODO")
        }

    }
}
