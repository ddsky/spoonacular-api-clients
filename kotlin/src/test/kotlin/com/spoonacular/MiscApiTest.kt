/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.spoonacular.MiscApi
import com.spoonacular.client.model.DetectFoodInText200Response
import com.spoonacular.client.model.GetARandomFoodJoke200Response
import com.spoonacular.client.model.GetConversationSuggests200Response
import com.spoonacular.client.model.GetRandomFoodTrivia200Response
import com.spoonacular.client.model.ImageAnalysisByURL200Response
import com.spoonacular.client.model.ImageClassificationByURL200Response
import com.spoonacular.client.model.SearchAllFood200Response
import com.spoonacular.client.model.SearchCustomFoods200Response
import com.spoonacular.client.model.SearchFoodVideos200Response
import com.spoonacular.client.model.SearchSiteContent200Response
import com.spoonacular.client.model.TalkToChatbot200Response

class MiscApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MiscApi
        //val apiInstance = MiscApi()

        // to test detectFoodInText
        should("test detectFoodInText") {
            // uncomment below to test detectFoodInText
            //val text : kotlin.String = text_example // kotlin.String | 
            //val result : DetectFoodInText200Response = apiInstance.detectFoodInText(text)
            //result shouldBe ("TODO")
        }

        // to test getARandomFoodJoke
        should("test getARandomFoodJoke") {
            // uncomment below to test getARandomFoodJoke
            //val result : GetARandomFoodJoke200Response = apiInstance.getARandomFoodJoke()
            //result shouldBe ("TODO")
        }

        // to test getConversationSuggests
        should("test getConversationSuggests") {
            // uncomment below to test getConversationSuggests
            //val query : kotlin.String = tell // kotlin.String | A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
            //val number : java.math.BigDecimal = 5 // java.math.BigDecimal | The number of suggestions to return (between 1 and 25).
            //val result : GetConversationSuggests200Response = apiInstance.getConversationSuggests(query, number)
            //result shouldBe ("TODO")
        }

        // to test getRandomFoodTrivia
        should("test getRandomFoodTrivia") {
            // uncomment below to test getRandomFoodTrivia
            //val result : GetRandomFoodTrivia200Response = apiInstance.getRandomFoodTrivia()
            //result shouldBe ("TODO")
        }

        // to test imageAnalysisByURL
        should("test imageAnalysisByURL") {
            // uncomment below to test imageAnalysisByURL
            //val imageUrl : kotlin.String = https://spoonacular.com/recipeImages/635350-240x150.jpg // kotlin.String | The URL of the image to be analyzed.
            //val result : ImageAnalysisByURL200Response = apiInstance.imageAnalysisByURL(imageUrl)
            //result shouldBe ("TODO")
        }

        // to test imageClassificationByURL
        should("test imageClassificationByURL") {
            // uncomment below to test imageClassificationByURL
            //val imageUrl : kotlin.String = https://spoonacular.com/recipeImages/635350-240x150.jpg // kotlin.String | The URL of the image to be classified.
            //val result : ImageClassificationByURL200Response = apiInstance.imageClassificationByURL(imageUrl)
            //result shouldBe ("TODO")
        }

        // to test searchAllFood
        should("test searchAllFood") {
            // uncomment below to test searchAllFood
            //val query : kotlin.String = apple // kotlin.String | The search query.
            //val offset : kotlin.Int = 56 // kotlin.Int | The number of results to skip (between 0 and 900).
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val result : SearchAllFood200Response = apiInstance.searchAllFood(query, offset, number)
            //result shouldBe ("TODO")
        }

        // to test searchCustomFoods
        should("test searchCustomFoods") {
            // uncomment below to test searchCustomFoods
            //val username : kotlin.String = dsky // kotlin.String | The username.
            //val hash : kotlin.String = 4b5v4398573406 // kotlin.String | The private hash for the username.
            //val query : kotlin.String = burger // kotlin.String | The (natural language) search query.
            //val offset : kotlin.Int = 56 // kotlin.Int | The number of results to skip (between 0 and 900).
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val result : SearchCustomFoods200Response = apiInstance.searchCustomFoods(username, hash, query, offset, number)
            //result shouldBe ("TODO")
        }

        // to test searchFoodVideos
        should("test searchFoodVideos") {
            // uncomment below to test searchFoodVideos
            //val query : kotlin.String = burger // kotlin.String | The (natural language) search query.
            //val type : kotlin.String = main course // kotlin.String | The type of the recipes. See a full list of supported meal types.
            //val cuisine : kotlin.String = italian // kotlin.String | The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
            //val diet : kotlin.String = vegetarian // kotlin.String | The diet for which the recipes must be suitable. See a full list of supported diets.
            //val includeIngredients : kotlin.String = tomato,cheese // kotlin.String | A comma-separated list of ingredients that the recipes should contain.
            //val excludeIngredients : kotlin.String = eggs // kotlin.String | A comma-separated list of ingredients or ingredient types that the recipes must not contain.
            //val minLength : java.math.BigDecimal = 0 // java.math.BigDecimal | Minimum video length in seconds.
            //val maxLength : java.math.BigDecimal = 999 // java.math.BigDecimal | Maximum video length in seconds.
            //val offset : kotlin.Int = 56 // kotlin.Int | The number of results to skip (between 0 and 900).
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val result : SearchFoodVideos200Response = apiInstance.searchFoodVideos(query, type, cuisine, diet, includeIngredients, excludeIngredients, minLength, maxLength, offset, number)
            //result shouldBe ("TODO")
        }

        // to test searchSiteContent
        should("test searchSiteContent") {
            // uncomment below to test searchSiteContent
            //val query : kotlin.String = past // kotlin.String | The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.
            //val result : SearchSiteContent200Response = apiInstance.searchSiteContent(query)
            //result shouldBe ("TODO")
        }

        // to test talkToChatbot
        should("test talkToChatbot") {
            // uncomment below to test talkToChatbot
            //val text : kotlin.String = donut recipes // kotlin.String | The request / question / answer from the user to the chatbot.
            //val contextId : kotlin.String = 342938 // kotlin.String | An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.
            //val result : TalkToChatbot200Response = apiInstance.talkToChatbot(text, contextId)
            //result shouldBe ("TODO")
        }

    }
}
