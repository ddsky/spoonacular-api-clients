=begin
#spoonacular API

#The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.1
Contact: mail@spoonacular.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::WineApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'WineApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::WineApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of WineApi' do
    it 'should create an instance of WineApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::WineApi)
    end
  end

  # unit tests for get_dish_pairing_for_wine
  # Dish Pairing for Wine
  # Find a dish that goes well with a given wine.
  # @param wine The type of wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
  # @param [Hash] opts the optional parameters
  # @return [GetDishPairingForWine200Response]
  describe 'get_dish_pairing_for_wine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_wine_description
  # Wine Description
  # Get a simple description of a certain wine, e.g. \&quot;malbec\&quot;, \&quot;riesling\&quot;, or \&quot;merlot\&quot;.
  # @param wine The name of the wine that should be paired, e.g. \&quot;merlot\&quot;, \&quot;riesling\&quot;, or \&quot;malbec\&quot;.
  # @param [Hash] opts the optional parameters
  # @return [GetWineDescription200Response]
  describe 'get_wine_description test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_wine_pairing
  # Wine Pairing
  # Find a wine that goes well with a food. Food can be a dish name (\&quot;steak\&quot;), an ingredient name (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
  # @param food The food to get a pairing for. This can be a dish (\&quot;steak\&quot;), an ingredient (\&quot;salmon\&quot;), or a cuisine (\&quot;italian\&quot;).
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :max_price The maximum price for the specific wine recommendation in USD.
  # @return [GetWinePairing200Response]
  describe 'get_wine_pairing test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_wine_recommendation
  # Wine Recommendation
  # Get a specific wine recommendation (concrete product) for a given wine type, e.g. \&quot;merlot\&quot;.
  # @param wine The type of wine to get a specific product recommendation for.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :max_price The maximum price for the specific wine recommendation in USD.
  # @option opts [Float] :min_rating The minimum rating of the recommended wine between 0 and 1. For example, 0.8 equals 4 out of 5 stars.
  # @option opts [Float] :number The number of wine recommendations expected (between 1 and 100).
  # @return [GetWineRecommendation200Response]
  describe 'get_wine_recommendation test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
