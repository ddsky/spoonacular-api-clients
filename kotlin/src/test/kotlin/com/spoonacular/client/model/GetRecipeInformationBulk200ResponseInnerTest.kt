/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular.client.model

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.spoonacular.client.model.GetRecipeInformationBulk200ResponseInner
import com.spoonacular.client.model.GetRecipeInformation200ResponseExtendedIngredientsInner
import com.spoonacular.client.model.GetRecipeInformation200ResponseWinePairing

class GetRecipeInformationBulk200ResponseInnerTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of GetRecipeInformationBulk200ResponseInner
        //val modelInstance = GetRecipeInformationBulk200ResponseInner()

        // to test the property `id`
        should("test id") {
            // uncomment below to test the property
            //modelInstance.id shouldBe ("TODO")
        }

        // to test the property `title`
        should("test title") {
            // uncomment below to test the property
            //modelInstance.title shouldBe ("TODO")
        }

        // to test the property `image`
        should("test image") {
            // uncomment below to test the property
            //modelInstance.image shouldBe ("TODO")
        }

        // to test the property `imageType`
        should("test imageType") {
            // uncomment below to test the property
            //modelInstance.imageType shouldBe ("TODO")
        }

        // to test the property `servings`
        should("test servings") {
            // uncomment below to test the property
            //modelInstance.servings shouldBe ("TODO")
        }

        // to test the property `readyInMinutes`
        should("test readyInMinutes") {
            // uncomment below to test the property
            //modelInstance.readyInMinutes shouldBe ("TODO")
        }

        // to test the property `license`
        should("test license") {
            // uncomment below to test the property
            //modelInstance.license shouldBe ("TODO")
        }

        // to test the property `sourceName`
        should("test sourceName") {
            // uncomment below to test the property
            //modelInstance.sourceName shouldBe ("TODO")
        }

        // to test the property `sourceUrl`
        should("test sourceUrl") {
            // uncomment below to test the property
            //modelInstance.sourceUrl shouldBe ("TODO")
        }

        // to test the property `spoonacularSourceUrl`
        should("test spoonacularSourceUrl") {
            // uncomment below to test the property
            //modelInstance.spoonacularSourceUrl shouldBe ("TODO")
        }

        // to test the property `aggregateLikes`
        should("test aggregateLikes") {
            // uncomment below to test the property
            //modelInstance.aggregateLikes shouldBe ("TODO")
        }

        // to test the property `healthScore`
        should("test healthScore") {
            // uncomment below to test the property
            //modelInstance.healthScore shouldBe ("TODO")
        }

        // to test the property `spoonacularScore`
        should("test spoonacularScore") {
            // uncomment below to test the property
            //modelInstance.spoonacularScore shouldBe ("TODO")
        }

        // to test the property `pricePerServing`
        should("test pricePerServing") {
            // uncomment below to test the property
            //modelInstance.pricePerServing shouldBe ("TODO")
        }

        // to test the property `analyzedInstructions`
        should("test analyzedInstructions") {
            // uncomment below to test the property
            //modelInstance.analyzedInstructions shouldBe ("TODO")
        }

        // to test the property `cheap`
        should("test cheap") {
            // uncomment below to test the property
            //modelInstance.cheap shouldBe ("TODO")
        }

        // to test the property `creditsText`
        should("test creditsText") {
            // uncomment below to test the property
            //modelInstance.creditsText shouldBe ("TODO")
        }

        // to test the property `cuisines`
        should("test cuisines") {
            // uncomment below to test the property
            //modelInstance.cuisines shouldBe ("TODO")
        }

        // to test the property `dairyFree`
        should("test dairyFree") {
            // uncomment below to test the property
            //modelInstance.dairyFree shouldBe ("TODO")
        }

        // to test the property `diets`
        should("test diets") {
            // uncomment below to test the property
            //modelInstance.diets shouldBe ("TODO")
        }

        // to test the property `gaps`
        should("test gaps") {
            // uncomment below to test the property
            //modelInstance.gaps shouldBe ("TODO")
        }

        // to test the property `glutenFree`
        should("test glutenFree") {
            // uncomment below to test the property
            //modelInstance.glutenFree shouldBe ("TODO")
        }

        // to test the property `instructions`
        should("test instructions") {
            // uncomment below to test the property
            //modelInstance.instructions shouldBe ("TODO")
        }

        // to test the property `ketogenic`
        should("test ketogenic") {
            // uncomment below to test the property
            //modelInstance.ketogenic shouldBe ("TODO")
        }

        // to test the property `lowFodmap`
        should("test lowFodmap") {
            // uncomment below to test the property
            //modelInstance.lowFodmap shouldBe ("TODO")
        }

        // to test the property `occasions`
        should("test occasions") {
            // uncomment below to test the property
            //modelInstance.occasions shouldBe ("TODO")
        }

        // to test the property `sustainable`
        should("test sustainable") {
            // uncomment below to test the property
            //modelInstance.sustainable shouldBe ("TODO")
        }

        // to test the property `vegan`
        should("test vegan") {
            // uncomment below to test the property
            //modelInstance.vegan shouldBe ("TODO")
        }

        // to test the property `vegetarian`
        should("test vegetarian") {
            // uncomment below to test the property
            //modelInstance.vegetarian shouldBe ("TODO")
        }

        // to test the property `veryHealthy`
        should("test veryHealthy") {
            // uncomment below to test the property
            //modelInstance.veryHealthy shouldBe ("TODO")
        }

        // to test the property `veryPopular`
        should("test veryPopular") {
            // uncomment below to test the property
            //modelInstance.veryPopular shouldBe ("TODO")
        }

        // to test the property `whole30`
        should("test whole30") {
            // uncomment below to test the property
            //modelInstance.whole30 shouldBe ("TODO")
        }

        // to test the property `weightWatcherSmartPoints`
        should("test weightWatcherSmartPoints") {
            // uncomment below to test the property
            //modelInstance.weightWatcherSmartPoints shouldBe ("TODO")
        }

        // to test the property `dishTypes`
        should("test dishTypes") {
            // uncomment below to test the property
            //modelInstance.dishTypes shouldBe ("TODO")
        }

        // to test the property `extendedIngredients`
        should("test extendedIngredients") {
            // uncomment below to test the property
            //modelInstance.extendedIngredients shouldBe ("TODO")
        }

        // to test the property `summary`
        should("test summary") {
            // uncomment below to test the property
            //modelInstance.summary shouldBe ("TODO")
        }

        // to test the property `winePairing`
        should("test winePairing") {
            // uncomment below to test the property
            //modelInstance.winePairing shouldBe ("TODO")
        }

    }
}
