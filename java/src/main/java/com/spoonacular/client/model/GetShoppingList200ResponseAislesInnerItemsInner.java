/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spoonacular.client.model.GetShoppingList200ResponseAislesInnerItemsInnerMeasures;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.spoonacular.client.JSON;

/**
 * GetShoppingList200ResponseAislesInnerItemsInner
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0-SNAPSHOT")
public class GetShoppingList200ResponseAislesInnerItemsInner {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_MEASURES = "measures";
  @SerializedName(SERIALIZED_NAME_MEASURES)
  private GetShoppingList200ResponseAislesInnerItemsInnerMeasures measures;

  public static final String SERIALIZED_NAME_PANTRY_ITEM = "pantryItem";
  @SerializedName(SERIALIZED_NAME_PANTRY_ITEM)
  private Boolean pantryItem;

  public static final String SERIALIZED_NAME_AISLE = "aisle";
  @SerializedName(SERIALIZED_NAME_AISLE)
  private String aisle;

  public static final String SERIALIZED_NAME_COST = "cost";
  @SerializedName(SERIALIZED_NAME_COST)
  private BigDecimal cost;

  public static final String SERIALIZED_NAME_INGREDIENT_ID = "ingredientId";
  @SerializedName(SERIALIZED_NAME_INGREDIENT_ID)
  private Integer ingredientId;

  public GetShoppingList200ResponseAislesInnerItemsInner() {
  }

  public GetShoppingList200ResponseAislesInnerItemsInner id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetShoppingList200ResponseAislesInnerItemsInner name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nonnull
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public GetShoppingList200ResponseAislesInnerItemsInner measures(GetShoppingList200ResponseAislesInnerItemsInnerMeasures measures) {
    this.measures = measures;
    return this;
  }

  /**
   * Get measures
   * @return measures
   */
  @javax.annotation.Nullable
  public GetShoppingList200ResponseAislesInnerItemsInnerMeasures getMeasures() {
    return measures;
  }

  public void setMeasures(GetShoppingList200ResponseAislesInnerItemsInnerMeasures measures) {
    this.measures = measures;
  }


  public GetShoppingList200ResponseAislesInnerItemsInner pantryItem(Boolean pantryItem) {
    this.pantryItem = pantryItem;
    return this;
  }

  /**
   * Get pantryItem
   * @return pantryItem
   */
  @javax.annotation.Nonnull
  public Boolean getPantryItem() {
    return pantryItem;
  }

  public void setPantryItem(Boolean pantryItem) {
    this.pantryItem = pantryItem;
  }


  public GetShoppingList200ResponseAislesInnerItemsInner aisle(String aisle) {
    this.aisle = aisle;
    return this;
  }

  /**
   * Get aisle
   * @return aisle
   */
  @javax.annotation.Nonnull
  public String getAisle() {
    return aisle;
  }

  public void setAisle(String aisle) {
    this.aisle = aisle;
  }


  public GetShoppingList200ResponseAislesInnerItemsInner cost(BigDecimal cost) {
    this.cost = cost;
    return this;
  }

  /**
   * Get cost
   * @return cost
   */
  @javax.annotation.Nonnull
  public BigDecimal getCost() {
    return cost;
  }

  public void setCost(BigDecimal cost) {
    this.cost = cost;
  }


  public GetShoppingList200ResponseAislesInnerItemsInner ingredientId(Integer ingredientId) {
    this.ingredientId = ingredientId;
    return this;
  }

  /**
   * Get ingredientId
   * @return ingredientId
   */
  @javax.annotation.Nonnull
  public Integer getIngredientId() {
    return ingredientId;
  }

  public void setIngredientId(Integer ingredientId) {
    this.ingredientId = ingredientId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetShoppingList200ResponseAislesInnerItemsInner getShoppingList200ResponseAislesInnerItemsInner = (GetShoppingList200ResponseAislesInnerItemsInner) o;
    return Objects.equals(this.id, getShoppingList200ResponseAislesInnerItemsInner.id) &&
        Objects.equals(this.name, getShoppingList200ResponseAislesInnerItemsInner.name) &&
        Objects.equals(this.measures, getShoppingList200ResponseAislesInnerItemsInner.measures) &&
        Objects.equals(this.pantryItem, getShoppingList200ResponseAislesInnerItemsInner.pantryItem) &&
        Objects.equals(this.aisle, getShoppingList200ResponseAislesInnerItemsInner.aisle) &&
        Objects.equals(this.cost, getShoppingList200ResponseAislesInnerItemsInner.cost) &&
        Objects.equals(this.ingredientId, getShoppingList200ResponseAislesInnerItemsInner.ingredientId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, name, measures, pantryItem, aisle, cost, ingredientId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetShoppingList200ResponseAislesInnerItemsInner {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    measures: ").append(toIndentedString(measures)).append("\n");
    sb.append("    pantryItem: ").append(toIndentedString(pantryItem)).append("\n");
    sb.append("    aisle: ").append(toIndentedString(aisle)).append("\n");
    sb.append("    cost: ").append(toIndentedString(cost)).append("\n");
    sb.append("    ingredientId: ").append(toIndentedString(ingredientId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("name");
    openapiFields.add("measures");
    openapiFields.add("pantryItem");
    openapiFields.add("aisle");
    openapiFields.add("cost");
    openapiFields.add("ingredientId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("name");
    openapiRequiredFields.add("pantryItem");
    openapiRequiredFields.add("aisle");
    openapiRequiredFields.add("cost");
    openapiRequiredFields.add("ingredientId");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetShoppingList200ResponseAislesInnerItemsInner
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetShoppingList200ResponseAislesInnerItemsInner.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetShoppingList200ResponseAislesInnerItemsInner is not found in the empty JSON string", GetShoppingList200ResponseAislesInnerItemsInner.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetShoppingList200ResponseAislesInnerItemsInner.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetShoppingList200ResponseAislesInnerItemsInner` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetShoppingList200ResponseAislesInnerItemsInner.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      // validate the optional field `measures`
      if (jsonObj.get("measures") != null && !jsonObj.get("measures").isJsonNull()) {
        GetShoppingList200ResponseAislesInnerItemsInnerMeasures.validateJsonElement(jsonObj.get("measures"));
      }
      if (!jsonObj.get("aisle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `aisle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("aisle").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetShoppingList200ResponseAislesInnerItemsInner.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetShoppingList200ResponseAislesInnerItemsInner' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetShoppingList200ResponseAislesInnerItemsInner> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetShoppingList200ResponseAislesInnerItemsInner.class));

       return (TypeAdapter<T>) new TypeAdapter<GetShoppingList200ResponseAislesInnerItemsInner>() {
           @Override
           public void write(JsonWriter out, GetShoppingList200ResponseAislesInnerItemsInner value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetShoppingList200ResponseAislesInnerItemsInner read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetShoppingList200ResponseAislesInnerItemsInner given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetShoppingList200ResponseAislesInnerItemsInner
   * @throws IOException if the JSON string is invalid with respect to GetShoppingList200ResponseAislesInnerItemsInner
   */
  public static GetShoppingList200ResponseAislesInnerItemsInner fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetShoppingList200ResponseAislesInnerItemsInner.class);
  }

  /**
   * Convert an instance of GetShoppingList200ResponseAislesInnerItemsInner to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

