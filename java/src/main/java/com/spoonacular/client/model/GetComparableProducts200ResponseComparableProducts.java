/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spoonacular.client.model.GetComparableProducts200ResponseComparableProductsProteinInner;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.spoonacular.client.JSON;

/**
 * GetComparableProducts200ResponseComparableProducts
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0-SNAPSHOT")
public class GetComparableProducts200ResponseComparableProducts {
  public static final String SERIALIZED_NAME_CALORIES = "calories";
  @SerializedName(SERIALIZED_NAME_CALORIES)
  private List<Object> calories = new ArrayList<>();

  public static final String SERIALIZED_NAME_LIKES = "likes";
  @SerializedName(SERIALIZED_NAME_LIKES)
  private List<Object> likes = new ArrayList<>();

  public static final String SERIALIZED_NAME_PRICE = "price";
  @SerializedName(SERIALIZED_NAME_PRICE)
  private List<Object> price = new ArrayList<>();

  public static final String SERIALIZED_NAME_PROTEIN = "protein";
  @SerializedName(SERIALIZED_NAME_PROTEIN)
  private Set<GetComparableProducts200ResponseComparableProductsProteinInner> protein = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SPOONACULAR_SCORE = "spoonacularScore";
  @SerializedName(SERIALIZED_NAME_SPOONACULAR_SCORE)
  private Set<GetComparableProducts200ResponseComparableProductsProteinInner> spoonacularScore = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SUGAR = "sugar";
  @SerializedName(SERIALIZED_NAME_SUGAR)
  private List<Object> sugar = new ArrayList<>();

  public GetComparableProducts200ResponseComparableProducts() {
  }

  public GetComparableProducts200ResponseComparableProducts calories(List<Object> calories) {
    this.calories = calories;
    return this;
  }

  public GetComparableProducts200ResponseComparableProducts addCaloriesItem(Object caloriesItem) {
    if (this.calories == null) {
      this.calories = new ArrayList<>();
    }
    this.calories.add(caloriesItem);
    return this;
  }

  /**
   * Get calories
   * @return calories
   */
  @javax.annotation.Nonnull
  public List<Object> getCalories() {
    return calories;
  }

  public void setCalories(List<Object> calories) {
    this.calories = calories;
  }


  public GetComparableProducts200ResponseComparableProducts likes(List<Object> likes) {
    this.likes = likes;
    return this;
  }

  public GetComparableProducts200ResponseComparableProducts addLikesItem(Object likesItem) {
    if (this.likes == null) {
      this.likes = new ArrayList<>();
    }
    this.likes.add(likesItem);
    return this;
  }

  /**
   * Get likes
   * @return likes
   */
  @javax.annotation.Nonnull
  public List<Object> getLikes() {
    return likes;
  }

  public void setLikes(List<Object> likes) {
    this.likes = likes;
  }


  public GetComparableProducts200ResponseComparableProducts price(List<Object> price) {
    this.price = price;
    return this;
  }

  public GetComparableProducts200ResponseComparableProducts addPriceItem(Object priceItem) {
    if (this.price == null) {
      this.price = new ArrayList<>();
    }
    this.price.add(priceItem);
    return this;
  }

  /**
   * Get price
   * @return price
   */
  @javax.annotation.Nonnull
  public List<Object> getPrice() {
    return price;
  }

  public void setPrice(List<Object> price) {
    this.price = price;
  }


  public GetComparableProducts200ResponseComparableProducts protein(Set<GetComparableProducts200ResponseComparableProductsProteinInner> protein) {
    this.protein = protein;
    return this;
  }

  public GetComparableProducts200ResponseComparableProducts addProteinItem(GetComparableProducts200ResponseComparableProductsProteinInner proteinItem) {
    if (this.protein == null) {
      this.protein = new LinkedHashSet<>();
    }
    this.protein.add(proteinItem);
    return this;
  }

  /**
   * Get protein
   * @return protein
   */
  @javax.annotation.Nonnull
  public Set<GetComparableProducts200ResponseComparableProductsProteinInner> getProtein() {
    return protein;
  }

  public void setProtein(Set<GetComparableProducts200ResponseComparableProductsProteinInner> protein) {
    this.protein = protein;
  }


  public GetComparableProducts200ResponseComparableProducts spoonacularScore(Set<GetComparableProducts200ResponseComparableProductsProteinInner> spoonacularScore) {
    this.spoonacularScore = spoonacularScore;
    return this;
  }

  public GetComparableProducts200ResponseComparableProducts addSpoonacularScoreItem(GetComparableProducts200ResponseComparableProductsProteinInner spoonacularScoreItem) {
    if (this.spoonacularScore == null) {
      this.spoonacularScore = new LinkedHashSet<>();
    }
    this.spoonacularScore.add(spoonacularScoreItem);
    return this;
  }

  /**
   * Get spoonacularScore
   * @return spoonacularScore
   */
  @javax.annotation.Nonnull
  public Set<GetComparableProducts200ResponseComparableProductsProteinInner> getSpoonacularScore() {
    return spoonacularScore;
  }

  public void setSpoonacularScore(Set<GetComparableProducts200ResponseComparableProductsProteinInner> spoonacularScore) {
    this.spoonacularScore = spoonacularScore;
  }


  public GetComparableProducts200ResponseComparableProducts sugar(List<Object> sugar) {
    this.sugar = sugar;
    return this;
  }

  public GetComparableProducts200ResponseComparableProducts addSugarItem(Object sugarItem) {
    if (this.sugar == null) {
      this.sugar = new ArrayList<>();
    }
    this.sugar.add(sugarItem);
    return this;
  }

  /**
   * Get sugar
   * @return sugar
   */
  @javax.annotation.Nonnull
  public List<Object> getSugar() {
    return sugar;
  }

  public void setSugar(List<Object> sugar) {
    this.sugar = sugar;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetComparableProducts200ResponseComparableProducts getComparableProducts200ResponseComparableProducts = (GetComparableProducts200ResponseComparableProducts) o;
    return Objects.equals(this.calories, getComparableProducts200ResponseComparableProducts.calories) &&
        Objects.equals(this.likes, getComparableProducts200ResponseComparableProducts.likes) &&
        Objects.equals(this.price, getComparableProducts200ResponseComparableProducts.price) &&
        Objects.equals(this.protein, getComparableProducts200ResponseComparableProducts.protein) &&
        Objects.equals(this.spoonacularScore, getComparableProducts200ResponseComparableProducts.spoonacularScore) &&
        Objects.equals(this.sugar, getComparableProducts200ResponseComparableProducts.sugar);
  }

  @Override
  public int hashCode() {
    return Objects.hash(calories, likes, price, protein, spoonacularScore, sugar);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetComparableProducts200ResponseComparableProducts {\n");
    sb.append("    calories: ").append(toIndentedString(calories)).append("\n");
    sb.append("    likes: ").append(toIndentedString(likes)).append("\n");
    sb.append("    price: ").append(toIndentedString(price)).append("\n");
    sb.append("    protein: ").append(toIndentedString(protein)).append("\n");
    sb.append("    spoonacularScore: ").append(toIndentedString(spoonacularScore)).append("\n");
    sb.append("    sugar: ").append(toIndentedString(sugar)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("calories");
    openapiFields.add("likes");
    openapiFields.add("price");
    openapiFields.add("protein");
    openapiFields.add("spoonacularScore");
    openapiFields.add("sugar");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("calories");
    openapiRequiredFields.add("likes");
    openapiRequiredFields.add("price");
    openapiRequiredFields.add("protein");
    openapiRequiredFields.add("spoonacularScore");
    openapiRequiredFields.add("sugar");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to GetComparableProducts200ResponseComparableProducts
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetComparableProducts200ResponseComparableProducts.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetComparableProducts200ResponseComparableProducts is not found in the empty JSON string", GetComparableProducts200ResponseComparableProducts.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetComparableProducts200ResponseComparableProducts.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetComparableProducts200ResponseComparableProducts` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetComparableProducts200ResponseComparableProducts.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      // ensure the required json array is present
      if (jsonObj.get("calories") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("calories").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `calories` to be an array in the JSON string but got `%s`", jsonObj.get("calories").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("likes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("likes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `likes` to be an array in the JSON string but got `%s`", jsonObj.get("likes").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("price") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("price").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `price` to be an array in the JSON string but got `%s`", jsonObj.get("price").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("protein").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `protein` to be an array in the JSON string but got `%s`", jsonObj.get("protein").toString()));
      }

      JsonArray jsonArrayprotein = jsonObj.getAsJsonArray("protein");
      // validate the required field `protein` (array)
      for (int i = 0; i < jsonArrayprotein.size(); i++) {
        GetComparableProducts200ResponseComparableProductsProteinInner.validateJsonElement(jsonArrayprotein.get(i));
      };
      // ensure the json data is an array
      if (!jsonObj.get("spoonacularScore").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `spoonacularScore` to be an array in the JSON string but got `%s`", jsonObj.get("spoonacularScore").toString()));
      }

      JsonArray jsonArrayspoonacularScore = jsonObj.getAsJsonArray("spoonacularScore");
      // validate the required field `spoonacularScore` (array)
      for (int i = 0; i < jsonArrayspoonacularScore.size(); i++) {
        GetComparableProducts200ResponseComparableProductsProteinInner.validateJsonElement(jsonArrayspoonacularScore.get(i));
      };
      // ensure the required json array is present
      if (jsonObj.get("sugar") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("sugar").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `sugar` to be an array in the JSON string but got `%s`", jsonObj.get("sugar").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetComparableProducts200ResponseComparableProducts.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetComparableProducts200ResponseComparableProducts' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetComparableProducts200ResponseComparableProducts> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetComparableProducts200ResponseComparableProducts.class));

       return (TypeAdapter<T>) new TypeAdapter<GetComparableProducts200ResponseComparableProducts>() {
           @Override
           public void write(JsonWriter out, GetComparableProducts200ResponseComparableProducts value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetComparableProducts200ResponseComparableProducts read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of GetComparableProducts200ResponseComparableProducts given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of GetComparableProducts200ResponseComparableProducts
   * @throws IOException if the JSON string is invalid with respect to GetComparableProducts200ResponseComparableProducts
   */
  public static GetComparableProducts200ResponseComparableProducts fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetComparableProducts200ResponseComparableProducts.class);
  }

  /**
   * Convert an instance of GetComparableProducts200ResponseComparableProducts to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

