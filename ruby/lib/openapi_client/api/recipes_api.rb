=begin
#spoonacular API

#The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.1
Contact: mail@spoonacular.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class RecipesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Analyze a Recipe Search Query
    # Parse a recipe search query to find out its intention.
    # @param q [String] The recipe search query.
    # @param [Hash] opts the optional parameters
    # @return [AnalyzeARecipeSearchQuery200Response]
    def analyze_a_recipe_search_query(q, opts = {})
      data, _status_code, _headers = analyze_a_recipe_search_query_with_http_info(q, opts)
      data
    end

    # Analyze a Recipe Search Query
    # Parse a recipe search query to find out its intention.
    # @param q [String] The recipe search query.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyzeARecipeSearchQuery200Response, Integer, Hash)>] AnalyzeARecipeSearchQuery200Response data, response status code and response headers
    def analyze_a_recipe_search_query_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.analyze_a_recipe_search_query ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling RecipesApi.analyze_a_recipe_search_query"
      end
      # resource path
      local_var_path = '/recipes/queries/analyze'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnalyzeARecipeSearchQuery200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.analyze_a_recipe_search_query",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#analyze_a_recipe_search_query\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Analyze Recipe Instructions
    # This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.
    # @param instructions [String] The recipe&#39;s instructions.
    # @param [Hash] opts the optional parameters
    # @return [AnalyzeRecipeInstructions200Response]
    def analyze_recipe_instructions(instructions, opts = {})
      data, _status_code, _headers = analyze_recipe_instructions_with_http_info(instructions, opts)
      data
    end

    # Analyze Recipe Instructions
    # This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
    # @param instructions [String] The recipe&#39;s instructions.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AnalyzeRecipeInstructions200Response, Integer, Hash)>] AnalyzeRecipeInstructions200Response data, response status code and response headers
    def analyze_recipe_instructions_with_http_info(instructions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.analyze_recipe_instructions ...'
      end
      # verify the required parameter 'instructions' is set
      if @api_client.config.client_side_validation && instructions.nil?
        fail ArgumentError, "Missing the required parameter 'instructions' when calling RecipesApi.analyze_recipe_instructions"
      end
      # resource path
      local_var_path = '/recipes/analyzeInstructions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['instructions'] = instructions

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AnalyzeRecipeInstructions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.analyze_recipe_instructions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#analyze_recipe_instructions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Autocomplete Recipe Search
    # Autocomplete a partial input to suggest possible recipe names.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The (natural language) search query.
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @return [Array<AutocompleteRecipeSearch200ResponseInner>]
    def autocomplete_recipe_search(opts = {})
      data, _status_code, _headers = autocomplete_recipe_search_with_http_info(opts)
      data
    end

    # Autocomplete Recipe Search
    # Autocomplete a partial input to suggest possible recipe names.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The (natural language) search query.
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @return [Array<(Array<AutocompleteRecipeSearch200ResponseInner>, Integer, Hash)>] Array<AutocompleteRecipeSearch200ResponseInner> data, response status code and response headers
    def autocomplete_recipe_search_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.autocomplete_recipe_search ...'
      end
      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.autocomplete_recipe_search, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.autocomplete_recipe_search, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recipes/autocomplete'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AutocompleteRecipeSearch200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.autocomplete_recipe_search",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#autocomplete_recipe_search\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Classify Cuisine
    # Classify the recipe's cuisine.
    # @param title [String] The title of the recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @return [ClassifyCuisine200Response]
    def classify_cuisine(title, ingredient_list, opts = {})
      data, _status_code, _headers = classify_cuisine_with_http_info(title, ingredient_list, opts)
      data
    end

    # Classify Cuisine
    # Classify the recipe&#39;s cuisine.
    # @param title [String] The title of the recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @return [Array<(ClassifyCuisine200Response, Integer, Hash)>] ClassifyCuisine200Response data, response status code and response headers
    def classify_cuisine_with_http_info(title, ingredient_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.classify_cuisine ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling RecipesApi.classify_cuisine"
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling RecipesApi.classify_cuisine"
      end
      allowable_values = ["en", "de"]
      if @api_client.config.client_side_validation && opts[:'language'] && !allowable_values.include?(opts[:'language'])
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/recipes/cuisine'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['title'] = title
      form_params['ingredientList'] = ingredient_list

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ClassifyCuisine200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.classify_cuisine",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#classify_cuisine\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Compute Glycemic Load
    # Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
    # @param compute_glycemic_load_request [ComputeGlycemicLoadRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @return [ComputeGlycemicLoad200Response]
    def compute_glycemic_load(compute_glycemic_load_request, opts = {})
      data, _status_code, _headers = compute_glycemic_load_with_http_info(compute_glycemic_load_request, opts)
      data
    end

    # Compute Glycemic Load
    # Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
    # @param compute_glycemic_load_request [ComputeGlycemicLoadRequest] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @return [Array<(ComputeGlycemicLoad200Response, Integer, Hash)>] ComputeGlycemicLoad200Response data, response status code and response headers
    def compute_glycemic_load_with_http_info(compute_glycemic_load_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.compute_glycemic_load ...'
      end
      # verify the required parameter 'compute_glycemic_load_request' is set
      if @api_client.config.client_side_validation && compute_glycemic_load_request.nil?
        fail ArgumentError, "Missing the required parameter 'compute_glycemic_load_request' when calling RecipesApi.compute_glycemic_load"
      end
      allowable_values = ["en", "de"]
      if @api_client.config.client_side_validation && opts[:'language'] && !allowable_values.include?(opts[:'language'])
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/food/ingredients/glycemicLoad'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(compute_glycemic_load_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ComputeGlycemicLoad200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.compute_glycemic_load",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#compute_glycemic_load\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Convert Amounts
    # Convert amounts like \"2 cups of flour to grams\".
    # @param ingredient_name [String] The ingredient which you want to convert.
    # @param source_amount [Float] The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
    # @param source_unit [String] The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
    # @param target_unit [String] The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
    # @param [Hash] opts the optional parameters
    # @return [ConvertAmounts200Response]
    def convert_amounts(ingredient_name, source_amount, source_unit, target_unit, opts = {})
      data, _status_code, _headers = convert_amounts_with_http_info(ingredient_name, source_amount, source_unit, target_unit, opts)
      data
    end

    # Convert Amounts
    # Convert amounts like \&quot;2 cups of flour to grams\&quot;.
    # @param ingredient_name [String] The ingredient which you want to convert.
    # @param source_amount [Float] The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
    # @param source_unit [String] The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
    # @param target_unit [String] The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConvertAmounts200Response, Integer, Hash)>] ConvertAmounts200Response data, response status code and response headers
    def convert_amounts_with_http_info(ingredient_name, source_amount, source_unit, target_unit, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.convert_amounts ...'
      end
      # verify the required parameter 'ingredient_name' is set
      if @api_client.config.client_side_validation && ingredient_name.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_name' when calling RecipesApi.convert_amounts"
      end
      # verify the required parameter 'source_amount' is set
      if @api_client.config.client_side_validation && source_amount.nil?
        fail ArgumentError, "Missing the required parameter 'source_amount' when calling RecipesApi.convert_amounts"
      end
      # verify the required parameter 'source_unit' is set
      if @api_client.config.client_side_validation && source_unit.nil?
        fail ArgumentError, "Missing the required parameter 'source_unit' when calling RecipesApi.convert_amounts"
      end
      # verify the required parameter 'target_unit' is set
      if @api_client.config.client_side_validation && target_unit.nil?
        fail ArgumentError, "Missing the required parameter 'target_unit' when calling RecipesApi.convert_amounts"
      end
      # resource path
      local_var_path = '/recipes/convert'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingredientName'] = ingredient_name
      query_params[:'sourceAmount'] = source_amount
      query_params[:'sourceUnit'] = source_unit
      query_params[:'targetUnit'] = target_unit

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'ConvertAmounts200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.convert_amounts",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#convert_amounts\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Create Recipe Card
    # Generate a recipe card for a recipe.
    # @param title [String] The title of the recipe.
    # @param ingredients [String] The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
    # @param instructions [String] The instructions to make the recipe. One step per line (separate lines with \\\\n).
    # @param ready_in_minutes [Float] The number of minutes it takes to get the recipe on the table.
    # @param servings [Float] The number of servings the recipe makes.
    # @param mask [String] The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).
    # @param background_image [String] The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The binary image of the recipe as jpg.
    # @option opts [String] :image_url If you do not sent a binary image you can also pass the image URL.
    # @option opts [String] :author The author of the recipe.
    # @option opts [String] :background_color The background color for the recipe card as a hex-string.
    # @option opts [String] :font_color The font color for the recipe card as a hex-string.
    # @option opts [String] :source The source of the recipe.
    # @return [CreateRecipeCard200Response]
    def create_recipe_card(title, ingredients, instructions, ready_in_minutes, servings, mask, background_image, opts = {})
      data, _status_code, _headers = create_recipe_card_with_http_info(title, ingredients, instructions, ready_in_minutes, servings, mask, background_image, opts)
      data
    end

    # Create Recipe Card
    # Generate a recipe card for a recipe.
    # @param title [String] The title of the recipe.
    # @param ingredients [String] The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
    # @param instructions [String] The instructions to make the recipe. One step per line (separate lines with \\\\n).
    # @param ready_in_minutes [Float] The number of minutes it takes to get the recipe on the table.
    # @param servings [Float] The number of servings the recipe makes.
    # @param mask [String] The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).
    # @param background_image [String] The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).
    # @param [Hash] opts the optional parameters
    # @option opts [File] :image The binary image of the recipe as jpg.
    # @option opts [String] :image_url If you do not sent a binary image you can also pass the image URL.
    # @option opts [String] :author The author of the recipe.
    # @option opts [String] :background_color The background color for the recipe card as a hex-string.
    # @option opts [String] :font_color The font color for the recipe card as a hex-string.
    # @option opts [String] :source The source of the recipe.
    # @return [Array<(CreateRecipeCard200Response, Integer, Hash)>] CreateRecipeCard200Response data, response status code and response headers
    def create_recipe_card_with_http_info(title, ingredients, instructions, ready_in_minutes, servings, mask, background_image, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.create_recipe_card ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling RecipesApi.create_recipe_card"
      end
      # verify the required parameter 'ingredients' is set
      if @api_client.config.client_side_validation && ingredients.nil?
        fail ArgumentError, "Missing the required parameter 'ingredients' when calling RecipesApi.create_recipe_card"
      end
      # verify the required parameter 'instructions' is set
      if @api_client.config.client_side_validation && instructions.nil?
        fail ArgumentError, "Missing the required parameter 'instructions' when calling RecipesApi.create_recipe_card"
      end
      # verify the required parameter 'ready_in_minutes' is set
      if @api_client.config.client_side_validation && ready_in_minutes.nil?
        fail ArgumentError, "Missing the required parameter 'ready_in_minutes' when calling RecipesApi.create_recipe_card"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling RecipesApi.create_recipe_card"
      end
      # verify the required parameter 'mask' is set
      if @api_client.config.client_side_validation && mask.nil?
        fail ArgumentError, "Missing the required parameter 'mask' when calling RecipesApi.create_recipe_card"
      end
      # verify enum value
      allowable_values = ["ellipseMask", "diamondMask", "starMask", "heartMask", "potMask", "fishMask"]
      if @api_client.config.client_side_validation && !allowable_values.include?(mask)
        fail ArgumentError, "invalid value for \"mask\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'background_image' is set
      if @api_client.config.client_side_validation && background_image.nil?
        fail ArgumentError, "Missing the required parameter 'background_image' when calling RecipesApi.create_recipe_card"
      end
      # verify enum value
      allowable_values = ["none", "background1", "background2"]
      if @api_client.config.client_side_validation && !allowable_values.include?(background_image)
        fail ArgumentError, "invalid value for \"background_image\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/recipes/visualizeRecipe'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['multipart/form-data'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['title'] = title
      form_params['ingredients'] = ingredients
      form_params['instructions'] = instructions
      form_params['readyInMinutes'] = ready_in_minutes
      form_params['servings'] = servings
      form_params['mask'] = mask
      form_params['backgroundImage'] = background_image
      form_params['image'] = opts[:'image'] if !opts[:'image'].nil?
      form_params['imageUrl'] = opts[:'image_url'] if !opts[:'image_url'].nil?
      form_params['author'] = opts[:'author'] if !opts[:'author'].nil?
      form_params['backgroundColor'] = opts[:'background_color'] if !opts[:'background_color'].nil?
      form_params['fontColor'] = opts[:'font_color'] if !opts[:'font_color'].nil?
      form_params['source'] = opts[:'source'] if !opts[:'source'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'CreateRecipeCard200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.create_recipe_card",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#create_recipe_card\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Equipment by ID Image
    # Visualize a recipe's equipment list as an image.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def equipment_by_id_image(id, opts = {})
      data, _status_code, _headers = equipment_by_id_image_with_http_info(id, opts)
      data
    end

    # Equipment by ID Image
    # Visualize a recipe&#39;s equipment list as an image.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def equipment_by_id_image_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.equipment_by_id_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.equipment_by_id_image"
      end
      # resource path
      local_var_path = '/recipes/{id}/equipmentWidget.png'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.equipment_by_id_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#equipment_by_id_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Extract Recipe from Website
    # This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
    # @param url [String] The URL of the recipe page.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force_extraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
    # @option opts [Boolean] :analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (default to false)
    # @option opts [Boolean] :include_taste Whether taste data should be added to correctly parsed ingredients. (default to false)
    # @return [GetRecipeInformation200Response]
    def extract_recipe_from_website(url, opts = {})
      data, _status_code, _headers = extract_recipe_from_website_with_http_info(url, opts)
      data
    end

    # Extract Recipe from Website
    # This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
    # @param url [String] The URL of the recipe page.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :force_extraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
    # @option opts [Boolean] :analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (default to false)
    # @option opts [Boolean] :include_taste Whether taste data should be added to correctly parsed ingredients. (default to false)
    # @return [Array<(GetRecipeInformation200Response, Integer, Hash)>] GetRecipeInformation200Response data, response status code and response headers
    def extract_recipe_from_website_with_http_info(url, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.extract_recipe_from_website ...'
      end
      # verify the required parameter 'url' is set
      if @api_client.config.client_side_validation && url.nil?
        fail ArgumentError, "Missing the required parameter 'url' when calling RecipesApi.extract_recipe_from_website"
      end
      # resource path
      local_var_path = '/recipes/extract'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'url'] = url
      query_params[:'forceExtraction'] = opts[:'force_extraction'] if !opts[:'force_extraction'].nil?
      query_params[:'analyze'] = opts[:'analyze'] if !opts[:'analyze'].nil?
      query_params[:'includeNutrition'] = opts[:'include_nutrition'] if !opts[:'include_nutrition'].nil?
      query_params[:'includeTaste'] = opts[:'include_taste'] if !opts[:'include_taste'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecipeInformation200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.extract_recipe_from_website",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#extract_recipe_from_website\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Analyzed Recipe Instructions
    # Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :step_breakdown Whether to break down the recipe steps even more.
    # @return [GetAnalyzedRecipeInstructions200Response]
    def get_analyzed_recipe_instructions(id, opts = {})
      data, _status_code, _headers = get_analyzed_recipe_instructions_with_http_info(id, opts)
      data
    end

    # Get Analyzed Recipe Instructions
    # Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :step_breakdown Whether to break down the recipe steps even more.
    # @return [Array<(GetAnalyzedRecipeInstructions200Response, Integer, Hash)>] GetAnalyzedRecipeInstructions200Response data, response status code and response headers
    def get_analyzed_recipe_instructions_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_analyzed_recipe_instructions ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.get_analyzed_recipe_instructions"
      end
      # resource path
      local_var_path = '/recipes/{id}/analyzedInstructions'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'stepBreakdown'] = opts[:'step_breakdown'] if !opts[:'step_breakdown'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAnalyzedRecipeInstructions200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_analyzed_recipe_instructions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_analyzed_recipe_instructions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Random Recipes
    # Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (default to false)
    # @option opts [String] :include_tags A comma-separated list of tags that the random recipe(s) must adhere to.
    # @option opts [String] :exclude_tags A comma-separated list of tags that the random recipe(s) must not adhere to.
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @return [GetRandomRecipes200Response]
    def get_random_recipes(opts = {})
      data, _status_code, _headers = get_random_recipes_with_http_info(opts)
      data
    end

    # Get Random Recipes
    # Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (default to false)
    # @option opts [String] :include_tags A comma-separated list of tags that the random recipe(s) must adhere to.
    # @option opts [String] :exclude_tags A comma-separated list of tags that the random recipe(s) must not adhere to.
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @return [Array<(GetRandomRecipes200Response, Integer, Hash)>] GetRandomRecipes200Response data, response status code and response headers
    def get_random_recipes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_random_recipes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.get_random_recipes, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.get_random_recipes, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recipes/random'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?
      query_params[:'includeNutrition'] = opts[:'include_nutrition'] if !opts[:'include_nutrition'].nil?
      query_params[:'include-tags'] = opts[:'include_tags'] if !opts[:'include_tags'].nil?
      query_params[:'exclude-tags'] = opts[:'exclude_tags'] if !opts[:'exclude_tags'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRandomRecipes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_random_recipes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_random_recipes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Equipment by ID
    # Get a recipe's equipment list.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [GetRecipeEquipmentByID200Response]
    def get_recipe_equipment_by_id(id, opts = {})
      data, _status_code, _headers = get_recipe_equipment_by_id_with_http_info(id, opts)
      data
    end

    # Equipment by ID
    # Get a recipe&#39;s equipment list.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRecipeEquipmentByID200Response, Integer, Hash)>] GetRecipeEquipmentByID200Response data, response status code and response headers
    def get_recipe_equipment_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_recipe_equipment_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.get_recipe_equipment_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/equipmentWidget.json'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecipeEquipmentByID200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_recipe_equipment_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_recipe_equipment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recipe Information
    # Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (default to false)
    # @return [GetRecipeInformation200Response]
    def get_recipe_information(id, opts = {})
      data, _status_code, _headers = get_recipe_information_with_http_info(id, opts)
      data
    end

    # Get Recipe Information
    # Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (default to false)
    # @return [Array<(GetRecipeInformation200Response, Integer, Hash)>] GetRecipeInformation200Response data, response status code and response headers
    def get_recipe_information_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_recipe_information ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.get_recipe_information"
      end
      # resource path
      local_var_path = '/recipes/{id}/information'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'includeNutrition'] = opts[:'include_nutrition'] if !opts[:'include_nutrition'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecipeInformation200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_recipe_information",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_recipe_information\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Recipe Information Bulk
    # Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
    # @param ids [String] A comma-separated list of recipe ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (default to false)
    # @return [Array<GetRecipeInformationBulk200ResponseInner>]
    def get_recipe_information_bulk(ids, opts = {})
      data, _status_code, _headers = get_recipe_information_bulk_with_http_info(ids, opts)
      data
    end

    # Get Recipe Information Bulk
    # Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
    # @param ids [String] A comma-separated list of recipe ids.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings. (default to false)
    # @return [Array<(Array<GetRecipeInformationBulk200ResponseInner>, Integer, Hash)>] Array<GetRecipeInformationBulk200ResponseInner> data, response status code and response headers
    def get_recipe_information_bulk_with_http_info(ids, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_recipe_information_bulk ...'
      end
      # verify the required parameter 'ids' is set
      if @api_client.config.client_side_validation && ids.nil?
        fail ArgumentError, "Missing the required parameter 'ids' when calling RecipesApi.get_recipe_information_bulk"
      end
      # resource path
      local_var_path = '/recipes/informationBulk'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ids'] = ids
      query_params[:'includeNutrition'] = opts[:'include_nutrition'] if !opts[:'include_nutrition'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetRecipeInformationBulk200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_recipe_information_bulk",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_recipe_information_bulk\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ingredients by ID
    # Get a recipe's ingredient list.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [GetRecipeIngredientsByID200Response]
    def get_recipe_ingredients_by_id(id, opts = {})
      data, _status_code, _headers = get_recipe_ingredients_by_id_with_http_info(id, opts)
      data
    end

    # Ingredients by ID
    # Get a recipe&#39;s ingredient list.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRecipeIngredientsByID200Response, Integer, Hash)>] GetRecipeIngredientsByID200Response data, response status code and response headers
    def get_recipe_ingredients_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_recipe_ingredients_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.get_recipe_ingredients_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/ingredientWidget.json'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecipeIngredientsByID200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_recipe_ingredients_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_recipe_ingredients_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Nutrition by ID
    # Get a recipe's nutrition data.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [GetRecipeNutritionWidgetByID200Response]
    def get_recipe_nutrition_widget_by_id(id, opts = {})
      data, _status_code, _headers = get_recipe_nutrition_widget_by_id_with_http_info(id, opts)
      data
    end

    # Nutrition by ID
    # Get a recipe&#39;s nutrition data.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRecipeNutritionWidgetByID200Response, Integer, Hash)>] GetRecipeNutritionWidgetByID200Response data, response status code and response headers
    def get_recipe_nutrition_widget_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_recipe_nutrition_widget_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.get_recipe_nutrition_widget_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/nutritionWidget.json'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecipeNutritionWidgetByID200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_recipe_nutrition_widget_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_recipe_nutrition_widget_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Price Breakdown by ID
    # Get a recipe's price breakdown data.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [GetRecipePriceBreakdownByID200Response]
    def get_recipe_price_breakdown_by_id(id, opts = {})
      data, _status_code, _headers = get_recipe_price_breakdown_by_id_with_http_info(id, opts)
      data
    end

    # Price Breakdown by ID
    # Get a recipe&#39;s price breakdown data.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRecipePriceBreakdownByID200Response, Integer, Hash)>] GetRecipePriceBreakdownByID200Response data, response status code and response headers
    def get_recipe_price_breakdown_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_recipe_price_breakdown_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.get_recipe_price_breakdown_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/priceBreakdownWidget.json'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecipePriceBreakdownByID200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_recipe_price_breakdown_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_recipe_price_breakdown_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Taste by ID
    # Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :normalize Normalize to the strongest taste. (default to true)
    # @return [GetRecipeTasteByID200Response]
    def get_recipe_taste_by_id(id, opts = {})
      data, _status_code, _headers = get_recipe_taste_by_id_with_http_info(id, opts)
      data
    end

    # Taste by ID
    # Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :normalize Normalize to the strongest taste. (default to true)
    # @return [Array<(GetRecipeTasteByID200Response, Integer, Hash)>] GetRecipeTasteByID200Response data, response status code and response headers
    def get_recipe_taste_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_recipe_taste_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.get_recipe_taste_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/tasteWidget.json'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'normalize'] = opts[:'normalize'] if !opts[:'normalize'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRecipeTasteByID200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_recipe_taste_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_recipe_taste_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Similar Recipes
    # Find recipes which are similar to the given one.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @return [Array<GetSimilarRecipes200ResponseInner>]
    def get_similar_recipes(id, opts = {})
      data, _status_code, _headers = get_similar_recipes_with_http_info(id, opts)
      data
    end

    # Get Similar Recipes
    # Find recipes which are similar to the given one.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @return [Array<(Array<GetSimilarRecipes200ResponseInner>, Integer, Hash)>] Array<GetSimilarRecipes200ResponseInner> data, response status code and response headers
    def get_similar_recipes_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.get_similar_recipes ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.get_similar_recipes"
      end
      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.get_similar_recipes, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.get_similar_recipes, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recipes/{id}/similar'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetSimilarRecipes200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.get_similar_recipes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#get_similar_recipes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Guess Nutrition by Dish Name
    # Estimate the macronutrients of a dish based on its title.
    # @param title [String] The title of the dish.
    # @param [Hash] opts the optional parameters
    # @return [GuessNutritionByDishName200Response]
    def guess_nutrition_by_dish_name(title, opts = {})
      data, _status_code, _headers = guess_nutrition_by_dish_name_with_http_info(title, opts)
      data
    end

    # Guess Nutrition by Dish Name
    # Estimate the macronutrients of a dish based on its title.
    # @param title [String] The title of the dish.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GuessNutritionByDishName200Response, Integer, Hash)>] GuessNutritionByDishName200Response data, response status code and response headers
    def guess_nutrition_by_dish_name_with_http_info(title, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.guess_nutrition_by_dish_name ...'
      end
      # verify the required parameter 'title' is set
      if @api_client.config.client_side_validation && title.nil?
        fail ArgumentError, "Missing the required parameter 'title' when calling RecipesApi.guess_nutrition_by_dish_name"
      end
      # resource path
      local_var_path = '/recipes/guessNutrition'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'title'] = title

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GuessNutritionByDishName200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.guess_nutrition_by_dish_name",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#guess_nutrition_by_dish_name\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Parse Ingredients
    # Extract an ingredient from plain text.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings that you can make from the ingredients.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @option opts [Boolean] :include_nutrition 
    # @return [Array<ParseIngredients200ResponseInner>]
    def parse_ingredients(ingredient_list, servings, opts = {})
      data, _status_code, _headers = parse_ingredients_with_http_info(ingredient_list, servings, opts)
      data
    end

    # Parse Ingredients
    # Extract an ingredient from plain text.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings that you can make from the ingredients.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @option opts [Boolean] :include_nutrition 
    # @return [Array<(Array<ParseIngredients200ResponseInner>, Integer, Hash)>] Array<ParseIngredients200ResponseInner> data, response status code and response headers
    def parse_ingredients_with_http_info(ingredient_list, servings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.parse_ingredients ...'
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling RecipesApi.parse_ingredients"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling RecipesApi.parse_ingredients"
      end
      allowable_values = ["en", "de"]
      if @api_client.config.client_side_validation && opts[:'language'] && !allowable_values.include?(opts[:'language'])
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/recipes/parseIngredients'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ingredientList'] = ingredient_list
      form_params['servings'] = servings
      form_params['includeNutrition'] = opts[:'include_nutrition'] if !opts[:'include_nutrition'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ParseIngredients200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.parse_ingredients",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#parse_ingredients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Price Breakdown by ID Image
    # Visualize a recipe's price breakdown.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def price_breakdown_by_id_image(id, opts = {})
      data, _status_code, _headers = price_breakdown_by_id_image_with_http_info(id, opts)
      data
    end

    # Price Breakdown by ID Image
    # Visualize a recipe&#39;s price breakdown.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def price_breakdown_by_id_image_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.price_breakdown_by_id_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.price_breakdown_by_id_image"
      end
      # resource path
      local_var_path = '/recipes/{id}/priceBreakdownWidget.png'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.price_breakdown_by_id_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#price_breakdown_by_id_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Quick Answer
    # Answer a nutrition related natural language question.
    # @param q [String] The nutrition related question.
    # @param [Hash] opts the optional parameters
    # @return [QuickAnswer200Response]
    def quick_answer(q, opts = {})
      data, _status_code, _headers = quick_answer_with_http_info(q, opts)
      data
    end

    # Quick Answer
    # Answer a nutrition related natural language question.
    # @param q [String] The nutrition related question.
    # @param [Hash] opts the optional parameters
    # @return [Array<(QuickAnswer200Response, Integer, Hash)>] QuickAnswer200Response data, response status code and response headers
    def quick_answer_with_http_info(q, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.quick_answer ...'
      end
      # verify the required parameter 'q' is set
      if @api_client.config.client_side_validation && q.nil?
        fail ArgumentError, "Missing the required parameter 'q' when calling RecipesApi.quick_answer"
      end
      # resource path
      local_var_path = '/recipes/quickAnswer'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'q'] = q

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'QuickAnswer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.quick_answer",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#quick_answer\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recipe Nutrition by ID Image
    # Visualize a recipe's nutritional information as an image.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [File]
    def recipe_nutrition_by_id_image(id, opts = {})
      data, _status_code, _headers = recipe_nutrition_by_id_image_with_http_info(id, opts)
      data
    end

    # Recipe Nutrition by ID Image
    # Visualize a recipe&#39;s nutritional information as an image.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def recipe_nutrition_by_id_image_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.recipe_nutrition_by_id_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.recipe_nutrition_by_id_image"
      end
      # resource path
      local_var_path = '/recipes/{id}/nutritionWidget.png'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.recipe_nutrition_by_id_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#recipe_nutrition_by_id_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recipe Nutrition Label Image
    # Get a recipe's nutrition label as an image.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
    # @option opts [Boolean] :show_zero_values Whether to show zero values.
    # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
    # @return [File]
    def recipe_nutrition_label_image(id, opts = {})
      data, _status_code, _headers = recipe_nutrition_label_image_with_http_info(id, opts)
      data
    end

    # Recipe Nutrition Label Image
    # Get a recipe&#39;s nutrition label as an image.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
    # @option opts [Boolean] :show_zero_values Whether to show zero values.
    # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def recipe_nutrition_label_image_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.recipe_nutrition_label_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.recipe_nutrition_label_image"
      end
      # resource path
      local_var_path = '/recipes/{id}/nutritionLabel.png'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'showOptionalNutrients'] = opts[:'show_optional_nutrients'] if !opts[:'show_optional_nutrients'].nil?
      query_params[:'showZeroValues'] = opts[:'show_zero_values'] if !opts[:'show_zero_values'].nil?
      query_params[:'showIngredients'] = opts[:'show_ingredients'] if !opts[:'show_ingredients'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.recipe_nutrition_label_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#recipe_nutrition_label_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recipe Nutrition Label Widget
    # Get a recipe's nutrition label as an HTML widget.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
    # @option opts [Boolean] :show_zero_values Whether to show zero values.
    # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
    # @return [String]
    def recipe_nutrition_label_widget(id, opts = {})
      data, _status_code, _headers = recipe_nutrition_label_widget_with_http_info(id, opts)
      data
    end

    # Recipe Nutrition Label Widget
    # Get a recipe&#39;s nutrition label as an HTML widget.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
    # @option opts [Boolean] :show_zero_values Whether to show zero values.
    # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def recipe_nutrition_label_widget_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.recipe_nutrition_label_widget ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.recipe_nutrition_label_widget"
      end
      # resource path
      local_var_path = '/recipes/{id}/nutritionLabel'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      query_params[:'showOptionalNutrients'] = opts[:'show_optional_nutrients'] if !opts[:'show_optional_nutrients'].nil?
      query_params[:'showZeroValues'] = opts[:'show_zero_values'] if !opts[:'show_zero_values'].nil?
      query_params[:'showIngredients'] = opts[:'show_ingredients'] if !opts[:'show_ingredients'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.recipe_nutrition_label_widget",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#recipe_nutrition_label_widget\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recipe Taste by ID Image
    # Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :normalize Normalize to the strongest taste.
    # @option opts [String] :rgb Red, green, blue values for the chart color.
    # @return [File]
    def recipe_taste_by_id_image(id, opts = {})
      data, _status_code, _headers = recipe_taste_by_id_image_with_http_info(id, opts)
      data
    end

    # Recipe Taste by ID Image
    # Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    # @param id [Float] The recipe id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :normalize Normalize to the strongest taste.
    # @option opts [String] :rgb Red, green, blue values for the chart color.
    # @return [Array<(File, Integer, Hash)>] File data, response status code and response headers
    def recipe_taste_by_id_image_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.recipe_taste_by_id_image ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.recipe_taste_by_id_image"
      end
      # resource path
      local_var_path = '/recipes/{id}/tasteWidget.png'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'normalize'] = opts[:'normalize'] if !opts[:'normalize'].nil?
      query_params[:'rgb'] = opts[:'rgb'] if !opts[:'rgb'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['image/png'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'File'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.recipe_taste_by_id_image",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#recipe_taste_by_id_image\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Recipes
    # Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The (natural language) search query.
    # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines.
    # @option opts [String] :exclude_cuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines.
    # @option opts [String] :diet The diet for which the recipes must be suitable. See a full list of supported diets.
    # @option opts [String] :intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
    # @option opts [String] :equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
    # @option opts [String] :include_ingredients A comma-separated list of ingredients that should/must be used in the recipes.
    # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    # @option opts [String] :type The type of recipe. See a full list of supported meal types.
    # @option opts [Boolean] :instructions_required Whether the recipes must have instructions.
    # @option opts [Boolean] :fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query.
    # @option opts [Boolean] :add_recipe_information If set to true, you get more information about the recipes returned.
    # @option opts [Boolean] :add_recipe_nutrition If set to true, you get nutritional information about each recipes returned.
    # @option opts [String] :author The username of the recipe author.
    # @option opts [String] :tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
    # @option opts [Float] :recipe_box_id The id of the recipe box to which the search should be limited to.
    # @option opts [String] :title_match Enter text that must be found in the title of the recipes.
    # @option opts [Float] :max_ready_time The maximum time in minutes it should take to prepare and cook the recipe.
    # @option opts [Float] :min_servings The minimum amount of servings the recipe is for.
    # @option opts [Float] :max_servings The maximum amount of servings the recipe is for.
    # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (default to false)
    # @option opts [String] :sort The strategy to sort recipes by. See a full list of supported sorting options.
    # @option opts [String] :sort_direction The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
    # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
    # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
    # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
    # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
    # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
    # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
    # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
    # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
    # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
    # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
    # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
    # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
    # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
    # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
    # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
    # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
    # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
    # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
    # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
    # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
    # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
    # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
    # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
    # @option opts [Float] :min_folate The minimum amount of folate in micrograms the recipe must have.
    # @option opts [Float] :max_folate The maximum amount of folate in micrograms the recipe can have.
    # @option opts [Float] :min_folic_acid The minimum amount of folic acid in micrograms the recipe must have.
    # @option opts [Float] :max_folic_acid The maximum amount of folic acid in micrograms the recipe can have.
    # @option opts [Float] :min_iodine The minimum amount of iodine in micrograms the recipe must have.
    # @option opts [Float] :max_iodine The maximum amount of iodine in micrograms the recipe can have.
    # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
    # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
    # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
    # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
    # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
    # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
    # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
    # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
    # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
    # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
    # @option opts [Float] :min_selenium The minimum amount of selenium in micrograms the recipe must have.
    # @option opts [Float] :max_selenium The maximum amount of selenium in micrograms the recipe can have.
    # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
    # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
    # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
    # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
    # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
    # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
    # @option opts [Integer] :offset The number of results to skip (between 0 and 900).
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @return [SearchRecipes200Response]
    def search_recipes(opts = {})
      data, _status_code, _headers = search_recipes_with_http_info(opts)
      data
    end

    # Search Recipes
    # Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :query The (natural language) search query.
    # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines.
    # @option opts [String] :exclude_cuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines.
    # @option opts [String] :diet The diet for which the recipes must be suitable. See a full list of supported diets.
    # @option opts [String] :intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
    # @option opts [String] :equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
    # @option opts [String] :include_ingredients A comma-separated list of ingredients that should/must be used in the recipes.
    # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    # @option opts [String] :type The type of recipe. See a full list of supported meal types.
    # @option opts [Boolean] :instructions_required Whether the recipes must have instructions.
    # @option opts [Boolean] :fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query.
    # @option opts [Boolean] :add_recipe_information If set to true, you get more information about the recipes returned.
    # @option opts [Boolean] :add_recipe_nutrition If set to true, you get nutritional information about each recipes returned.
    # @option opts [String] :author The username of the recipe author.
    # @option opts [String] :tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
    # @option opts [Float] :recipe_box_id The id of the recipe box to which the search should be limited to.
    # @option opts [String] :title_match Enter text that must be found in the title of the recipes.
    # @option opts [Float] :max_ready_time The maximum time in minutes it should take to prepare and cook the recipe.
    # @option opts [Float] :min_servings The minimum amount of servings the recipe is for.
    # @option opts [Float] :max_servings The maximum amount of servings the recipe is for.
    # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (default to false)
    # @option opts [String] :sort The strategy to sort recipes by. See a full list of supported sorting options.
    # @option opts [String] :sort_direction The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
    # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
    # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
    # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
    # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
    # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
    # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
    # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
    # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
    # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
    # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
    # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
    # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
    # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
    # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
    # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
    # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
    # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
    # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
    # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
    # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
    # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
    # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
    # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
    # @option opts [Float] :min_folate The minimum amount of folate in micrograms the recipe must have.
    # @option opts [Float] :max_folate The maximum amount of folate in micrograms the recipe can have.
    # @option opts [Float] :min_folic_acid The minimum amount of folic acid in micrograms the recipe must have.
    # @option opts [Float] :max_folic_acid The maximum amount of folic acid in micrograms the recipe can have.
    # @option opts [Float] :min_iodine The minimum amount of iodine in micrograms the recipe must have.
    # @option opts [Float] :max_iodine The maximum amount of iodine in micrograms the recipe can have.
    # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
    # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
    # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
    # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
    # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
    # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
    # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
    # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
    # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
    # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
    # @option opts [Float] :min_selenium The minimum amount of selenium in micrograms the recipe must have.
    # @option opts [Float] :max_selenium The maximum amount of selenium in micrograms the recipe can have.
    # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
    # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
    # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
    # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
    # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
    # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
    # @option opts [Integer] :offset The number of results to skip (between 0 and 900).
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @return [Array<(SearchRecipes200Response, Integer, Hash)>] SearchRecipes200Response data, response status code and response headers
    def search_recipes_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.search_recipes ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 900
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling RecipesApi.search_recipes, must be smaller than or equal to 900.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling RecipesApi.search_recipes, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.search_recipes, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.search_recipes, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recipes/complexSearch'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'query'] = opts[:'query'] if !opts[:'query'].nil?
      query_params[:'cuisine'] = opts[:'cuisine'] if !opts[:'cuisine'].nil?
      query_params[:'excludeCuisine'] = opts[:'exclude_cuisine'] if !opts[:'exclude_cuisine'].nil?
      query_params[:'diet'] = opts[:'diet'] if !opts[:'diet'].nil?
      query_params[:'intolerances'] = opts[:'intolerances'] if !opts[:'intolerances'].nil?
      query_params[:'equipment'] = opts[:'equipment'] if !opts[:'equipment'].nil?
      query_params[:'includeIngredients'] = opts[:'include_ingredients'] if !opts[:'include_ingredients'].nil?
      query_params[:'excludeIngredients'] = opts[:'exclude_ingredients'] if !opts[:'exclude_ingredients'].nil?
      query_params[:'type'] = opts[:'type'] if !opts[:'type'].nil?
      query_params[:'instructionsRequired'] = opts[:'instructions_required'] if !opts[:'instructions_required'].nil?
      query_params[:'fillIngredients'] = opts[:'fill_ingredients'] if !opts[:'fill_ingredients'].nil?
      query_params[:'addRecipeInformation'] = opts[:'add_recipe_information'] if !opts[:'add_recipe_information'].nil?
      query_params[:'addRecipeNutrition'] = opts[:'add_recipe_nutrition'] if !opts[:'add_recipe_nutrition'].nil?
      query_params[:'author'] = opts[:'author'] if !opts[:'author'].nil?
      query_params[:'tags'] = opts[:'tags'] if !opts[:'tags'].nil?
      query_params[:'recipeBoxId'] = opts[:'recipe_box_id'] if !opts[:'recipe_box_id'].nil?
      query_params[:'titleMatch'] = opts[:'title_match'] if !opts[:'title_match'].nil?
      query_params[:'maxReadyTime'] = opts[:'max_ready_time'] if !opts[:'max_ready_time'].nil?
      query_params[:'minServings'] = opts[:'min_servings'] if !opts[:'min_servings'].nil?
      query_params[:'maxServings'] = opts[:'max_servings'] if !opts[:'max_servings'].nil?
      query_params[:'ignorePantry'] = opts[:'ignore_pantry'] if !opts[:'ignore_pantry'].nil?
      query_params[:'sort'] = opts[:'sort'] if !opts[:'sort'].nil?
      query_params[:'sortDirection'] = opts[:'sort_direction'] if !opts[:'sort_direction'].nil?
      query_params[:'minCarbs'] = opts[:'min_carbs'] if !opts[:'min_carbs'].nil?
      query_params[:'maxCarbs'] = opts[:'max_carbs'] if !opts[:'max_carbs'].nil?
      query_params[:'minProtein'] = opts[:'min_protein'] if !opts[:'min_protein'].nil?
      query_params[:'maxProtein'] = opts[:'max_protein'] if !opts[:'max_protein'].nil?
      query_params[:'minCalories'] = opts[:'min_calories'] if !opts[:'min_calories'].nil?
      query_params[:'maxCalories'] = opts[:'max_calories'] if !opts[:'max_calories'].nil?
      query_params[:'minFat'] = opts[:'min_fat'] if !opts[:'min_fat'].nil?
      query_params[:'maxFat'] = opts[:'max_fat'] if !opts[:'max_fat'].nil?
      query_params[:'minAlcohol'] = opts[:'min_alcohol'] if !opts[:'min_alcohol'].nil?
      query_params[:'maxAlcohol'] = opts[:'max_alcohol'] if !opts[:'max_alcohol'].nil?
      query_params[:'minCaffeine'] = opts[:'min_caffeine'] if !opts[:'min_caffeine'].nil?
      query_params[:'maxCaffeine'] = opts[:'max_caffeine'] if !opts[:'max_caffeine'].nil?
      query_params[:'minCopper'] = opts[:'min_copper'] if !opts[:'min_copper'].nil?
      query_params[:'maxCopper'] = opts[:'max_copper'] if !opts[:'max_copper'].nil?
      query_params[:'minCalcium'] = opts[:'min_calcium'] if !opts[:'min_calcium'].nil?
      query_params[:'maxCalcium'] = opts[:'max_calcium'] if !opts[:'max_calcium'].nil?
      query_params[:'minCholine'] = opts[:'min_choline'] if !opts[:'min_choline'].nil?
      query_params[:'maxCholine'] = opts[:'max_choline'] if !opts[:'max_choline'].nil?
      query_params[:'minCholesterol'] = opts[:'min_cholesterol'] if !opts[:'min_cholesterol'].nil?
      query_params[:'maxCholesterol'] = opts[:'max_cholesterol'] if !opts[:'max_cholesterol'].nil?
      query_params[:'minFluoride'] = opts[:'min_fluoride'] if !opts[:'min_fluoride'].nil?
      query_params[:'maxFluoride'] = opts[:'max_fluoride'] if !opts[:'max_fluoride'].nil?
      query_params[:'minSaturatedFat'] = opts[:'min_saturated_fat'] if !opts[:'min_saturated_fat'].nil?
      query_params[:'maxSaturatedFat'] = opts[:'max_saturated_fat'] if !opts[:'max_saturated_fat'].nil?
      query_params[:'minVitaminA'] = opts[:'min_vitamin_a'] if !opts[:'min_vitamin_a'].nil?
      query_params[:'maxVitaminA'] = opts[:'max_vitamin_a'] if !opts[:'max_vitamin_a'].nil?
      query_params[:'minVitaminC'] = opts[:'min_vitamin_c'] if !opts[:'min_vitamin_c'].nil?
      query_params[:'maxVitaminC'] = opts[:'max_vitamin_c'] if !opts[:'max_vitamin_c'].nil?
      query_params[:'minVitaminD'] = opts[:'min_vitamin_d'] if !opts[:'min_vitamin_d'].nil?
      query_params[:'maxVitaminD'] = opts[:'max_vitamin_d'] if !opts[:'max_vitamin_d'].nil?
      query_params[:'minVitaminE'] = opts[:'min_vitamin_e'] if !opts[:'min_vitamin_e'].nil?
      query_params[:'maxVitaminE'] = opts[:'max_vitamin_e'] if !opts[:'max_vitamin_e'].nil?
      query_params[:'minVitaminK'] = opts[:'min_vitamin_k'] if !opts[:'min_vitamin_k'].nil?
      query_params[:'maxVitaminK'] = opts[:'max_vitamin_k'] if !opts[:'max_vitamin_k'].nil?
      query_params[:'minVitaminB1'] = opts[:'min_vitamin_b1'] if !opts[:'min_vitamin_b1'].nil?
      query_params[:'maxVitaminB1'] = opts[:'max_vitamin_b1'] if !opts[:'max_vitamin_b1'].nil?
      query_params[:'minVitaminB2'] = opts[:'min_vitamin_b2'] if !opts[:'min_vitamin_b2'].nil?
      query_params[:'maxVitaminB2'] = opts[:'max_vitamin_b2'] if !opts[:'max_vitamin_b2'].nil?
      query_params[:'minVitaminB5'] = opts[:'min_vitamin_b5'] if !opts[:'min_vitamin_b5'].nil?
      query_params[:'maxVitaminB5'] = opts[:'max_vitamin_b5'] if !opts[:'max_vitamin_b5'].nil?
      query_params[:'minVitaminB3'] = opts[:'min_vitamin_b3'] if !opts[:'min_vitamin_b3'].nil?
      query_params[:'maxVitaminB3'] = opts[:'max_vitamin_b3'] if !opts[:'max_vitamin_b3'].nil?
      query_params[:'minVitaminB6'] = opts[:'min_vitamin_b6'] if !opts[:'min_vitamin_b6'].nil?
      query_params[:'maxVitaminB6'] = opts[:'max_vitamin_b6'] if !opts[:'max_vitamin_b6'].nil?
      query_params[:'minVitaminB12'] = opts[:'min_vitamin_b12'] if !opts[:'min_vitamin_b12'].nil?
      query_params[:'maxVitaminB12'] = opts[:'max_vitamin_b12'] if !opts[:'max_vitamin_b12'].nil?
      query_params[:'minFiber'] = opts[:'min_fiber'] if !opts[:'min_fiber'].nil?
      query_params[:'maxFiber'] = opts[:'max_fiber'] if !opts[:'max_fiber'].nil?
      query_params[:'minFolate'] = opts[:'min_folate'] if !opts[:'min_folate'].nil?
      query_params[:'maxFolate'] = opts[:'max_folate'] if !opts[:'max_folate'].nil?
      query_params[:'minFolicAcid'] = opts[:'min_folic_acid'] if !opts[:'min_folic_acid'].nil?
      query_params[:'maxFolicAcid'] = opts[:'max_folic_acid'] if !opts[:'max_folic_acid'].nil?
      query_params[:'minIodine'] = opts[:'min_iodine'] if !opts[:'min_iodine'].nil?
      query_params[:'maxIodine'] = opts[:'max_iodine'] if !opts[:'max_iodine'].nil?
      query_params[:'minIron'] = opts[:'min_iron'] if !opts[:'min_iron'].nil?
      query_params[:'maxIron'] = opts[:'max_iron'] if !opts[:'max_iron'].nil?
      query_params[:'minMagnesium'] = opts[:'min_magnesium'] if !opts[:'min_magnesium'].nil?
      query_params[:'maxMagnesium'] = opts[:'max_magnesium'] if !opts[:'max_magnesium'].nil?
      query_params[:'minManganese'] = opts[:'min_manganese'] if !opts[:'min_manganese'].nil?
      query_params[:'maxManganese'] = opts[:'max_manganese'] if !opts[:'max_manganese'].nil?
      query_params[:'minPhosphorus'] = opts[:'min_phosphorus'] if !opts[:'min_phosphorus'].nil?
      query_params[:'maxPhosphorus'] = opts[:'max_phosphorus'] if !opts[:'max_phosphorus'].nil?
      query_params[:'minPotassium'] = opts[:'min_potassium'] if !opts[:'min_potassium'].nil?
      query_params[:'maxPotassium'] = opts[:'max_potassium'] if !opts[:'max_potassium'].nil?
      query_params[:'minSelenium'] = opts[:'min_selenium'] if !opts[:'min_selenium'].nil?
      query_params[:'maxSelenium'] = opts[:'max_selenium'] if !opts[:'max_selenium'].nil?
      query_params[:'minSodium'] = opts[:'min_sodium'] if !opts[:'min_sodium'].nil?
      query_params[:'maxSodium'] = opts[:'max_sodium'] if !opts[:'max_sodium'].nil?
      query_params[:'minSugar'] = opts[:'min_sugar'] if !opts[:'min_sugar'].nil?
      query_params[:'maxSugar'] = opts[:'max_sugar'] if !opts[:'max_sugar'].nil?
      query_params[:'minZinc'] = opts[:'min_zinc'] if !opts[:'min_zinc'].nil?
      query_params[:'maxZinc'] = opts[:'max_zinc'] if !opts[:'max_zinc'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SearchRecipes200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.search_recipes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#search_recipes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Recipes by Ingredients
    #  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ingredients A comma-separated list of ingredients that the recipes should contain.
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @option opts [Float] :ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
    # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (default to false)
    # @return [Array<SearchRecipesByIngredients200ResponseInner>]
    def search_recipes_by_ingredients(opts = {})
      data, _status_code, _headers = search_recipes_by_ingredients_with_http_info(opts)
      data
    end

    # Search Recipes by Ingredients
    #  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
    # @param [Hash] opts the optional parameters
    # @option opts [String] :ingredients A comma-separated list of ingredients that the recipes should contain.
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @option opts [Float] :ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
    # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc. (default to false)
    # @return [Array<(Array<SearchRecipesByIngredients200ResponseInner>, Integer, Hash)>] Array<SearchRecipesByIngredients200ResponseInner> data, response status code and response headers
    def search_recipes_by_ingredients_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.search_recipes_by_ingredients ...'
      end
      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.search_recipes_by_ingredients, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.search_recipes_by_ingredients, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recipes/findByIngredients'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ingredients'] = opts[:'ingredients'] if !opts[:'ingredients'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?
      query_params[:'ranking'] = opts[:'ranking'] if !opts[:'ranking'].nil?
      query_params[:'ignorePantry'] = opts[:'ignore_pantry'] if !opts[:'ignore_pantry'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SearchRecipesByIngredients200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.search_recipes_by_ingredients",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#search_recipes_by_ingredients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Search Recipes by Nutrients
    # Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
    # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
    # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
    # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
    # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
    # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
    # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
    # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
    # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
    # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
    # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
    # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
    # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
    # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
    # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
    # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
    # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
    # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
    # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
    # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
    # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
    # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
    # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
    # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
    # @option opts [Float] :min_folate The minimum amount of folate in micrograms the recipe must have.
    # @option opts [Float] :max_folate The maximum amount of folate in micrograms the recipe can have.
    # @option opts [Float] :min_folic_acid The minimum amount of folic acid in micrograms the recipe must have.
    # @option opts [Float] :max_folic_acid The maximum amount of folic acid in micrograms the recipe can have.
    # @option opts [Float] :min_iodine The minimum amount of iodine in micrograms the recipe must have.
    # @option opts [Float] :max_iodine The maximum amount of iodine in micrograms the recipe can have.
    # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
    # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
    # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
    # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
    # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
    # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
    # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
    # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
    # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
    # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
    # @option opts [Float] :min_selenium The minimum amount of selenium in micrograms the recipe must have.
    # @option opts [Float] :max_selenium The maximum amount of selenium in micrograms the recipe can have.
    # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
    # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
    # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
    # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
    # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
    # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
    # @option opts [Integer] :offset The number of results to skip (between 0 and 900).
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @option opts [Boolean] :random If true, every request will give you a random set of recipes within the requested limits.
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @return [Array<SearchRecipesByNutrients200ResponseInner>]
    def search_recipes_by_nutrients(opts = {})
      data, _status_code, _headers = search_recipes_by_nutrients_with_http_info(opts)
      data
    end

    # Search Recipes by Nutrients
    # Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
    # @param [Hash] opts the optional parameters
    # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
    # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
    # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
    # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
    # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
    # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
    # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
    # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
    # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
    # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
    # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
    # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
    # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
    # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
    # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
    # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
    # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
    # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
    # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
    # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
    # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
    # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
    # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
    # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
    # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
    # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
    # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
    # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
    # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
    # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
    # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
    # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
    # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
    # @option opts [Float] :min_folate The minimum amount of folate in micrograms the recipe must have.
    # @option opts [Float] :max_folate The maximum amount of folate in micrograms the recipe can have.
    # @option opts [Float] :min_folic_acid The minimum amount of folic acid in micrograms the recipe must have.
    # @option opts [Float] :max_folic_acid The maximum amount of folic acid in micrograms the recipe can have.
    # @option opts [Float] :min_iodine The minimum amount of iodine in micrograms the recipe must have.
    # @option opts [Float] :max_iodine The maximum amount of iodine in micrograms the recipe can have.
    # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
    # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
    # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
    # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
    # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
    # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
    # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
    # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
    # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
    # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
    # @option opts [Float] :min_selenium The minimum amount of selenium in micrograms the recipe must have.
    # @option opts [Float] :max_selenium The maximum amount of selenium in micrograms the recipe can have.
    # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
    # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
    # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
    # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
    # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
    # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
    # @option opts [Integer] :offset The number of results to skip (between 0 and 900).
    # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10. (default to 10)
    # @option opts [Boolean] :random If true, every request will give you a random set of recipes within the requested limits.
    # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution. (default to true)
    # @return [Array<(Array<SearchRecipesByNutrients200ResponseInner>, Integer, Hash)>] Array<SearchRecipesByNutrients200ResponseInner> data, response status code and response headers
    def search_recipes_by_nutrients_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.search_recipes_by_nutrients ...'
      end
      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] > 900
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling RecipesApi.search_recipes_by_nutrients, must be smaller than or equal to 900.'
      end

      if @api_client.config.client_side_validation && !opts[:'offset'].nil? && opts[:'offset'] < 0
        fail ArgumentError, 'invalid value for "opts[:"offset"]" when calling RecipesApi.search_recipes_by_nutrients, must be greater than or equal to 0.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] > 100
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.search_recipes_by_nutrients, must be smaller than or equal to 100.'
      end

      if @api_client.config.client_side_validation && !opts[:'number'].nil? && opts[:'number'] < 1
        fail ArgumentError, 'invalid value for "opts[:"number"]" when calling RecipesApi.search_recipes_by_nutrients, must be greater than or equal to 1.'
      end

      # resource path
      local_var_path = '/recipes/findByNutrients'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'minCarbs'] = opts[:'min_carbs'] if !opts[:'min_carbs'].nil?
      query_params[:'maxCarbs'] = opts[:'max_carbs'] if !opts[:'max_carbs'].nil?
      query_params[:'minProtein'] = opts[:'min_protein'] if !opts[:'min_protein'].nil?
      query_params[:'maxProtein'] = opts[:'max_protein'] if !opts[:'max_protein'].nil?
      query_params[:'minCalories'] = opts[:'min_calories'] if !opts[:'min_calories'].nil?
      query_params[:'maxCalories'] = opts[:'max_calories'] if !opts[:'max_calories'].nil?
      query_params[:'minFat'] = opts[:'min_fat'] if !opts[:'min_fat'].nil?
      query_params[:'maxFat'] = opts[:'max_fat'] if !opts[:'max_fat'].nil?
      query_params[:'minAlcohol'] = opts[:'min_alcohol'] if !opts[:'min_alcohol'].nil?
      query_params[:'maxAlcohol'] = opts[:'max_alcohol'] if !opts[:'max_alcohol'].nil?
      query_params[:'minCaffeine'] = opts[:'min_caffeine'] if !opts[:'min_caffeine'].nil?
      query_params[:'maxCaffeine'] = opts[:'max_caffeine'] if !opts[:'max_caffeine'].nil?
      query_params[:'minCopper'] = opts[:'min_copper'] if !opts[:'min_copper'].nil?
      query_params[:'maxCopper'] = opts[:'max_copper'] if !opts[:'max_copper'].nil?
      query_params[:'minCalcium'] = opts[:'min_calcium'] if !opts[:'min_calcium'].nil?
      query_params[:'maxCalcium'] = opts[:'max_calcium'] if !opts[:'max_calcium'].nil?
      query_params[:'minCholine'] = opts[:'min_choline'] if !opts[:'min_choline'].nil?
      query_params[:'maxCholine'] = opts[:'max_choline'] if !opts[:'max_choline'].nil?
      query_params[:'minCholesterol'] = opts[:'min_cholesterol'] if !opts[:'min_cholesterol'].nil?
      query_params[:'maxCholesterol'] = opts[:'max_cholesterol'] if !opts[:'max_cholesterol'].nil?
      query_params[:'minFluoride'] = opts[:'min_fluoride'] if !opts[:'min_fluoride'].nil?
      query_params[:'maxFluoride'] = opts[:'max_fluoride'] if !opts[:'max_fluoride'].nil?
      query_params[:'minSaturatedFat'] = opts[:'min_saturated_fat'] if !opts[:'min_saturated_fat'].nil?
      query_params[:'maxSaturatedFat'] = opts[:'max_saturated_fat'] if !opts[:'max_saturated_fat'].nil?
      query_params[:'minVitaminA'] = opts[:'min_vitamin_a'] if !opts[:'min_vitamin_a'].nil?
      query_params[:'maxVitaminA'] = opts[:'max_vitamin_a'] if !opts[:'max_vitamin_a'].nil?
      query_params[:'minVitaminC'] = opts[:'min_vitamin_c'] if !opts[:'min_vitamin_c'].nil?
      query_params[:'maxVitaminC'] = opts[:'max_vitamin_c'] if !opts[:'max_vitamin_c'].nil?
      query_params[:'minVitaminD'] = opts[:'min_vitamin_d'] if !opts[:'min_vitamin_d'].nil?
      query_params[:'maxVitaminD'] = opts[:'max_vitamin_d'] if !opts[:'max_vitamin_d'].nil?
      query_params[:'minVitaminE'] = opts[:'min_vitamin_e'] if !opts[:'min_vitamin_e'].nil?
      query_params[:'maxVitaminE'] = opts[:'max_vitamin_e'] if !opts[:'max_vitamin_e'].nil?
      query_params[:'minVitaminK'] = opts[:'min_vitamin_k'] if !opts[:'min_vitamin_k'].nil?
      query_params[:'maxVitaminK'] = opts[:'max_vitamin_k'] if !opts[:'max_vitamin_k'].nil?
      query_params[:'minVitaminB1'] = opts[:'min_vitamin_b1'] if !opts[:'min_vitamin_b1'].nil?
      query_params[:'maxVitaminB1'] = opts[:'max_vitamin_b1'] if !opts[:'max_vitamin_b1'].nil?
      query_params[:'minVitaminB2'] = opts[:'min_vitamin_b2'] if !opts[:'min_vitamin_b2'].nil?
      query_params[:'maxVitaminB2'] = opts[:'max_vitamin_b2'] if !opts[:'max_vitamin_b2'].nil?
      query_params[:'minVitaminB5'] = opts[:'min_vitamin_b5'] if !opts[:'min_vitamin_b5'].nil?
      query_params[:'maxVitaminB5'] = opts[:'max_vitamin_b5'] if !opts[:'max_vitamin_b5'].nil?
      query_params[:'minVitaminB3'] = opts[:'min_vitamin_b3'] if !opts[:'min_vitamin_b3'].nil?
      query_params[:'maxVitaminB3'] = opts[:'max_vitamin_b3'] if !opts[:'max_vitamin_b3'].nil?
      query_params[:'minVitaminB6'] = opts[:'min_vitamin_b6'] if !opts[:'min_vitamin_b6'].nil?
      query_params[:'maxVitaminB6'] = opts[:'max_vitamin_b6'] if !opts[:'max_vitamin_b6'].nil?
      query_params[:'minVitaminB12'] = opts[:'min_vitamin_b12'] if !opts[:'min_vitamin_b12'].nil?
      query_params[:'maxVitaminB12'] = opts[:'max_vitamin_b12'] if !opts[:'max_vitamin_b12'].nil?
      query_params[:'minFiber'] = opts[:'min_fiber'] if !opts[:'min_fiber'].nil?
      query_params[:'maxFiber'] = opts[:'max_fiber'] if !opts[:'max_fiber'].nil?
      query_params[:'minFolate'] = opts[:'min_folate'] if !opts[:'min_folate'].nil?
      query_params[:'maxFolate'] = opts[:'max_folate'] if !opts[:'max_folate'].nil?
      query_params[:'minFolicAcid'] = opts[:'min_folic_acid'] if !opts[:'min_folic_acid'].nil?
      query_params[:'maxFolicAcid'] = opts[:'max_folic_acid'] if !opts[:'max_folic_acid'].nil?
      query_params[:'minIodine'] = opts[:'min_iodine'] if !opts[:'min_iodine'].nil?
      query_params[:'maxIodine'] = opts[:'max_iodine'] if !opts[:'max_iodine'].nil?
      query_params[:'minIron'] = opts[:'min_iron'] if !opts[:'min_iron'].nil?
      query_params[:'maxIron'] = opts[:'max_iron'] if !opts[:'max_iron'].nil?
      query_params[:'minMagnesium'] = opts[:'min_magnesium'] if !opts[:'min_magnesium'].nil?
      query_params[:'maxMagnesium'] = opts[:'max_magnesium'] if !opts[:'max_magnesium'].nil?
      query_params[:'minManganese'] = opts[:'min_manganese'] if !opts[:'min_manganese'].nil?
      query_params[:'maxManganese'] = opts[:'max_manganese'] if !opts[:'max_manganese'].nil?
      query_params[:'minPhosphorus'] = opts[:'min_phosphorus'] if !opts[:'min_phosphorus'].nil?
      query_params[:'maxPhosphorus'] = opts[:'max_phosphorus'] if !opts[:'max_phosphorus'].nil?
      query_params[:'minPotassium'] = opts[:'min_potassium'] if !opts[:'min_potassium'].nil?
      query_params[:'maxPotassium'] = opts[:'max_potassium'] if !opts[:'max_potassium'].nil?
      query_params[:'minSelenium'] = opts[:'min_selenium'] if !opts[:'min_selenium'].nil?
      query_params[:'maxSelenium'] = opts[:'max_selenium'] if !opts[:'max_selenium'].nil?
      query_params[:'minSodium'] = opts[:'min_sodium'] if !opts[:'min_sodium'].nil?
      query_params[:'maxSodium'] = opts[:'max_sodium'] if !opts[:'max_sodium'].nil?
      query_params[:'minSugar'] = opts[:'min_sugar'] if !opts[:'min_sugar'].nil?
      query_params[:'maxSugar'] = opts[:'max_sugar'] if !opts[:'max_sugar'].nil?
      query_params[:'minZinc'] = opts[:'min_zinc'] if !opts[:'min_zinc'].nil?
      query_params[:'maxZinc'] = opts[:'max_zinc'] if !opts[:'max_zinc'].nil?
      query_params[:'offset'] = opts[:'offset'] if !opts[:'offset'].nil?
      query_params[:'number'] = opts[:'number'] if !opts[:'number'].nil?
      query_params[:'random'] = opts[:'random'] if !opts[:'random'].nil?
      query_params[:'limitLicense'] = opts[:'limit_license'] if !opts[:'limit_license'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SearchRecipesByNutrients200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.search_recipes_by_nutrients",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#search_recipes_by_nutrients\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Summarize Recipe
    # Automatically generate a short description that summarizes key information about the recipe.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [SummarizeRecipe200Response]
    def summarize_recipe(id, opts = {})
      data, _status_code, _headers = summarize_recipe_with_http_info(id, opts)
      data
    end

    # Summarize Recipe
    # Automatically generate a short description that summarizes key information about the recipe.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @return [Array<(SummarizeRecipe200Response, Integer, Hash)>] SummarizeRecipe200Response data, response status code and response headers
    def summarize_recipe_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.summarize_recipe ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.summarize_recipe"
      end
      # resource path
      local_var_path = '/recipes/{id}/summary'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'SummarizeRecipe200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.summarize_recipe",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#summarize_recipe\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Equipment Widget
    # Visualize the equipment used to make a recipe.
    # @param instructions [String] The recipe&#39;s instructions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;.
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [String]
    def visualize_equipment(instructions, opts = {})
      data, _status_code, _headers = visualize_equipment_with_http_info(instructions, opts)
      data
    end

    # Equipment Widget
    # Visualize the equipment used to make a recipe.
    # @param instructions [String] The recipe&#39;s instructions.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :view How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;.
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_equipment_with_http_info(instructions, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.visualize_equipment ...'
      end
      # verify the required parameter 'instructions' is set
      if @api_client.config.client_side_validation && instructions.nil?
        fail ArgumentError, "Missing the required parameter 'instructions' when calling RecipesApi.visualize_equipment"
      end
      allowable_values = ["grid", "list"]
      if @api_client.config.client_side_validation && opts[:'view'] && !allowable_values.include?(opts[:'view'])
        fail ArgumentError, "invalid value for \"view\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/recipes/visualizeEquipment'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['instructions'] = instructions
      form_params['view'] = opts[:'view'] if !opts[:'view'].nil?
      form_params['defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      form_params['showBacklink'] = opts[:'show_backlink'] if !opts[:'show_backlink'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.visualize_equipment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#visualize_equipment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Price Breakdown Widget
    # Visualize the price breakdown of a recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @option opts [Float] :mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [String]
    def visualize_price_breakdown(ingredient_list, servings, opts = {})
      data, _status_code, _headers = visualize_price_breakdown_with_http_info(ingredient_list, servings, opts)
      data
    end

    # Price Breakdown Widget
    # Visualize the price breakdown of a recipe.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @option opts [Float] :mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_price_breakdown_with_http_info(ingredient_list, servings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.visualize_price_breakdown ...'
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling RecipesApi.visualize_price_breakdown"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling RecipesApi.visualize_price_breakdown"
      end
      allowable_values = ["en", "de"]
      if @api_client.config.client_side_validation && opts[:'language'] && !allowable_values.include?(opts[:'language'])
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/recipes/visualizePriceEstimator'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ingredientList'] = ingredient_list
      form_params['servings'] = servings
      form_params['mode'] = opts[:'mode'] if !opts[:'mode'].nil?
      form_params['defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      form_params['showBacklink'] = opts[:'show_backlink'] if !opts[:'show_backlink'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.visualize_price_breakdown",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#visualize_price_breakdown\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Equipment by ID Widget
    # Visualize a recipe's equipment list.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @return [String]
    def visualize_recipe_equipment_by_id(id, opts = {})
      data, _status_code, _headers = visualize_recipe_equipment_by_id_with_http_info(id, opts)
      data
    end

    # Equipment by ID Widget
    # Visualize a recipe&#39;s equipment list.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_equipment_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.visualize_recipe_equipment_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.visualize_recipe_equipment_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/equipmentWidget'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.visualize_recipe_equipment_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#visualize_recipe_equipment_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Ingredients by ID Widget
    # Visualize a recipe's ingredient list.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @option opts [String] :measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;.
    # @return [String]
    def visualize_recipe_ingredients_by_id(id, opts = {})
      data, _status_code, _headers = visualize_recipe_ingredients_by_id_with_http_info(id, opts)
      data
    end

    # Ingredients by ID Widget
    # Visualize a recipe&#39;s ingredient list.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @option opts [String] :measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_ingredients_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.visualize_recipe_ingredients_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.visualize_recipe_ingredients_by_id"
      end
      allowable_values = ["us", "metric"]
      if @api_client.config.client_side_validation && opts[:'measure'] && !allowable_values.include?(opts[:'measure'])
        fail ArgumentError, "invalid value for \"measure\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/recipes/{id}/ingredientWidget'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      query_params[:'measure'] = opts[:'measure'] if !opts[:'measure'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.visualize_recipe_ingredients_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#visualize_recipe_ingredients_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recipe Nutrition Widget
    # Visualize a recipe's nutritional information as HTML including CSS.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [String]
    def visualize_recipe_nutrition(ingredient_list, servings, opts = {})
      data, _status_code, _headers = visualize_recipe_nutrition_with_http_info(ingredient_list, servings, opts)
      data
    end

    # Recipe Nutrition Widget
    # Visualize a recipe&#39;s nutritional information as HTML including CSS.
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param servings [Float] The number of servings.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
    # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_nutrition_with_http_info(ingredient_list, servings, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.visualize_recipe_nutrition ...'
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling RecipesApi.visualize_recipe_nutrition"
      end
      # verify the required parameter 'servings' is set
      if @api_client.config.client_side_validation && servings.nil?
        fail ArgumentError, "Missing the required parameter 'servings' when calling RecipesApi.visualize_recipe_nutrition"
      end
      allowable_values = ["en", "de"]
      if @api_client.config.client_side_validation && opts[:'language'] && !allowable_values.include?(opts[:'language'])
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/recipes/visualizeNutrition'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ingredientList'] = ingredient_list
      form_params['servings'] = servings
      form_params['defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?
      form_params['showBacklink'] = opts[:'show_backlink'] if !opts[:'show_backlink'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.visualize_recipe_nutrition",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#visualize_recipe_nutrition\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recipe Nutrition by ID Widget
    # Visualize a recipe's nutritional information as HTML including CSS.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @return [String]
    def visualize_recipe_nutrition_by_id(id, opts = {})
      data, _status_code, _headers = visualize_recipe_nutrition_by_id_with_http_info(id, opts)
      data
    end

    # Recipe Nutrition by ID Widget
    # Visualize a recipe&#39;s nutritional information as HTML including CSS.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_nutrition_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.visualize_recipe_nutrition_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.visualize_recipe_nutrition_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/nutritionWidget'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.visualize_recipe_nutrition_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#visualize_recipe_nutrition_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Price Breakdown by ID Widget
    # Visualize a recipe's price breakdown.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @return [String]
    def visualize_recipe_price_breakdown_by_id(id, opts = {})
      data, _status_code, _headers = visualize_recipe_price_breakdown_by_id_with_http_info(id, opts)
      data
    end

    # Price Breakdown by ID Widget
    # Visualize a recipe&#39;s price breakdown.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :default_css Whether the default CSS should be added to the response. (default to true)
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_price_breakdown_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.visualize_recipe_price_breakdown_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.visualize_recipe_price_breakdown_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/priceBreakdownWidget'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'defaultCss'] = opts[:'default_css'] if !opts[:'default_css'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.visualize_recipe_price_breakdown_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#visualize_recipe_price_breakdown_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recipe Taste Widget
    # Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @option opts [Boolean] :normalize Normalize to the strongest taste.
    # @option opts [String] :rgb Red, green, blue values for the chart color.
    # @return [String]
    def visualize_recipe_taste(ingredient_list, opts = {})
      data, _status_code, _headers = visualize_recipe_taste_with_http_info(ingredient_list, opts)
      data
    end

    # Recipe Taste Widget
    # Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
    # @param ingredient_list [String] The ingredient list of the recipe, one ingredient per line.
    # @param [Hash] opts the optional parameters
    # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
    # @option opts [Boolean] :normalize Normalize to the strongest taste.
    # @option opts [String] :rgb Red, green, blue values for the chart color.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_taste_with_http_info(ingredient_list, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.visualize_recipe_taste ...'
      end
      # verify the required parameter 'ingredient_list' is set
      if @api_client.config.client_side_validation && ingredient_list.nil?
        fail ArgumentError, "Missing the required parameter 'ingredient_list' when calling RecipesApi.visualize_recipe_taste"
      end
      allowable_values = ["en", "de"]
      if @api_client.config.client_side_validation && opts[:'language'] && !allowable_values.include?(opts[:'language'])
        fail ArgumentError, "invalid value for \"language\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/recipes/visualizeTaste'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'language'] = opts[:'language'] if !opts[:'language'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/x-www-form-urlencoded'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}
      form_params['ingredientList'] = ingredient_list
      form_params['normalize'] = opts[:'normalize'] if !opts[:'normalize'].nil?
      form_params['rgb'] = opts[:'rgb'] if !opts[:'rgb'].nil?

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.visualize_recipe_taste",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#visualize_recipe_taste\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Recipe Taste by ID Widget
    # Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :normalize Whether to normalize to the strongest taste. (default to true)
    # @option opts [String] :rgb Red, green, blue values for the chart color.
    # @return [String]
    def visualize_recipe_taste_by_id(id, opts = {})
      data, _status_code, _headers = visualize_recipe_taste_by_id_with_http_info(id, opts)
      data
    end

    # Recipe Taste by ID Widget
    # Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
    # @param id [Integer] The item&#39;s id.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :normalize Whether to normalize to the strongest taste. (default to true)
    # @option opts [String] :rgb Red, green, blue values for the chart color.
    # @return [Array<(String, Integer, Hash)>] String data, response status code and response headers
    def visualize_recipe_taste_by_id_with_http_info(id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: RecipesApi.visualize_recipe_taste_by_id ...'
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling RecipesApi.visualize_recipe_taste_by_id"
      end
      # resource path
      local_var_path = '/recipes/{id}/tasteWidget'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'normalize'] = opts[:'normalize'] if !opts[:'normalize'].nil?
      query_params[:'rgb'] = opts[:'rgb'] if !opts[:'rgb'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['text/html'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'String'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"RecipesApi.visualize_recipe_taste_by_id",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: RecipesApi#visualize_recipe_taste_by_id\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
