/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.spoonacular.client.model.AutocompleteProductSearch200Response
import com.spoonacular.client.model.ClassifyGroceryProduct200Response
import com.spoonacular.client.model.ClassifyGroceryProductBulk200ResponseInner
import com.spoonacular.client.model.ClassifyGroceryProductBulkRequestInner
import com.spoonacular.client.model.ClassifyGroceryProductRequest
import com.spoonacular.client.model.GetComparableProducts200Response
import com.spoonacular.client.model.GetProductInformation200Response
import com.spoonacular.client.model.SearchGroceryProducts200Response
import com.spoonacular.client.model.SearchGroceryProductsByUPC200Response

import com.squareup.moshi.Json

import spoonacular.infrastructure.ApiClient
import spoonacular.infrastructure.ApiResponse
import spoonacular.infrastructure.ClientException
import spoonacular.infrastructure.ClientError
import spoonacular.infrastructure.ServerException
import spoonacular.infrastructure.ServerError
import spoonacular.infrastructure.MultiValueMap
import spoonacular.infrastructure.PartConfig
import spoonacular.infrastructure.RequestConfig
import spoonacular.infrastructure.RequestMethod
import spoonacular.infrastructure.ResponseType
import spoonacular.infrastructure.Success
import spoonacular.infrastructure.toMultiValue

class ProductsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.spoonacular.com")
        }
    }

    /**
     * Autocomplete Product Search
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query.
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return AutocompleteProductSearch200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun autocompleteProductSearch(query: kotlin.String, number: kotlin.Int? = null) : AutocompleteProductSearch200Response {
        val localVarResponse = autocompleteProductSearchWithHttpInfo(query = query, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as AutocompleteProductSearch200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Autocomplete Product Search
     * Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.
     * @param query The (partial) search query.
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return ApiResponse<AutocompleteProductSearch200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun autocompleteProductSearchWithHttpInfo(query: kotlin.String, number: kotlin.Int?) : ApiResponse<AutocompleteProductSearch200Response?> {
        val localVariableConfig = autocompleteProductSearchRequestConfig(query = query, number = number)

        return request<Unit, AutocompleteProductSearch200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation autocompleteProductSearch
     *
     * @param query The (partial) search query.
     * @param number The number of results to return (between 1 and 25). (optional)
     * @return RequestConfig
     */
    fun autocompleteProductSearchRequestConfig(query: kotlin.String, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("query", listOf(query.toString()))
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/products/suggest",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter locale
     */
     enum class LocaleClassifyGroceryProduct(val value: kotlin.String) {
         @Json(name = "en_US") US("en_US"),
         @Json(name = "en_GB") GB("en_GB")
     }

    /**
     * Classify Grocery Product
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     * @param classifyGroceryProductRequest 
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return ClassifyGroceryProduct200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun classifyGroceryProduct(classifyGroceryProductRequest: ClassifyGroceryProductRequest, locale: LocaleClassifyGroceryProduct? = null) : ClassifyGroceryProduct200Response {
        val localVarResponse = classifyGroceryProductWithHttpInfo(classifyGroceryProductRequest = classifyGroceryProductRequest, locale = locale)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ClassifyGroceryProduct200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Classify Grocery Product
     * This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.
     * @param classifyGroceryProductRequest 
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return ApiResponse<ClassifyGroceryProduct200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun classifyGroceryProductWithHttpInfo(classifyGroceryProductRequest: ClassifyGroceryProductRequest, locale: LocaleClassifyGroceryProduct?) : ApiResponse<ClassifyGroceryProduct200Response?> {
        val localVariableConfig = classifyGroceryProductRequestConfig(classifyGroceryProductRequest = classifyGroceryProductRequest, locale = locale)

        return request<ClassifyGroceryProductRequest, ClassifyGroceryProduct200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation classifyGroceryProduct
     *
     * @param classifyGroceryProductRequest 
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return RequestConfig
     */
    fun classifyGroceryProductRequestConfig(classifyGroceryProductRequest: ClassifyGroceryProductRequest, locale: LocaleClassifyGroceryProduct?) : RequestConfig<ClassifyGroceryProductRequest> {
        val localVariableBody = classifyGroceryProductRequest
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (locale != null) {
                    put("locale", listOf(locale.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/food/products/classify",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Classify Grocery Product Bulk
     * Provide a set of product jsons, get back classified products.
     * @param classifyGroceryProductBulkRequestInner 
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return kotlin.collections.Set<ClassifyGroceryProductBulk200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun classifyGroceryProductBulk(classifyGroceryProductBulkRequestInner: kotlin.collections.Set<ClassifyGroceryProductBulkRequestInner>, locale: kotlin.String? = null) : kotlin.collections.Set<ClassifyGroceryProductBulk200ResponseInner> {
        val localVarResponse = classifyGroceryProductBulkWithHttpInfo(classifyGroceryProductBulkRequestInner = classifyGroceryProductBulkRequestInner, locale = locale)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<ClassifyGroceryProductBulk200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Classify Grocery Product Bulk
     * Provide a set of product jsons, get back classified products.
     * @param classifyGroceryProductBulkRequestInner 
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return ApiResponse<kotlin.collections.Set<ClassifyGroceryProductBulk200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun classifyGroceryProductBulkWithHttpInfo(classifyGroceryProductBulkRequestInner: kotlin.collections.Set<ClassifyGroceryProductBulkRequestInner>, locale: kotlin.String?) : ApiResponse<kotlin.collections.Set<ClassifyGroceryProductBulk200ResponseInner>?> {
        val localVariableConfig = classifyGroceryProductBulkRequestConfig(classifyGroceryProductBulkRequestInner = classifyGroceryProductBulkRequestInner, locale = locale)

        return request<kotlin.collections.Set<ClassifyGroceryProductBulkRequestInner>, kotlin.collections.Set<ClassifyGroceryProductBulk200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation classifyGroceryProductBulk
     *
     * @param classifyGroceryProductBulkRequestInner 
     * @param locale The display name of the returned category, supported is en_US (for American English) and en_GB (for British English). (optional)
     * @return RequestConfig
     */
    fun classifyGroceryProductBulkRequestConfig(classifyGroceryProductBulkRequestInner: kotlin.collections.Set<ClassifyGroceryProductBulkRequestInner>, locale: kotlin.String?) : RequestConfig<kotlin.collections.Set<ClassifyGroceryProductBulkRequestInner>> {
        val localVariableBody = classifyGroceryProductBulkRequestInner
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (locale != null) {
                    put("locale", listOf(locale.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/food/products/classifyBatch",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Comparable Products
     * Find comparable products to the given one.
     * @param upc The UPC of the product for which you want to find comparable products.
     * @return GetComparableProducts200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getComparableProducts(upc: java.math.BigDecimal) : GetComparableProducts200Response {
        val localVarResponse = getComparableProductsWithHttpInfo(upc = upc)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetComparableProducts200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Comparable Products
     * Find comparable products to the given one.
     * @param upc The UPC of the product for which you want to find comparable products.
     * @return ApiResponse<GetComparableProducts200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getComparableProductsWithHttpInfo(upc: java.math.BigDecimal) : ApiResponse<GetComparableProducts200Response?> {
        val localVariableConfig = getComparableProductsRequestConfig(upc = upc)

        return request<Unit, GetComparableProducts200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getComparableProducts
     *
     * @param upc The UPC of the product for which you want to find comparable products.
     * @return RequestConfig
     */
    fun getComparableProductsRequestConfig(upc: java.math.BigDecimal) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/products/upc/{upc}/comparable".replace("{"+"upc"+"}", encodeURIComponent(upc.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Product Information
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     * @param id The item&#39;s id.
     * @return GetProductInformation200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getProductInformation(id: kotlin.Int) : GetProductInformation200Response {
        val localVarResponse = getProductInformationWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetProductInformation200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Product Information
     * Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.
     * @param id The item&#39;s id.
     * @return ApiResponse<GetProductInformation200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getProductInformationWithHttpInfo(id: kotlin.Int) : ApiResponse<GetProductInformation200Response?> {
        val localVariableConfig = getProductInformationRequestConfig(id = id)

        return request<Unit, GetProductInformation200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getProductInformation
     *
     * @param id The item&#39;s id.
     * @return RequestConfig
     */
    fun getProductInformationRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/products/{id}".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Product Nutrition by ID Image
     * Visualize a product&#39;s nutritional information as an image.
     * @param id The id of the product.
     * @return java.io.File
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productNutritionByIDImage(id: java.math.BigDecimal) : java.io.File {
        val localVarResponse = productNutritionByIDImageWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.io.File
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Product Nutrition by ID Image
     * Visualize a product&#39;s nutritional information as an image.
     * @param id The id of the product.
     * @return ApiResponse<java.io.File?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun productNutritionByIDImageWithHttpInfo(id: java.math.BigDecimal) : ApiResponse<java.io.File?> {
        val localVariableConfig = productNutritionByIDImageRequestConfig(id = id)

        return request<Unit, java.io.File>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation productNutritionByIDImage
     *
     * @param id The id of the product.
     * @return RequestConfig
     */
    fun productNutritionByIDImageRequestConfig(id: java.math.BigDecimal) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/products/{id}/nutritionWidget.png".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Product Nutrition Label Image
     * Get a product&#39;s nutrition label as an image.
     * @param id The product id.
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return java.io.File
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productNutritionLabelImage(id: java.math.BigDecimal, showOptionalNutrients: kotlin.Boolean? = null, showZeroValues: kotlin.Boolean? = null, showIngredients: kotlin.Boolean? = null) : java.io.File {
        val localVarResponse = productNutritionLabelImageWithHttpInfo(id = id, showOptionalNutrients = showOptionalNutrients, showZeroValues = showZeroValues, showIngredients = showIngredients)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.io.File
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Product Nutrition Label Image
     * Get a product&#39;s nutrition label as an image.
     * @param id The product id.
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return ApiResponse<java.io.File?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun productNutritionLabelImageWithHttpInfo(id: java.math.BigDecimal, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : ApiResponse<java.io.File?> {
        val localVariableConfig = productNutritionLabelImageRequestConfig(id = id, showOptionalNutrients = showOptionalNutrients, showZeroValues = showZeroValues, showIngredients = showIngredients)

        return request<Unit, java.io.File>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation productNutritionLabelImage
     *
     * @param id The product id.
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return RequestConfig
     */
    fun productNutritionLabelImageRequestConfig(id: java.math.BigDecimal, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (showOptionalNutrients != null) {
                    put("showOptionalNutrients", listOf(showOptionalNutrients.toString()))
                }
                if (showZeroValues != null) {
                    put("showZeroValues", listOf(showZeroValues.toString()))
                }
                if (showIngredients != null) {
                    put("showIngredients", listOf(showIngredients.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/products/{id}/nutritionLabel.png".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Product Nutrition Label Widget
     * Get a product&#39;s nutrition label as an HTML widget.
     * @param id The product id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun productNutritionLabelWidget(id: java.math.BigDecimal, defaultCss: kotlin.Boolean? = true, showOptionalNutrients: kotlin.Boolean? = null, showZeroValues: kotlin.Boolean? = null, showIngredients: kotlin.Boolean? = null) : kotlin.String {
        val localVarResponse = productNutritionLabelWidgetWithHttpInfo(id = id, defaultCss = defaultCss, showOptionalNutrients = showOptionalNutrients, showZeroValues = showZeroValues, showIngredients = showIngredients)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Product Nutrition Label Widget
     * Get a product&#39;s nutrition label as an HTML widget.
     * @param id The product id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun productNutritionLabelWidgetWithHttpInfo(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = productNutritionLabelWidgetRequestConfig(id = id, defaultCss = defaultCss, showOptionalNutrients = showOptionalNutrients, showZeroValues = showZeroValues, showIngredients = showIngredients)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation productNutritionLabelWidget
     *
     * @param id The product id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @param showOptionalNutrients Whether to show optional nutrients. (optional)
     * @param showZeroValues Whether to show zero values. (optional)
     * @param showIngredients Whether to show a list of ingredients. (optional)
     * @return RequestConfig
     */
    fun productNutritionLabelWidgetRequestConfig(id: java.math.BigDecimal, defaultCss: kotlin.Boolean?, showOptionalNutrients: kotlin.Boolean?, showZeroValues: kotlin.Boolean?, showIngredients: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (defaultCss != null) {
                    put("defaultCss", listOf(defaultCss.toString()))
                }
                if (showOptionalNutrients != null) {
                    put("showOptionalNutrients", listOf(showOptionalNutrients.toString()))
                }
                if (showZeroValues != null) {
                    put("showZeroValues", listOf(showZeroValues.toString()))
                }
                if (showIngredients != null) {
                    put("showIngredients", listOf(showIngredients.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/products/{id}/nutritionLabel".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Grocery Products
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     * @param query The (natural language) search query. (optional)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param addProductInformation If set to true, you get more information about the products returned. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return SearchGroceryProducts200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchGroceryProducts(query: kotlin.String? = null, minCalories: java.math.BigDecimal? = null, maxCalories: java.math.BigDecimal? = null, minCarbs: java.math.BigDecimal? = null, maxCarbs: java.math.BigDecimal? = null, minProtein: java.math.BigDecimal? = null, maxProtein: java.math.BigDecimal? = null, minFat: java.math.BigDecimal? = null, maxFat: java.math.BigDecimal? = null, addProductInformation: kotlin.Boolean? = null, offset: kotlin.Int? = null, number: kotlin.Int? = 10) : SearchGroceryProducts200Response {
        val localVarResponse = searchGroceryProductsWithHttpInfo(query = query, minCalories = minCalories, maxCalories = maxCalories, minCarbs = minCarbs, maxCarbs = maxCarbs, minProtein = minProtein, maxProtein = maxProtein, minFat = minFat, maxFat = maxFat, addProductInformation = addProductInformation, offset = offset, number = number)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchGroceryProducts200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Grocery Products
     * Search packaged food products, such as frozen pizza or Greek yogurt.
     * @param query The (natural language) search query. (optional)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param addProductInformation If set to true, you get more information about the products returned. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return ApiResponse<SearchGroceryProducts200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchGroceryProductsWithHttpInfo(query: kotlin.String?, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, addProductInformation: kotlin.Boolean?, offset: kotlin.Int?, number: kotlin.Int?) : ApiResponse<SearchGroceryProducts200Response?> {
        val localVariableConfig = searchGroceryProductsRequestConfig(query = query, minCalories = minCalories, maxCalories = maxCalories, minCarbs = minCarbs, maxCarbs = maxCarbs, minProtein = minProtein, maxProtein = maxProtein, minFat = minFat, maxFat = maxFat, addProductInformation = addProductInformation, offset = offset, number = number)

        return request<Unit, SearchGroceryProducts200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchGroceryProducts
     *
     * @param query The (natural language) search query. (optional)
     * @param minCalories The minimum amount of calories the product must have. (optional)
     * @param maxCalories The maximum amount of calories the product can have. (optional)
     * @param minCarbs The minimum amount of carbohydrates in grams the product must have. (optional)
     * @param maxCarbs The maximum amount of carbohydrates in grams the product can have. (optional)
     * @param minProtein The minimum amount of protein in grams the product must have. (optional)
     * @param maxProtein The maximum amount of protein in grams the product can have. (optional)
     * @param minFat The minimum amount of fat in grams the product must have. (optional)
     * @param maxFat The maximum amount of fat in grams the product can have. (optional)
     * @param addProductInformation If set to true, you get more information about the products returned. (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @return RequestConfig
     */
    fun searchGroceryProductsRequestConfig(query: kotlin.String?, minCalories: java.math.BigDecimal?, maxCalories: java.math.BigDecimal?, minCarbs: java.math.BigDecimal?, maxCarbs: java.math.BigDecimal?, minProtein: java.math.BigDecimal?, maxProtein: java.math.BigDecimal?, minFat: java.math.BigDecimal?, maxFat: java.math.BigDecimal?, addProductInformation: kotlin.Boolean?, offset: kotlin.Int?, number: kotlin.Int?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (minCalories != null) {
                    put("minCalories", listOf(minCalories.toString()))
                }
                if (maxCalories != null) {
                    put("maxCalories", listOf(maxCalories.toString()))
                }
                if (minCarbs != null) {
                    put("minCarbs", listOf(minCarbs.toString()))
                }
                if (maxCarbs != null) {
                    put("maxCarbs", listOf(maxCarbs.toString()))
                }
                if (minProtein != null) {
                    put("minProtein", listOf(minProtein.toString()))
                }
                if (maxProtein != null) {
                    put("maxProtein", listOf(maxProtein.toString()))
                }
                if (minFat != null) {
                    put("minFat", listOf(minFat.toString()))
                }
                if (maxFat != null) {
                    put("maxFat", listOf(maxFat.toString()))
                }
                if (addProductInformation != null) {
                    put("addProductInformation", listOf(addProductInformation.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/products/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Search Grocery Products by UPC
     * Get information about a packaged food using its UPC.
     * @param upc The product&#39;s UPC.
     * @return SearchGroceryProductsByUPC200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun searchGroceryProductsByUPC(upc: java.math.BigDecimal) : SearchGroceryProductsByUPC200Response {
        val localVarResponse = searchGroceryProductsByUPCWithHttpInfo(upc = upc)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as SearchGroceryProductsByUPC200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Search Grocery Products by UPC
     * Get information about a packaged food using its UPC.
     * @param upc The product&#39;s UPC.
     * @return ApiResponse<SearchGroceryProductsByUPC200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun searchGroceryProductsByUPCWithHttpInfo(upc: java.math.BigDecimal) : ApiResponse<SearchGroceryProductsByUPC200Response?> {
        val localVariableConfig = searchGroceryProductsByUPCRequestConfig(upc = upc)

        return request<Unit, SearchGroceryProductsByUPC200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation searchGroceryProductsByUPC
     *
     * @param upc The product&#39;s UPC.
     * @return RequestConfig
     */
    fun searchGroceryProductsByUPCRequestConfig(upc: java.math.BigDecimal) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/products/upc/{upc}".replace("{"+"upc"+"}", encodeURIComponent(upc.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Product Nutrition by ID Widget
     * Visualize a product&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeProductNutritionByID(id: kotlin.Int, defaultCss: kotlin.Boolean? = true) : kotlin.String {
        val localVarResponse = visualizeProductNutritionByIDWithHttpInfo(id = id, defaultCss = defaultCss)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Product Nutrition by ID Widget
     * Visualize a product&#39;s nutritional information as HTML including CSS.
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeProductNutritionByIDWithHttpInfo(id: kotlin.Int, defaultCss: kotlin.Boolean?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeProductNutritionByIDRequestConfig(id = id, defaultCss = defaultCss)

        return request<Unit, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeProductNutritionByID
     *
     * @param id The item&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response. (optional, default to true)
     * @return RequestConfig
     */
    fun visualizeProductNutritionByIDRequestConfig(id: kotlin.Int, defaultCss: kotlin.Boolean?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (defaultCss != null) {
                    put("defaultCss", listOf(defaultCss.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/products/{id}/nutritionWidget".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
