/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import io.kotlintest.shouldBe
import io.kotlintest.specs.ShouldSpec

import com.spoonacular.MenuItemsApi
import com.spoonacular.client.model.AutocompleteMenuItemSearch200Response
import com.spoonacular.client.model.GetMenuItemInformation200Response
import com.spoonacular.client.model.SearchMenuItems200Response

class MenuItemsApiTest : ShouldSpec() {
    init {
        // uncomment below to create an instance of MenuItemsApi
        //val apiInstance = MenuItemsApi()

        // to test autocompleteMenuItemSearch
        should("test autocompleteMenuItemSearch") {
            // uncomment below to test autocompleteMenuItemSearch
            //val query : kotlin.String = chicke // kotlin.String | The (partial) search query.
            //val number : java.math.BigDecimal = 10 // java.math.BigDecimal | The number of results to return (between 1 and 25).
            //val result : AutocompleteMenuItemSearch200Response = apiInstance.autocompleteMenuItemSearch(query, number)
            //result shouldBe ("TODO")
        }

        // to test getMenuItemInformation
        should("test getMenuItemInformation") {
            // uncomment below to test getMenuItemInformation
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val result : GetMenuItemInformation200Response = apiInstance.getMenuItemInformation(id)
            //result shouldBe ("TODO")
        }

        // to test menuItemNutritionByIDImage
        should("test menuItemNutritionByIDImage") {
            // uncomment below to test menuItemNutritionByIDImage
            //val id : java.math.BigDecimal = 424571 // java.math.BigDecimal | The menu item id.
            //val result : java.io.File = apiInstance.menuItemNutritionByIDImage(id)
            //result shouldBe ("TODO")
        }

        // to test menuItemNutritionLabelImage
        should("test menuItemNutritionLabelImage") {
            // uncomment below to test menuItemNutritionLabelImage
            //val id : java.math.BigDecimal = 342313 // java.math.BigDecimal | The menu item id.
            //val showOptionalNutrients : kotlin.Boolean = false // kotlin.Boolean | Whether to show optional nutrients.
            //val showZeroValues : kotlin.Boolean = false // kotlin.Boolean | Whether to show zero values.
            //val showIngredients : kotlin.Boolean = false // kotlin.Boolean | Whether to show a list of ingredients.
            //val result : java.io.File = apiInstance.menuItemNutritionLabelImage(id, showOptionalNutrients, showZeroValues, showIngredients)
            //result shouldBe ("TODO")
        }

        // to test menuItemNutritionLabelWidget
        should("test menuItemNutritionLabelWidget") {
            // uncomment below to test menuItemNutritionLabelWidget
            //val id : java.math.BigDecimal = 342313 // java.math.BigDecimal | The menu item id.
            //val defaultCss : kotlin.Boolean = false // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val showOptionalNutrients : kotlin.Boolean = false // kotlin.Boolean | Whether to show optional nutrients.
            //val showZeroValues : kotlin.Boolean = false // kotlin.Boolean | Whether to show zero values.
            //val showIngredients : kotlin.Boolean = false // kotlin.Boolean | Whether to show a list of ingredients.
            //val result : kotlin.String = apiInstance.menuItemNutritionLabelWidget(id, defaultCss, showOptionalNutrients, showZeroValues, showIngredients)
            //result shouldBe ("TODO")
        }

        // to test searchMenuItems
        should("test searchMenuItems") {
            // uncomment below to test searchMenuItems
            //val query : kotlin.String = burger // kotlin.String | The (natural language) search query.
            //val minCalories : java.math.BigDecimal = 50 // java.math.BigDecimal | The minimum amount of calories the menu item must have.
            //val maxCalories : java.math.BigDecimal = 800 // java.math.BigDecimal | The maximum amount of calories the menu item can have.
            //val minCarbs : java.math.BigDecimal = 10 // java.math.BigDecimal | The minimum amount of carbohydrates in grams the menu item must have.
            //val maxCarbs : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of carbohydrates in grams the menu item can have.
            //val minProtein : java.math.BigDecimal = 10 // java.math.BigDecimal | The minimum amount of protein in grams the menu item must have.
            //val maxProtein : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of protein in grams the menu item can have.
            //val minFat : java.math.BigDecimal = 1 // java.math.BigDecimal | The minimum amount of fat in grams the menu item must have.
            //val maxFat : java.math.BigDecimal = 100 // java.math.BigDecimal | The maximum amount of fat in grams the menu item can have.
            //val addMenuItemInformation : kotlin.Boolean = true // kotlin.Boolean | If set to true, you get more information about the menu items returned.
            //val offset : kotlin.Int = 56 // kotlin.Int | The number of results to skip (between 0 and 900).
            //val number : kotlin.Int = 10 // kotlin.Int | The maximum number of items to return (between 1 and 100). Defaults to 10.
            //val result : SearchMenuItems200Response = apiInstance.searchMenuItems(query, minCalories, maxCalories, minCarbs, maxCarbs, minProtein, maxProtein, minFat, maxFat, addMenuItemInformation, offset, number)
            //result shouldBe ("TODO")
        }

        // to test visualizeMenuItemNutritionByID
        should("test visualizeMenuItemNutritionByID") {
            // uncomment below to test visualizeMenuItemNutritionByID
            //val id : kotlin.Int = 1 // kotlin.Int | The item's id.
            //val defaultCss : kotlin.Boolean = false // kotlin.Boolean | Whether the default CSS should be added to the response.
            //val result : kotlin.String = apiInstance.visualizeMenuItemNutritionByID(id, defaultCss)
            //result shouldBe ("TODO")
        }

    }
}
