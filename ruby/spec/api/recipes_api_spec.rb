=begin
#spoonacular API

#The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.1
Contact: mail@spoonacular.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0-SNAPSHOT

=end

require 'spec_helper'
require 'json'

# Unit tests for OpenapiClient::RecipesApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'RecipesApi' do
  before do
    # run before each test
    @api_instance = OpenapiClient::RecipesApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of RecipesApi' do
    it 'should create an instance of RecipesApi' do
      expect(@api_instance).to be_instance_of(OpenapiClient::RecipesApi)
    end
  end

  # unit tests for analyze_a_recipe_search_query
  # Analyze a Recipe Search Query
  # Parse a recipe search query to find out its intention.
  # @param q The recipe search query.
  # @param [Hash] opts the optional parameters
  # @return [AnalyzeARecipeSearchQuery200Response]
  describe 'analyze_a_recipe_search_query test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for analyze_recipe_instructions
  # Analyze Recipe Instructions
  # This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe&#39;s instructions will be extracted independently of the step they&#39;re used in.
  # @param instructions The recipe&#39;s instructions.
  # @param [Hash] opts the optional parameters
  # @return [AnalyzeRecipeInstructions200Response]
  describe 'analyze_recipe_instructions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for autocomplete_recipe_search
  # Autocomplete Recipe Search
  # Autocomplete a partial input to suggest possible recipe names.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :query The (natural language) search query.
  # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10.
  # @return [Array<AutocompleteRecipeSearch200ResponseInner>]
  describe 'autocomplete_recipe_search test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for classify_cuisine
  # Classify Cuisine
  # Classify the recipe&#39;s cuisine.
  # @param title The title of the recipe.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  # @param [Hash] opts the optional parameters
  # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
  # @return [ClassifyCuisine200Response]
  describe 'classify_cuisine test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for compute_glycemic_load
  # Compute Glycemic Load
  # Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
  # @param compute_glycemic_load_request 
  # @param [Hash] opts the optional parameters
  # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
  # @return [ComputeGlycemicLoad200Response]
  describe 'compute_glycemic_load test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for convert_amounts
  # Convert Amounts
  # Convert amounts like \&quot;2 cups of flour to grams\&quot;.
  # @param ingredient_name The ingredient which you want to convert.
  # @param source_amount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
  # @param source_unit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
  # @param target_unit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
  # @param [Hash] opts the optional parameters
  # @return [ConvertAmounts200Response]
  describe 'convert_amounts test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for create_recipe_card
  # Create Recipe Card
  # Generate a recipe card for a recipe.
  # @param title The title of the recipe.
  # @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  # @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
  # @param ready_in_minutes The number of minutes it takes to get the recipe on the table.
  # @param servings The number of servings the recipe makes.
  # @param mask The mask to put over the recipe image (&#39;ellipseMask&#39;, &#39;diamondMask&#39;, &#39;starMask&#39;, &#39;heartMask&#39;, &#39;potMask&#39;, &#39;fishMask&#39;).
  # @param background_image The background image (&#39;none&#39;, &#39;background1&#39;, or &#39;background2&#39;).
  # @param [Hash] opts the optional parameters
  # @option opts [File] :image The binary image of the recipe as jpg.
  # @option opts [String] :image_url If you do not sent a binary image you can also pass the image URL.
  # @option opts [String] :author The author of the recipe.
  # @option opts [String] :background_color The background color for the recipe card as a hex-string.
  # @option opts [String] :font_color The font color for the recipe card as a hex-string.
  # @option opts [String] :source The source of the recipe.
  # @return [CreateRecipeCard200Response]
  describe 'create_recipe_card test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for equipment_by_id_image
  # Equipment by ID Image
  # Visualize a recipe&#39;s equipment list as an image.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'equipment_by_id_image test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for extract_recipe_from_website
  # Extract Recipe from Website
  # This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
  # @param url The URL of the recipe page.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :force_extraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
  # @option opts [Boolean] :analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
  # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
  # @option opts [Boolean] :include_taste Whether taste data should be added to correctly parsed ingredients.
  # @return [GetRecipeInformation200Response]
  describe 'extract_recipe_from_website test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_analyzed_recipe_instructions
  # Get Analyzed Recipe Instructions
  # Get an analyzed breakdown of a recipe&#39;s instructions. Each step is enriched with the ingredients and equipment required.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :step_breakdown Whether to break down the recipe steps even more.
  # @return [GetAnalyzedRecipeInstructions200Response]
  describe 'get_analyzed_recipe_instructions test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_random_recipes
  # Get Random Recipes
  # Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
  # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
  # @option opts [String] :include_tags A comma-separated list of tags that the random recipe(s) must adhere to.
  # @option opts [String] :exclude_tags A comma-separated list of tags that the random recipe(s) must not adhere to.
  # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10.
  # @return [GetRandomRecipes200Response]
  describe 'get_random_recipes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_recipe_equipment_by_id
  # Equipment by ID
  # Get a recipe&#39;s equipment list.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @return [GetRecipeEquipmentByID200Response]
  describe 'get_recipe_equipment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_recipe_information
  # Get Recipe Information
  # Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
  # @return [GetRecipeInformation200Response]
  describe 'get_recipe_information test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_recipe_information_bulk
  # Get Recipe Information Bulk
  # Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
  # @param ids A comma-separated list of recipe ids.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :include_nutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
  # @return [Array<GetRecipeInformationBulk200ResponseInner>]
  describe 'get_recipe_information_bulk test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_recipe_ingredients_by_id
  # Ingredients by ID
  # Get a recipe&#39;s ingredient list.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @return [GetRecipeIngredientsByID200Response]
  describe 'get_recipe_ingredients_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_recipe_nutrition_widget_by_id
  # Nutrition by ID
  # Get a recipe&#39;s nutrition data.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @return [GetRecipeNutritionWidgetByID200Response]
  describe 'get_recipe_nutrition_widget_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_recipe_price_breakdown_by_id
  # Price Breakdown by ID
  # Get a recipe&#39;s price breakdown data.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @return [GetRecipePriceBreakdownByID200Response]
  describe 'get_recipe_price_breakdown_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_recipe_taste_by_id
  # Taste by ID
  # Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :normalize Normalize to the strongest taste.
  # @return [GetRecipeTasteByID200Response]
  describe 'get_recipe_taste_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for get_similar_recipes
  # Get Similar Recipes
  # Find recipes which are similar to the given one.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10.
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
  # @return [Array<GetSimilarRecipes200ResponseInner>]
  describe 'get_similar_recipes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for guess_nutrition_by_dish_name
  # Guess Nutrition by Dish Name
  # Estimate the macronutrients of a dish based on its title.
  # @param title The title of the dish.
  # @param [Hash] opts the optional parameters
  # @return [GuessNutritionByDishName200Response]
  describe 'guess_nutrition_by_dish_name test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for parse_ingredients
  # Parse Ingredients
  # Extract an ingredient from plain text.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line.
  # @param servings The number of servings that you can make from the ingredients.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
  # @option opts [Boolean] :include_nutrition 
  # @return [Array<ParseIngredients200ResponseInner>]
  describe 'parse_ingredients test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for price_breakdown_by_id_image
  # Price Breakdown by ID Image
  # Visualize a recipe&#39;s price breakdown.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'price_breakdown_by_id_image test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for quick_answer
  # Quick Answer
  # Answer a nutrition related natural language question.
  # @param q The nutrition related question.
  # @param [Hash] opts the optional parameters
  # @return [QuickAnswer200Response]
  describe 'quick_answer test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for recipe_nutrition_by_id_image
  # Recipe Nutrition by ID Image
  # Visualize a recipe&#39;s nutritional information as an image.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @return [File]
  describe 'recipe_nutrition_by_id_image test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for recipe_nutrition_label_image
  # Recipe Nutrition Label Image
  # Get a recipe&#39;s nutrition label as an image.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
  # @option opts [Boolean] :show_zero_values Whether to show zero values.
  # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
  # @return [File]
  describe 'recipe_nutrition_label_image test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for recipe_nutrition_label_widget
  # Recipe Nutrition Label Widget
  # Get a recipe&#39;s nutrition label as an HTML widget.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @option opts [Boolean] :show_optional_nutrients Whether to show optional nutrients.
  # @option opts [Boolean] :show_zero_values Whether to show zero values.
  # @option opts [Boolean] :show_ingredients Whether to show a list of ingredients.
  # @return [String]
  describe 'recipe_nutrition_label_widget test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for recipe_taste_by_id_image
  # Recipe Taste by ID Image
  # Get a recipe&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
  # @param id The recipe id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :normalize Normalize to the strongest taste.
  # @option opts [String] :rgb Red, green, blue values for the chart color.
  # @return [File]
  describe 'recipe_taste_by_id_image test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_recipes
  # Search Recipes
  # Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :query The (natural language) search query.
  # @option opts [String] :cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as &#39;OR&#39;). See a full list of supported cuisines.
  # @option opts [String] :exclude_cuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as &#39;AND&#39;). See a full list of supported cuisines.
  # @option opts [String] :diet The diet for which the recipes must be suitable. See a full list of supported diets.
  # @option opts [String] :intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
  # @option opts [String] :equipment The equipment required. Multiple values will be interpreted as &#39;or&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
  # @option opts [String] :include_ingredients A comma-separated list of ingredients that should/must be used in the recipes.
  # @option opts [String] :exclude_ingredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
  # @option opts [String] :type The type of recipe. See a full list of supported meal types.
  # @option opts [Boolean] :instructions_required Whether the recipes must have instructions.
  # @option opts [Boolean] :fill_ingredients Add information about the ingredients and whether they are used or missing in relation to the query.
  # @option opts [Boolean] :add_recipe_information If set to true, you get more information about the recipes returned.
  # @option opts [Boolean] :add_recipe_nutrition If set to true, you get nutritional information about each recipes returned.
  # @option opts [String] :author The username of the recipe author.
  # @option opts [String] :tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
  # @option opts [Float] :recipe_box_id The id of the recipe box to which the search should be limited to.
  # @option opts [String] :title_match Enter text that must be found in the title of the recipes.
  # @option opts [Float] :max_ready_time The maximum time in minutes it should take to prepare and cook the recipe.
  # @option opts [Float] :min_servings The minimum amount of servings the recipe is for.
  # @option opts [Float] :max_servings The maximum amount of servings the recipe is for.
  # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
  # @option opts [String] :sort The strategy to sort recipes by. See a full list of supported sorting options.
  # @option opts [String] :sort_direction The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending).
  # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
  # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
  # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
  # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
  # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
  # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
  # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
  # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
  # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
  # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
  # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
  # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
  # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
  # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
  # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
  # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
  # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
  # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
  # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
  # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
  # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
  # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
  # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
  # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
  # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
  # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
  # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
  # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
  # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
  # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
  # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
  # @option opts [Float] :min_folate The minimum amount of folate in micrograms the recipe must have.
  # @option opts [Float] :max_folate The maximum amount of folate in micrograms the recipe can have.
  # @option opts [Float] :min_folic_acid The minimum amount of folic acid in micrograms the recipe must have.
  # @option opts [Float] :max_folic_acid The maximum amount of folic acid in micrograms the recipe can have.
  # @option opts [Float] :min_iodine The minimum amount of iodine in micrograms the recipe must have.
  # @option opts [Float] :max_iodine The maximum amount of iodine in micrograms the recipe can have.
  # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
  # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
  # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
  # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
  # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
  # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
  # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
  # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
  # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
  # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
  # @option opts [Float] :min_selenium The minimum amount of selenium in micrograms the recipe must have.
  # @option opts [Float] :max_selenium The maximum amount of selenium in micrograms the recipe can have.
  # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
  # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
  # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
  # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
  # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
  # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
  # @option opts [Integer] :offset The number of results to skip (between 0 and 900).
  # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10.
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
  # @return [SearchRecipes200Response]
  describe 'search_recipes test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_recipes_by_ingredients
  # Search Recipes by Ingredients
  #  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don&#39;t currently have (post shopping).         
  # @param [Hash] opts the optional parameters
  # @option opts [String] :ingredients A comma-separated list of ingredients that the recipes should contain.
  # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10.
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
  # @option opts [Float] :ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
  # @option opts [Boolean] :ignore_pantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
  # @return [Array<SearchRecipesByIngredients200ResponseInner>]
  describe 'search_recipes_by_ingredients test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for search_recipes_by_nutrients
  # Search Recipes by Nutrients
  # Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
  # @param [Hash] opts the optional parameters
  # @option opts [Float] :min_carbs The minimum amount of carbohydrates in grams the recipe must have.
  # @option opts [Float] :max_carbs The maximum amount of carbohydrates in grams the recipe can have.
  # @option opts [Float] :min_protein The minimum amount of protein in grams the recipe must have.
  # @option opts [Float] :max_protein The maximum amount of protein in grams the recipe can have.
  # @option opts [Float] :min_calories The minimum amount of calories the recipe must have.
  # @option opts [Float] :max_calories The maximum amount of calories the recipe can have.
  # @option opts [Float] :min_fat The minimum amount of fat in grams the recipe must have.
  # @option opts [Float] :max_fat The maximum amount of fat in grams the recipe can have.
  # @option opts [Float] :min_alcohol The minimum amount of alcohol in grams the recipe must have.
  # @option opts [Float] :max_alcohol The maximum amount of alcohol in grams the recipe can have.
  # @option opts [Float] :min_caffeine The minimum amount of caffeine in milligrams the recipe must have.
  # @option opts [Float] :max_caffeine The maximum amount of caffeine in milligrams the recipe can have.
  # @option opts [Float] :min_copper The minimum amount of copper in milligrams the recipe must have.
  # @option opts [Float] :max_copper The maximum amount of copper in milligrams the recipe can have.
  # @option opts [Float] :min_calcium The minimum amount of calcium in milligrams the recipe must have.
  # @option opts [Float] :max_calcium The maximum amount of calcium in milligrams the recipe can have.
  # @option opts [Float] :min_choline The minimum amount of choline in milligrams the recipe must have.
  # @option opts [Float] :max_choline The maximum amount of choline in milligrams the recipe can have.
  # @option opts [Float] :min_cholesterol The minimum amount of cholesterol in milligrams the recipe must have.
  # @option opts [Float] :max_cholesterol The maximum amount of cholesterol in milligrams the recipe can have.
  # @option opts [Float] :min_fluoride The minimum amount of fluoride in milligrams the recipe must have.
  # @option opts [Float] :max_fluoride The maximum amount of fluoride in milligrams the recipe can have.
  # @option opts [Float] :min_saturated_fat The minimum amount of saturated fat in grams the recipe must have.
  # @option opts [Float] :max_saturated_fat The maximum amount of saturated fat in grams the recipe can have.
  # @option opts [Float] :min_vitamin_a The minimum amount of Vitamin A in IU the recipe must have.
  # @option opts [Float] :max_vitamin_a The maximum amount of Vitamin A in IU the recipe can have.
  # @option opts [Float] :min_vitamin_c The minimum amount of Vitamin C in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_c The maximum amount of Vitamin C in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_d The minimum amount of Vitamin D in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_d The maximum amount of Vitamin D in micrograms the recipe can have.
  # @option opts [Float] :min_vitamin_e The minimum amount of Vitamin E in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_e The maximum amount of Vitamin E in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_k The minimum amount of Vitamin K in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_k The maximum amount of Vitamin K in micrograms the recipe can have.
  # @option opts [Float] :min_vitamin_b1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
  # @option opts [Float] :max_vitamin_b6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
  # @option opts [Float] :min_vitamin_b12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
  # @option opts [Float] :max_vitamin_b12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
  # @option opts [Float] :min_fiber The minimum amount of fiber in grams the recipe must have.
  # @option opts [Float] :max_fiber The maximum amount of fiber in grams the recipe can have.
  # @option opts [Float] :min_folate The minimum amount of folate in micrograms the recipe must have.
  # @option opts [Float] :max_folate The maximum amount of folate in micrograms the recipe can have.
  # @option opts [Float] :min_folic_acid The minimum amount of folic acid in micrograms the recipe must have.
  # @option opts [Float] :max_folic_acid The maximum amount of folic acid in micrograms the recipe can have.
  # @option opts [Float] :min_iodine The minimum amount of iodine in micrograms the recipe must have.
  # @option opts [Float] :max_iodine The maximum amount of iodine in micrograms the recipe can have.
  # @option opts [Float] :min_iron The minimum amount of iron in milligrams the recipe must have.
  # @option opts [Float] :max_iron The maximum amount of iron in milligrams the recipe can have.
  # @option opts [Float] :min_magnesium The minimum amount of magnesium in milligrams the recipe must have.
  # @option opts [Float] :max_magnesium The maximum amount of magnesium in milligrams the recipe can have.
  # @option opts [Float] :min_manganese The minimum amount of manganese in milligrams the recipe must have.
  # @option opts [Float] :max_manganese The maximum amount of manganese in milligrams the recipe can have.
  # @option opts [Float] :min_phosphorus The minimum amount of phosphorus in milligrams the recipe must have.
  # @option opts [Float] :max_phosphorus The maximum amount of phosphorus in milligrams the recipe can have.
  # @option opts [Float] :min_potassium The minimum amount of potassium in milligrams the recipe must have.
  # @option opts [Float] :max_potassium The maximum amount of potassium in milligrams the recipe can have.
  # @option opts [Float] :min_selenium The minimum amount of selenium in micrograms the recipe must have.
  # @option opts [Float] :max_selenium The maximum amount of selenium in micrograms the recipe can have.
  # @option opts [Float] :min_sodium The minimum amount of sodium in milligrams the recipe must have.
  # @option opts [Float] :max_sodium The maximum amount of sodium in milligrams the recipe can have.
  # @option opts [Float] :min_sugar The minimum amount of sugar in grams the recipe must have.
  # @option opts [Float] :max_sugar The maximum amount of sugar in grams the recipe can have.
  # @option opts [Float] :min_zinc The minimum amount of zinc in milligrams the recipe must have.
  # @option opts [Float] :max_zinc The maximum amount of zinc in milligrams the recipe can have.
  # @option opts [Integer] :offset The number of results to skip (between 0 and 900).
  # @option opts [Integer] :number The maximum number of items to return (between 1 and 100). Defaults to 10.
  # @option opts [Boolean] :random If true, every request will give you a random set of recipes within the requested limits.
  # @option opts [Boolean] :limit_license Whether the recipes should have an open license that allows display with proper attribution.
  # @return [Array<SearchRecipesByNutrients200ResponseInner>]
  describe 'search_recipes_by_nutrients test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for summarize_recipe
  # Summarize Recipe
  # Automatically generate a short description that summarizes key information about the recipe.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @return [SummarizeRecipe200Response]
  describe 'summarize_recipe test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for visualize_equipment
  # Equipment Widget
  # Visualize the equipment used to make a recipe.
  # @param instructions The recipe&#39;s instructions.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :view How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;.
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  # @return [String]
  describe 'visualize_equipment test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for visualize_price_breakdown
  # Price Breakdown Widget
  # Visualize the price breakdown of a recipe.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line.
  # @param servings The number of servings.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
  # @option opts [Float] :mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  # @return [String]
  describe 'visualize_price_breakdown test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for visualize_recipe_equipment_by_id
  # Equipment by ID Widget
  # Visualize a recipe&#39;s equipment list.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @return [String]
  describe 'visualize_recipe_equipment_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for visualize_recipe_ingredients_by_id
  # Ingredients by ID Widget
  # Visualize a recipe&#39;s ingredient list.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @option opts [String] :measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;.
  # @return [String]
  describe 'visualize_recipe_ingredients_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for visualize_recipe_nutrition
  # Recipe Nutrition Widget
  # Visualize a recipe&#39;s nutritional information as HTML including CSS.
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line.
  # @param servings The number of servings.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @option opts [Boolean] :show_backlink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
  # @return [String]
  describe 'visualize_recipe_nutrition test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for visualize_recipe_nutrition_by_id
  # Recipe Nutrition by ID Widget
  # Visualize a recipe&#39;s nutritional information as HTML including CSS.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @return [String]
  describe 'visualize_recipe_nutrition_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for visualize_recipe_price_breakdown_by_id
  # Price Breakdown by ID Widget
  # Visualize a recipe&#39;s price breakdown.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :default_css Whether the default CSS should be added to the response.
  # @return [String]
  describe 'visualize_recipe_price_breakdown_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for visualize_recipe_taste
  # Recipe Taste Widget
  # Visualize a recipe&#39;s taste information as HTML including CSS. You can play around with that endpoint!
  # @param ingredient_list The ingredient list of the recipe, one ingredient per line.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :language The language of the input. Either &#39;en&#39; or &#39;de&#39;.
  # @option opts [Boolean] :normalize Normalize to the strongest taste.
  # @option opts [String] :rgb Red, green, blue values for the chart color.
  # @return [String]
  describe 'visualize_recipe_taste test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for visualize_recipe_taste_by_id
  # Recipe Taste by ID Widget
  # Get a recipe&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
  # @param id The item&#39;s id.
  # @param [Hash] opts the optional parameters
  # @option opts [Boolean] :normalize Whether to normalize to the strongest taste.
  # @option opts [String] :rgb Red, green, blue values for the chart color.
  # @return [String]
  describe 'visualize_recipe_taste_by_id test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
