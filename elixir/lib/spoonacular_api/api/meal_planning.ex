# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule SpoonacularAPI.Api.MealPlanning do
  @moduledoc """
  API calls for all endpoints tagged `MealPlanning`.
  """

  alias SpoonacularAPI.Connection
  import SpoonacularAPI.RequestBuilder

  @doc """
  Add Meal Plan Template
  Add a meal plan template for a user.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.AddMealPlanTemplate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_meal_plan_template(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.AddMealPlanTemplate200Response.t} | {:error, Tesla.Env.t}
  def add_meal_plan_template(connection, username, hash, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/mealplanner/#{username}/templates")
      |> add_param(:query, :hash, hash)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.AddMealPlanTemplate200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Add to Meal Plan
  Add an item to the user's meal plan.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `hash` (String.t): The private hash for the username.
  - `add_to_meal_plan_request` (AddToMealPlanRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_to_meal_plan(Tesla.Env.client, String.t, String.t, SpoonacularAPI.Model.AddToMealPlanRequest.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def add_to_meal_plan(connection, username, hash, add_to_meal_plan_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/mealplanner/#{username}/items")
      |> add_param(:query, :hash, hash)
      |> add_param(:body, :body, add_to_meal_plan_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Add to Shopping List
  Add an item to the current shopping list of a user.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `hash` (String.t): The private hash for the username.
  - `add_to_shopping_list_request` (AddToShoppingListRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GenerateShoppingList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec add_to_shopping_list(Tesla.Env.client, String.t, String.t, SpoonacularAPI.Model.AddToShoppingListRequest.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GenerateShoppingList200Response.t} | {:error, Tesla.Env.t}
  def add_to_shopping_list(connection, username, hash, add_to_shopping_list_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/mealplanner/#{username}/shopping-list/items")
      |> add_param(:query, :hash, hash)
      |> add_param(:body, :body, add_to_shopping_list_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GenerateShoppingList200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Clear Meal Plan Day
  Delete all planned items from the user's meal plan for a specific day.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `date` (String.t): The date in the format yyyy-mm-dd.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec clear_meal_plan_day(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def clear_meal_plan_day(connection, username, date, hash, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/mealplanner/#{username}/day/#{date}")
      |> add_param(:query, :hash, hash)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Connect User
  In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `connect_user_request` (ConnectUserRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.ConnectUser200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec connect_user(Tesla.Env.client, SpoonacularAPI.Model.ConnectUserRequest.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.ConnectUser200Response.t} | {:error, Tesla.Env.t}
  def connect_user(connection, connect_user_request, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/users/connect")
      |> add_param(:body, :body, connect_user_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.ConnectUser200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Delete from Meal Plan
  Delete an item from the user's meal plan.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `id` (float()): The shopping list item id.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_from_meal_plan(Tesla.Env.client, String.t, float(), String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def delete_from_meal_plan(connection, username, id, hash, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/mealplanner/#{username}/items/#{id}")
      |> add_param(:query, :hash, hash)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Delete from Shopping List
  Delete an item from the current shopping list of the user.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `id` (integer()): The item's id.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_from_shopping_list(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def delete_from_shopping_list(connection, username, id, hash, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/mealplanner/#{username}/shopping-list/items/#{id}")
      |> add_param(:query, :hash, hash)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Delete Meal Plan Template
  Delete a meal plan template for a user.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `id` (integer()): The item's id.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, map()}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec delete_meal_plan_template(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, map()} | {:ok, nil} | {:error, Tesla.Env.t}
  def delete_meal_plan_template(connection, username, id, hash, _opts \\ []) do
    request =
      %{}
      |> method(:delete)
      |> url("/mealplanner/#{username}/templates/#{id}")
      |> add_param(:query, :hash, hash)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, %{}},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Generate Meal Plan
  Generate a meal plan with three meals per day (breakfast, lunch, and dinner).

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:timeFrame` (String.t): Either for one \"day\" or an entire \"week\".
    - `:targetCalories` (float()): What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
    - `:diet` (String.t): Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
    - `:exclude` (String.t): A comma-separated list of allergens or ingredients that must be excluded.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GenerateMealPlan200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec generate_meal_plan(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GenerateMealPlan200Response.t} | {:error, Tesla.Env.t}
  def generate_meal_plan(connection, opts \\ []) do
    optional_params = %{
      :timeFrame => :query,
      :targetCalories => :query,
      :diet => :query,
      :exclude => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/mealplanner/generate")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GenerateMealPlan200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Generate Shopping List
  Generate the shopping list for a user from the meal planner in a given time frame.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `start_date` (String.t): The start date in the format yyyy-mm-dd.
  - `end_date` (String.t): The end date in the format yyyy-mm-dd.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GenerateShoppingList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec generate_shopping_list(Tesla.Env.client, String.t, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GenerateShoppingList200Response.t} | {:error, Tesla.Env.t}
  def generate_shopping_list(connection, username, start_date, end_date, hash, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/mealplanner/#{username}/shopping-list/#{start_date}/#{end_date}")
      |> add_param(:query, :hash, hash)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GenerateShoppingList200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Meal Plan Template
  Get information about a meal plan template.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `id` (integer()): The item's id.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetMealPlanTemplate200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_meal_plan_template(Tesla.Env.client, String.t, integer(), String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetMealPlanTemplate200Response.t} | {:error, Tesla.Env.t}
  def get_meal_plan_template(connection, username, id, hash, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mealplanner/#{username}/templates/#{id}")
      |> add_param(:query, :hash, hash)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetMealPlanTemplate200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Meal Plan Templates
  Get meal plan templates from user or public ones.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetMealPlanTemplates200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_meal_plan_templates(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, SpoonacularAPI.Model.GetMealPlanTemplates200Response.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def get_meal_plan_templates(connection, username, hash, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mealplanner/#{username}/templates")
      |> add_param(:query, :hash, hash)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetMealPlanTemplates200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Meal Plan Week
  Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `start_date` (String.t): The start date of the meal planned week in the format yyyy-mm-dd.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetMealPlanWeek200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_meal_plan_week(Tesla.Env.client, String.t, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetMealPlanWeek200Response.t} | {:error, Tesla.Env.t}
  def get_meal_plan_week(connection, username, start_date, hash, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mealplanner/#{username}/week/#{start_date}")
      |> add_param(:query, :hash, hash)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetMealPlanWeek200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Shopping List
  Get the current shopping list for the given user.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetShoppingList200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_shopping_list(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetShoppingList200Response.t} | {:error, Tesla.Env.t}
  def get_shopping_list(connection, username, hash, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/mealplanner/#{username}/shopping-list")
      |> add_param(:query, :hash, hash)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetShoppingList200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end
end
