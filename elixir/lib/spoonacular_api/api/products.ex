# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule SpoonacularAPI.Api.Products do
  @moduledoc """
  API calls for all endpoints tagged `Products`.
  """

  alias SpoonacularAPI.Connection
  import SpoonacularAPI.RequestBuilder

  @doc """
  Autocomplete Product Search
  Generate suggestions for grocery products based on a (partial) query. The matches will be found by looking in the title only.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `query` (String.t): The (partial) search query.
  - `opts` (keyword): Optional parameters
    - `:number` (integer()): The number of results to return (between 1 and 25).

  ### Returns

  - `{:ok, SpoonacularAPI.Model.AutocompleteProductSearch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec autocomplete_product_search(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.AutocompleteProductSearch200Response.t} | {:error, Tesla.Env.t}
  def autocomplete_product_search(connection, query, opts \\ []) do
    optional_params = %{
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/products/suggest")
      |> add_param(:query, :query, query)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.AutocompleteProductSearch200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Classify Grocery Product
  This endpoint allows you to match a packaged food to a basic category, e.g. a specific brand of milk to the category milk.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `classify_grocery_product_request` (ClassifyGroceryProductRequest): 
  - `opts` (keyword): Optional parameters
    - `:locale` (String.t): The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).

  ### Returns

  - `{:ok, SpoonacularAPI.Model.ClassifyGroceryProduct200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec classify_grocery_product(Tesla.Env.client, SpoonacularAPI.Model.ClassifyGroceryProductRequest.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.ClassifyGroceryProduct200Response.t} | {:error, Tesla.Env.t}
  def classify_grocery_product(connection, classify_grocery_product_request, opts \\ []) do
    optional_params = %{
      :locale => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/food/products/classify")
      |> add_param(:body, :body, classify_grocery_product_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.ClassifyGroceryProduct200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Classify Grocery Product Bulk
  Provide a set of product jsons, get back classified products.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `classify_grocery_product_bulk_request_inner` ([SpoonacularAPI.Model.ClassifyGroceryProductBulkRequestInner.t]): 
  - `opts` (keyword): Optional parameters
    - `:locale` (String.t): The display name of the returned category, supported is en_US (for American English) and en_GB (for British English).

  ### Returns

  - `{:ok, [%ClassifyGroceryProductBulk200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec classify_grocery_product_bulk(Tesla.Env.client, list(SpoonacularAPI.Model.ClassifyGroceryProductBulkRequestInner.t), keyword()) :: {:ok, nil} | {:ok, [SpoonacularAPI.Model.ClassifyGroceryProductBulk200ResponseInner.t]} | {:error, Tesla.Env.t}
  def classify_grocery_product_bulk(connection, classify_grocery_product_bulk_request_inner, opts \\ []) do
    optional_params = %{
      :locale => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/food/products/classifyBatch")
      |> add_param(:body, :body, classify_grocery_product_bulk_request_inner)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.ClassifyGroceryProductBulk200ResponseInner},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Comparable Products
  Find comparable products to the given one.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `upc` (float()): The UPC of the product for which you want to find comparable products.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetComparableProducts200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_comparable_products(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetComparableProducts200Response.t} | {:error, Tesla.Env.t}
  def get_comparable_products(connection, upc, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/products/upc/#{upc}/comparable")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetComparableProducts200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Product Information
  Use a product id to get full information about a product, such as ingredients, nutrition, etc. The nutritional information is per serving.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetProductInformation200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_product_information(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetProductInformation200Response.t} | {:error, Tesla.Env.t}
  def get_product_information(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/products/#{id}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetProductInformation200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Product Nutrition by ID Image
  Visualize a product's nutritional information as an image.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (float()): The id of the product.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_nutrition_by_id_image(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def product_nutrition_by_id_image(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/products/#{id}/nutritionWidget.png")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Product Nutrition Label Image
  Get a product's nutrition label as an image.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (float()): The product id.
  - `opts` (keyword): Optional parameters
    - `:showOptionalNutrients` (boolean()): Whether to show optional nutrients.
    - `:showZeroValues` (boolean()): Whether to show zero values.
    - `:showIngredients` (boolean()): Whether to show a list of ingredients.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_nutrition_label_image(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def product_nutrition_label_image(connection, id, opts \\ []) do
    optional_params = %{
      :showOptionalNutrients => :query,
      :showZeroValues => :query,
      :showIngredients => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/products/#{id}/nutritionLabel.png")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Product Nutrition Label Widget
  Get a product's nutrition label as an HTML widget.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (float()): The product id.
  - `opts` (keyword): Optional parameters
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.
    - `:showOptionalNutrients` (boolean()): Whether to show optional nutrients.
    - `:showZeroValues` (boolean()): Whether to show zero values.
    - `:showIngredients` (boolean()): Whether to show a list of ingredients.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec product_nutrition_label_widget(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def product_nutrition_label_widget(connection, id, opts \\ []) do
    optional_params = %{
      :defaultCss => :query,
      :showOptionalNutrients => :query,
      :showZeroValues => :query,
      :showIngredients => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/products/#{id}/nutritionLabel")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Search Grocery Products
  Search packaged food products, such as frozen pizza or Greek yogurt.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:query` (String.t): The (natural language) search query.
    - `:minCalories` (float()): The minimum amount of calories the product must have.
    - `:maxCalories` (float()): The maximum amount of calories the product can have.
    - `:minCarbs` (float()): The minimum amount of carbohydrates in grams the product must have.
    - `:maxCarbs` (float()): The maximum amount of carbohydrates in grams the product can have.
    - `:minProtein` (float()): The minimum amount of protein in grams the product must have.
    - `:maxProtein` (float()): The maximum amount of protein in grams the product can have.
    - `:minFat` (float()): The minimum amount of fat in grams the product must have.
    - `:maxFat` (float()): The maximum amount of fat in grams the product can have.
    - `:addProductInformation` (boolean()): If set to true, you get more information about the products returned.
    - `:offset` (integer()): The number of results to skip (between 0 and 900).
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.SearchGroceryProducts200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_grocery_products(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.SearchGroceryProducts200Response.t} | {:error, Tesla.Env.t}
  def search_grocery_products(connection, opts \\ []) do
    optional_params = %{
      :query => :query,
      :minCalories => :query,
      :maxCalories => :query,
      :minCarbs => :query,
      :maxCarbs => :query,
      :minProtein => :query,
      :maxProtein => :query,
      :minFat => :query,
      :maxFat => :query,
      :addProductInformation => :query,
      :offset => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/products/search")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SearchGroceryProducts200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Search Grocery Products by UPC
  Get information about a packaged food using its UPC.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `upc` (float()): The product's UPC.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.SearchGroceryProductsByUpc200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_grocery_products_by_upc(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.SearchGroceryProductsByUpc200Response.t} | {:error, Tesla.Env.t}
  def search_grocery_products_by_upc(connection, upc, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/products/upc/#{upc}")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SearchGroceryProductsByUpc200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Product Nutrition by ID Widget
  Visualize a product's nutritional information as HTML including CSS.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_product_nutrition_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_product_nutrition_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :defaultCss => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/products/#{id}/nutritionWidget")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end
end
