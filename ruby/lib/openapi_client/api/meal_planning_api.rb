=begin
#spoonacular API

#The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.

The version of the OpenAPI document: 1.1
Contact: mail@spoonacular.com
Generated by: https://openapi-generator.tech
Generator version: 7.7.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class MealPlanningApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Add Meal Plan Template
    # Add a meal plan template for a user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [AddMealPlanTemplate200Response]
    def add_meal_plan_template(username, hash, opts = {})
      data, _status_code, _headers = add_meal_plan_template_with_http_info(username, hash, opts)
      data
    end

    # Add Meal Plan Template
    # Add a meal plan template for a user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(AddMealPlanTemplate200Response, Integer, Hash)>] AddMealPlanTemplate200Response data, response status code and response headers
    def add_meal_plan_template_with_http_info(username, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.add_meal_plan_template ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.add_meal_plan_template"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.add_meal_plan_template"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/templates'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'AddMealPlanTemplate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.add_meal_plan_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#add_meal_plan_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add to Meal Plan
    # Add an item to the user's meal plan.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param add_to_meal_plan_request [AddToMealPlanRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def add_to_meal_plan(username, hash, add_to_meal_plan_request, opts = {})
      data, _status_code, _headers = add_to_meal_plan_with_http_info(username, hash, add_to_meal_plan_request, opts)
      data
    end

    # Add to Meal Plan
    # Add an item to the user&#39;s meal plan.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param add_to_meal_plan_request [AddToMealPlanRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def add_to_meal_plan_with_http_info(username, hash, add_to_meal_plan_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.add_to_meal_plan ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.add_to_meal_plan"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.add_to_meal_plan"
      end
      # verify the required parameter 'add_to_meal_plan_request' is set
      if @api_client.config.client_side_validation && add_to_meal_plan_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_to_meal_plan_request' when calling MealPlanningApi.add_to_meal_plan"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/items'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_to_meal_plan_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.add_to_meal_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#add_to_meal_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Add to Shopping List
    # Add an item to the current shopping list of a user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param add_to_shopping_list_request [AddToShoppingListRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GenerateShoppingList200Response]
    def add_to_shopping_list(username, hash, add_to_shopping_list_request, opts = {})
      data, _status_code, _headers = add_to_shopping_list_with_http_info(username, hash, add_to_shopping_list_request, opts)
      data
    end

    # Add to Shopping List
    # Add an item to the current shopping list of a user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param add_to_shopping_list_request [AddToShoppingListRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateShoppingList200Response, Integer, Hash)>] GenerateShoppingList200Response data, response status code and response headers
    def add_to_shopping_list_with_http_info(username, hash, add_to_shopping_list_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.add_to_shopping_list ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.add_to_shopping_list"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.add_to_shopping_list"
      end
      # verify the required parameter 'add_to_shopping_list_request' is set
      if @api_client.config.client_side_validation && add_to_shopping_list_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_to_shopping_list_request' when calling MealPlanningApi.add_to_shopping_list"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/shopping-list/items'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_to_shopping_list_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateShoppingList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.add_to_shopping_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#add_to_shopping_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clear Meal Plan Day
    # Delete all planned items from the user's meal plan for a specific day.
    # @param username [String] The username.
    # @param date [String] The date in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def clear_meal_plan_day(username, date, hash, opts = {})
      data, _status_code, _headers = clear_meal_plan_day_with_http_info(username, date, hash, opts)
      data
    end

    # Clear Meal Plan Day
    # Delete all planned items from the user&#39;s meal plan for a specific day.
    # @param username [String] The username.
    # @param date [String] The date in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def clear_meal_plan_day_with_http_info(username, date, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.clear_meal_plan_day ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.clear_meal_plan_day"
      end
      # verify the required parameter 'date' is set
      if @api_client.config.client_side_validation && date.nil?
        fail ArgumentError, "Missing the required parameter 'date' when calling MealPlanningApi.clear_meal_plan_day"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.clear_meal_plan_day"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/day/{date}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'date' + '}', CGI.escape(date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.clear_meal_plan_day",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#clear_meal_plan_day\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Connect User
    # In order to call user-specific endpoints, you need to connect your app's users to spoonacular users.
    # @param connect_user_request [ConnectUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ConnectUser200Response]
    def connect_user(connect_user_request, opts = {})
      data, _status_code, _headers = connect_user_with_http_info(connect_user_request, opts)
      data
    end

    # Connect User
    # In order to call user-specific endpoints, you need to connect your app&#39;s users to spoonacular users.
    # @param connect_user_request [ConnectUserRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ConnectUser200Response, Integer, Hash)>] ConnectUser200Response data, response status code and response headers
    def connect_user_with_http_info(connect_user_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.connect_user ...'
      end
      # verify the required parameter 'connect_user_request' is set
      if @api_client.config.client_side_validation && connect_user_request.nil?
        fail ArgumentError, "Missing the required parameter 'connect_user_request' when calling MealPlanningApi.connect_user"
      end
      # resource path
      local_var_path = '/users/connect'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(connect_user_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ConnectUser200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.connect_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#connect_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete from Meal Plan
    # Delete an item from the user's meal plan.
    # @param username [String] The username.
    # @param id [Float] The shopping list item id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_from_meal_plan(username, id, hash, opts = {})
      data, _status_code, _headers = delete_from_meal_plan_with_http_info(username, id, hash, opts)
      data
    end

    # Delete from Meal Plan
    # Delete an item from the user&#39;s meal plan.
    # @param username [String] The username.
    # @param id [Float] The shopping list item id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_from_meal_plan_with_http_info(username, id, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.delete_from_meal_plan ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.delete_from_meal_plan"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MealPlanningApi.delete_from_meal_plan"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.delete_from_meal_plan"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/items/{id}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.delete_from_meal_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#delete_from_meal_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete from Shopping List
    # Delete an item from the current shopping list of the user.
    # @param username [String] The username.
    # @param id [Integer] The item&#39;s id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_from_shopping_list(username, id, hash, opts = {})
      data, _status_code, _headers = delete_from_shopping_list_with_http_info(username, id, hash, opts)
      data
    end

    # Delete from Shopping List
    # Delete an item from the current shopping list of the user.
    # @param username [String] The username.
    # @param id [Integer] The item&#39;s id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_from_shopping_list_with_http_info(username, id, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.delete_from_shopping_list ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.delete_from_shopping_list"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MealPlanningApi.delete_from_shopping_list"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.delete_from_shopping_list"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/shopping-list/items/{id}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.delete_from_shopping_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#delete_from_shopping_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Delete Meal Plan Template
    # Delete a meal plan template for a user.
    # @param username [String] The username.
    # @param id [Integer] The item&#39;s id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Object]
    def delete_meal_plan_template(username, id, hash, opts = {})
      data, _status_code, _headers = delete_meal_plan_template_with_http_info(username, id, hash, opts)
      data
    end

    # Delete Meal Plan Template
    # Delete a meal plan template for a user.
    # @param username [String] The username.
    # @param id [Integer] The item&#39;s id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Object, Integer, Hash)>] Object data, response status code and response headers
    def delete_meal_plan_template_with_http_info(username, id, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.delete_meal_plan_template ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.delete_meal_plan_template"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MealPlanningApi.delete_meal_plan_template"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.delete_meal_plan_template"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/templates/{id}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Object'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.delete_meal_plan_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#delete_meal_plan_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Meal Plan
    # Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :time_frame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
    # @option opts [Float] :target_calories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
    # @option opts [String] :diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
    # @option opts [String] :exclude A comma-separated list of allergens or ingredients that must be excluded.
    # @return [GenerateMealPlan200Response]
    def generate_meal_plan(opts = {})
      data, _status_code, _headers = generate_meal_plan_with_http_info(opts)
      data
    end

    # Generate Meal Plan
    # Generate a meal plan with three meals per day (breakfast, lunch, and dinner).
    # @param [Hash] opts the optional parameters
    # @option opts [String] :time_frame Either for one \&quot;day\&quot; or an entire \&quot;week\&quot;.
    # @option opts [Float] :target_calories What is the caloric target for one day? The meal plan generator will try to get as close as possible to that goal.
    # @option opts [String] :diet Enter a diet that the meal plan has to adhere to. See a full list of supported diets.
    # @option opts [String] :exclude A comma-separated list of allergens or ingredients that must be excluded.
    # @return [Array<(GenerateMealPlan200Response, Integer, Hash)>] GenerateMealPlan200Response data, response status code and response headers
    def generate_meal_plan_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.generate_meal_plan ...'
      end
      # resource path
      local_var_path = '/mealplanner/generate'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'timeFrame'] = opts[:'time_frame'] if !opts[:'time_frame'].nil?
      query_params[:'targetCalories'] = opts[:'target_calories'] if !opts[:'target_calories'].nil?
      query_params[:'diet'] = opts[:'diet'] if !opts[:'diet'].nil?
      query_params[:'exclude'] = opts[:'exclude'] if !opts[:'exclude'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateMealPlan200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.generate_meal_plan",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#generate_meal_plan\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Generate Shopping List
    # Generate the shopping list for a user from the meal planner in a given time frame.
    # @param username [String] The username.
    # @param start_date [String] The start date in the format yyyy-mm-dd.
    # @param end_date [String] The end date in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [GenerateShoppingList200Response]
    def generate_shopping_list(username, start_date, end_date, hash, opts = {})
      data, _status_code, _headers = generate_shopping_list_with_http_info(username, start_date, end_date, hash, opts)
      data
    end

    # Generate Shopping List
    # Generate the shopping list for a user from the meal planner in a given time frame.
    # @param username [String] The username.
    # @param start_date [String] The start date in the format yyyy-mm-dd.
    # @param end_date [String] The end date in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateShoppingList200Response, Integer, Hash)>] GenerateShoppingList200Response data, response status code and response headers
    def generate_shopping_list_with_http_info(username, start_date, end_date, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.generate_shopping_list ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.generate_shopping_list"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling MealPlanningApi.generate_shopping_list"
      end
      # verify the required parameter 'end_date' is set
      if @api_client.config.client_side_validation && end_date.nil?
        fail ArgumentError, "Missing the required parameter 'end_date' when calling MealPlanningApi.generate_shopping_list"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.generate_shopping_list"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/shopping-list/{start_date}/{end_date}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'start_date' + '}', CGI.escape(start_date.to_s)).sub('{' + 'end_date' + '}', CGI.escape(end_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateShoppingList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.generate_shopping_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#generate_shopping_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Meal Plan Template
    # Get information about a meal plan template.
    # @param username [String] The username.
    # @param id [Integer] The item&#39;s id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [GetMealPlanTemplate200Response]
    def get_meal_plan_template(username, id, hash, opts = {})
      data, _status_code, _headers = get_meal_plan_template_with_http_info(username, id, hash, opts)
      data
    end

    # Get Meal Plan Template
    # Get information about a meal plan template.
    # @param username [String] The username.
    # @param id [Integer] The item&#39;s id.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMealPlanTemplate200Response, Integer, Hash)>] GetMealPlanTemplate200Response data, response status code and response headers
    def get_meal_plan_template_with_http_info(username, id, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.get_meal_plan_template ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.get_meal_plan_template"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling MealPlanningApi.get_meal_plan_template"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.get_meal_plan_template"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/templates/{id}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMealPlanTemplate200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.get_meal_plan_template",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#get_meal_plan_template\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Meal Plan Templates
    # Get meal plan templates from user or public ones.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [GetMealPlanTemplates200Response]
    def get_meal_plan_templates(username, hash, opts = {})
      data, _status_code, _headers = get_meal_plan_templates_with_http_info(username, hash, opts)
      data
    end

    # Get Meal Plan Templates
    # Get meal plan templates from user or public ones.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMealPlanTemplates200Response, Integer, Hash)>] GetMealPlanTemplates200Response data, response status code and response headers
    def get_meal_plan_templates_with_http_info(username, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.get_meal_plan_templates ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.get_meal_plan_templates"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.get_meal_plan_templates"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/templates'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMealPlanTemplates200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.get_meal_plan_templates",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#get_meal_plan_templates\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Meal Plan Week
    # Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user's hash that can be found in his/her account.
    # @param username [String] The username.
    # @param start_date [String] The start date of the meal planned week in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [GetMealPlanWeek200Response]
    def get_meal_plan_week(username, start_date, hash, opts = {})
      data, _status_code, _headers = get_meal_plan_week_with_http_info(username, start_date, hash, opts)
      data
    end

    # Get Meal Plan Week
    # Retrieve a meal planned week for the given user. The username must be a spoonacular user and the hash must the the user&#39;s hash that can be found in his/her account.
    # @param username [String] The username.
    # @param start_date [String] The start date of the meal planned week in the format yyyy-mm-dd.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetMealPlanWeek200Response, Integer, Hash)>] GetMealPlanWeek200Response data, response status code and response headers
    def get_meal_plan_week_with_http_info(username, start_date, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.get_meal_plan_week ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.get_meal_plan_week"
      end
      # verify the required parameter 'start_date' is set
      if @api_client.config.client_side_validation && start_date.nil?
        fail ArgumentError, "Missing the required parameter 'start_date' when calling MealPlanningApi.get_meal_plan_week"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.get_meal_plan_week"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/week/{start_date}'.sub('{' + 'username' + '}', CGI.escape(username.to_s)).sub('{' + 'start_date' + '}', CGI.escape(start_date.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetMealPlanWeek200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.get_meal_plan_week",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#get_meal_plan_week\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Get Shopping List
    # Get the current shopping list for the given user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [GetShoppingList200Response]
    def get_shopping_list(username, hash, opts = {})
      data, _status_code, _headers = get_shopping_list_with_http_info(username, hash, opts)
      data
    end

    # Get Shopping List
    # Get the current shopping list for the given user.
    # @param username [String] The username.
    # @param hash [String] The private hash for the username.
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetShoppingList200Response, Integer, Hash)>] GetShoppingList200Response data, response status code and response headers
    def get_shopping_list_with_http_info(username, hash, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MealPlanningApi.get_shopping_list ...'
      end
      # verify the required parameter 'username' is set
      if @api_client.config.client_side_validation && username.nil?
        fail ArgumentError, "Missing the required parameter 'username' when calling MealPlanningApi.get_shopping_list"
      end
      # verify the required parameter 'hash' is set
      if @api_client.config.client_side_validation && hash.nil?
        fail ArgumentError, "Missing the required parameter 'hash' when calling MealPlanningApi.get_shopping_list"
      end
      # resource path
      local_var_path = '/mealplanner/{username}/shopping-list'.sub('{' + 'username' + '}', CGI.escape(username.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'hash'] = hash

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetShoppingList200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || ['apiKeyScheme']

      new_options = opts.merge(
        :operation => :"MealPlanningApi.get_shopping_list",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MealPlanningApi#get_shopping_list\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
