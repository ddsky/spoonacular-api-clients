/**
 *
 * Please note:
 * This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 *
 */

@file:Suppress(
    "ArrayInDataClass",
    "EnumEntryName",
    "RemoveRedundantQualifierName",
    "UnusedImport"
)

package com.spoonacular

import java.io.IOException
import okhttp3.OkHttpClient
import okhttp3.HttpUrl

import com.spoonacular.client.model.AutocompleteIngredientSearch200ResponseInner
import com.spoonacular.client.model.ComputeIngredientAmount200Response
import com.spoonacular.client.model.GetIngredientInformation200Response
import com.spoonacular.client.model.GetIngredientSubstitutes200Response
import com.spoonacular.client.model.IngredientSearch200Response
import com.spoonacular.client.model.MapIngredientsToGroceryProducts200ResponseInner
import com.spoonacular.client.model.MapIngredientsToGroceryProductsRequest

import com.squareup.moshi.Json

import spoonacular.infrastructure.ApiClient
import spoonacular.infrastructure.ApiResponse
import spoonacular.infrastructure.ClientException
import spoonacular.infrastructure.ClientError
import spoonacular.infrastructure.ServerException
import spoonacular.infrastructure.ServerError
import spoonacular.infrastructure.MultiValueMap
import spoonacular.infrastructure.PartConfig
import spoonacular.infrastructure.RequestConfig
import spoonacular.infrastructure.RequestMethod
import spoonacular.infrastructure.ResponseType
import spoonacular.infrastructure.Success
import spoonacular.infrastructure.toMultiValue

class IngredientsApi(basePath: kotlin.String = defaultBasePath, client: OkHttpClient = ApiClient.defaultClient) : ApiClient(basePath, client) {
    companion object {
        @JvmStatic
        val defaultBasePath: String by lazy {
            System.getProperties().getProperty(ApiClient.baseUrlKey, "https://api.spoonacular.com")
        }
    }

    /**
     * enum for parameter language
     */
     enum class LanguageAutocompleteIngredientSearch(val value: kotlin.String) {
         @Json(name = "en") en("en"),
         @Json(name = "de") de("de")
     }

    /**
     * Autocomplete Ingredient Search
     * Autocomplete the entry of an ingredient.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return kotlin.collections.Set<AutocompleteIngredientSearch200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun autocompleteIngredientSearch(query: kotlin.String? = null, number: kotlin.Int? = 10, metaInformation: kotlin.Boolean? = null, intolerances: kotlin.String? = null, language: LanguageAutocompleteIngredientSearch? = null) : kotlin.collections.Set<AutocompleteIngredientSearch200ResponseInner> {
        val localVarResponse = autocompleteIngredientSearchWithHttpInfo(query = query, number = number, metaInformation = metaInformation, intolerances = intolerances, language = language)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<AutocompleteIngredientSearch200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Autocomplete Ingredient Search
     * Autocomplete the entry of an ingredient.
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse<kotlin.collections.Set<AutocompleteIngredientSearch200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun autocompleteIngredientSearchWithHttpInfo(query: kotlin.String?, number: kotlin.Int?, metaInformation: kotlin.Boolean?, intolerances: kotlin.String?, language: LanguageAutocompleteIngredientSearch?) : ApiResponse<kotlin.collections.Set<AutocompleteIngredientSearch200ResponseInner>?> {
        val localVariableConfig = autocompleteIngredientSearchRequestConfig(query = query, number = number, metaInformation = metaInformation, intolerances = intolerances, language = language)

        return request<Unit, kotlin.collections.Set<AutocompleteIngredientSearch200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation autocompleteIngredientSearch
     *
     * @param query The (natural language) search query. (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return RequestConfig
     */
    fun autocompleteIngredientSearchRequestConfig(query: kotlin.String?, number: kotlin.Int?, metaInformation: kotlin.Boolean?, intolerances: kotlin.String?, language: LanguageAutocompleteIngredientSearch?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (metaInformation != null) {
                    put("metaInformation", listOf(metaInformation.toString()))
                }
                if (intolerances != null) {
                    put("intolerances", listOf(intolerances.toString()))
                }
                if (language != null) {
                    put("language", listOf(language.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/ingredients/autocomplete",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Compute Ingredient Amount
     * Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
     * @param id The id of the ingredient you want the amount for.
     * @param nutrient The target nutrient. See a list of supported nutrients.
     * @param target The target number of the given nutrient.
     * @param unit The target unit. (optional)
     * @return ComputeIngredientAmount200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun computeIngredientAmount(id: java.math.BigDecimal, nutrient: kotlin.String, target: java.math.BigDecimal, unit: kotlin.String? = null) : ComputeIngredientAmount200Response {
        val localVarResponse = computeIngredientAmountWithHttpInfo(id = id, nutrient = nutrient, target = target, unit = unit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as ComputeIngredientAmount200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Compute Ingredient Amount
     * Compute the amount you need of a certain ingredient for a certain nutritional goal. For example, how much pineapple do you have to eat to get 10 grams of protein?
     * @param id The id of the ingredient you want the amount for.
     * @param nutrient The target nutrient. See a list of supported nutrients.
     * @param target The target number of the given nutrient.
     * @param unit The target unit. (optional)
     * @return ApiResponse<ComputeIngredientAmount200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun computeIngredientAmountWithHttpInfo(id: java.math.BigDecimal, nutrient: kotlin.String, target: java.math.BigDecimal, unit: kotlin.String?) : ApiResponse<ComputeIngredientAmount200Response?> {
        val localVariableConfig = computeIngredientAmountRequestConfig(id = id, nutrient = nutrient, target = target, unit = unit)

        return request<Unit, ComputeIngredientAmount200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation computeIngredientAmount
     *
     * @param id The id of the ingredient you want the amount for.
     * @param nutrient The target nutrient. See a list of supported nutrients.
     * @param target The target number of the given nutrient.
     * @param unit The target unit. (optional)
     * @return RequestConfig
     */
    fun computeIngredientAmountRequestConfig(id: java.math.BigDecimal, nutrient: kotlin.String, target: java.math.BigDecimal, unit: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("nutrient", listOf(nutrient.toString()))
                put("target", listOf(target.toString()))
                if (unit != null) {
                    put("unit", listOf(unit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/ingredients/{id}/amount".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Ingredient Information
     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     * @param id The item&#39;s id.
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @return GetIngredientInformation200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getIngredientInformation(id: kotlin.Int, amount: java.math.BigDecimal? = null, unit: kotlin.String? = null) : GetIngredientInformation200Response {
        val localVarResponse = getIngredientInformationWithHttpInfo(id = id, amount = amount, unit = unit)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetIngredientInformation200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Ingredient Information
     * Use an ingredient id to get all available information about an ingredient, such as its image and supermarket aisle.
     * @param id The item&#39;s id.
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @return ApiResponse<GetIngredientInformation200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getIngredientInformationWithHttpInfo(id: kotlin.Int, amount: java.math.BigDecimal?, unit: kotlin.String?) : ApiResponse<GetIngredientInformation200Response?> {
        val localVariableConfig = getIngredientInformationRequestConfig(id = id, amount = amount, unit = unit)

        return request<Unit, GetIngredientInformation200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getIngredientInformation
     *
     * @param id The item&#39;s id.
     * @param amount The amount of this ingredient. (optional)
     * @param unit The unit for the given amount. (optional)
     * @return RequestConfig
     */
    fun getIngredientInformationRequestConfig(id: kotlin.Int, amount: java.math.BigDecimal?, unit: kotlin.String?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (amount != null) {
                    put("amount", listOf(amount.toString()))
                }
                if (unit != null) {
                    put("unit", listOf(unit.toString()))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/ingredients/{id}/information".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Ingredient Substitutes
     * Search for substitutes for a given ingredient.
     * @param ingredientName The name of the ingredient you want to replace.
     * @return GetIngredientSubstitutes200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getIngredientSubstitutes(ingredientName: kotlin.String) : GetIngredientSubstitutes200Response {
        val localVarResponse = getIngredientSubstitutesWithHttpInfo(ingredientName = ingredientName)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetIngredientSubstitutes200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Ingredient Substitutes
     * Search for substitutes for a given ingredient.
     * @param ingredientName The name of the ingredient you want to replace.
     * @return ApiResponse<GetIngredientSubstitutes200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getIngredientSubstitutesWithHttpInfo(ingredientName: kotlin.String) : ApiResponse<GetIngredientSubstitutes200Response?> {
        val localVariableConfig = getIngredientSubstitutesRequestConfig(ingredientName = ingredientName)

        return request<Unit, GetIngredientSubstitutes200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getIngredientSubstitutes
     *
     * @param ingredientName The name of the ingredient you want to replace.
     * @return RequestConfig
     */
    fun getIngredientSubstitutesRequestConfig(ingredientName: kotlin.String) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                put("ingredientName", listOf(ingredientName.toString()))
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/ingredients/substitutes",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Get Ingredient Substitutes by ID
     * Search for substitutes for a given ingredient.
     * @param id The item&#39;s id.
     * @return GetIngredientSubstitutes200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun getIngredientSubstitutesByID(id: kotlin.Int) : GetIngredientSubstitutes200Response {
        val localVarResponse = getIngredientSubstitutesByIDWithHttpInfo(id = id)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as GetIngredientSubstitutes200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Get Ingredient Substitutes by ID
     * Search for substitutes for a given ingredient.
     * @param id The item&#39;s id.
     * @return ApiResponse<GetIngredientSubstitutes200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun getIngredientSubstitutesByIDWithHttpInfo(id: kotlin.Int) : ApiResponse<GetIngredientSubstitutes200Response?> {
        val localVariableConfig = getIngredientSubstitutesByIDRequestConfig(id = id)

        return request<Unit, GetIngredientSubstitutes200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation getIngredientSubstitutesByID
     *
     * @param id The item&#39;s id.
     * @return RequestConfig
     */
    fun getIngredientSubstitutesByIDRequestConfig(id: kotlin.Int) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/ingredients/{id}/substitutes".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter language
     */
     enum class LanguageIngredientSearch(val value: kotlin.String) {
         @Json(name = "en") en("en"),
         @Json(name = "de") de("de")
     }

    /**
     * Ingredient Search
     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     * @param query The (natural language) search query. (optional)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return IngredientSearch200Response
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ingredientSearch(query: kotlin.String? = null, addChildren: kotlin.Boolean? = null, minProteinPercent: java.math.BigDecimal? = null, maxProteinPercent: java.math.BigDecimal? = null, minFatPercent: java.math.BigDecimal? = null, maxFatPercent: java.math.BigDecimal? = null, minCarbsPercent: java.math.BigDecimal? = null, maxCarbsPercent: java.math.BigDecimal? = null, metaInformation: kotlin.Boolean? = null, intolerances: kotlin.String? = null, sort: kotlin.String? = null, sortDirection: kotlin.String? = null, offset: kotlin.Int? = null, number: kotlin.Int? = 10, language: LanguageIngredientSearch? = null) : IngredientSearch200Response {
        val localVarResponse = ingredientSearchWithHttpInfo(query = query, addChildren = addChildren, minProteinPercent = minProteinPercent, maxProteinPercent = maxProteinPercent, minFatPercent = minFatPercent, maxFatPercent = maxFatPercent, minCarbsPercent = minCarbsPercent, maxCarbsPercent = maxCarbsPercent, metaInformation = metaInformation, intolerances = intolerances, sort = sort, sortDirection = sortDirection, offset = offset, number = number, language = language)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as IngredientSearch200Response
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Ingredient Search
     * Search for simple whole foods (e.g. fruits, vegetables, nuts, grains, meat, fish, dairy etc.).
     * @param query The (natural language) search query. (optional)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return ApiResponse<IngredientSearch200Response?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ingredientSearchWithHttpInfo(query: kotlin.String?, addChildren: kotlin.Boolean?, minProteinPercent: java.math.BigDecimal?, maxProteinPercent: java.math.BigDecimal?, minFatPercent: java.math.BigDecimal?, maxFatPercent: java.math.BigDecimal?, minCarbsPercent: java.math.BigDecimal?, maxCarbsPercent: java.math.BigDecimal?, metaInformation: kotlin.Boolean?, intolerances: kotlin.String?, sort: kotlin.String?, sortDirection: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?, language: LanguageIngredientSearch?) : ApiResponse<IngredientSearch200Response?> {
        val localVariableConfig = ingredientSearchRequestConfig(query = query, addChildren = addChildren, minProteinPercent = minProteinPercent, maxProteinPercent = maxProteinPercent, minFatPercent = minFatPercent, maxFatPercent = maxFatPercent, minCarbsPercent = minCarbsPercent, maxCarbsPercent = maxCarbsPercent, metaInformation = metaInformation, intolerances = intolerances, sort = sort, sortDirection = sortDirection, offset = offset, number = number, language = language)

        return request<Unit, IngredientSearch200Response>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ingredientSearch
     *
     * @param query The (natural language) search query. (optional)
     * @param addChildren Whether to add children of found foods. (optional)
     * @param minProteinPercent The minimum percentage of protein the food must have (between 0 and 100). (optional)
     * @param maxProteinPercent The maximum percentage of protein the food can have (between 0 and 100). (optional)
     * @param minFatPercent The minimum percentage of fat the food must have (between 0 and 100). (optional)
     * @param maxFatPercent The maximum percentage of fat the food can have (between 0 and 100). (optional)
     * @param minCarbsPercent The minimum percentage of carbs the food must have (between 0 and 100). (optional)
     * @param maxCarbsPercent The maximum percentage of carbs the food can have (between 0 and 100). (optional)
     * @param metaInformation Whether to return more meta information about the ingredients. (optional)
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances. (optional)
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options. (optional)
     * @param sortDirection The direction in which to sort. Must be either &#39;asc&#39; (ascending) or &#39;desc&#39; (descending). (optional)
     * @param offset The number of results to skip (between 0 and 900). (optional)
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10. (optional, default to 10)
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @return RequestConfig
     */
    fun ingredientSearchRequestConfig(query: kotlin.String?, addChildren: kotlin.Boolean?, minProteinPercent: java.math.BigDecimal?, maxProteinPercent: java.math.BigDecimal?, minFatPercent: java.math.BigDecimal?, maxFatPercent: java.math.BigDecimal?, minCarbsPercent: java.math.BigDecimal?, maxCarbsPercent: java.math.BigDecimal?, metaInformation: kotlin.Boolean?, intolerances: kotlin.String?, sort: kotlin.String?, sortDirection: kotlin.String?, offset: kotlin.Int?, number: kotlin.Int?, language: LanguageIngredientSearch?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (query != null) {
                    put("query", listOf(query.toString()))
                }
                if (addChildren != null) {
                    put("addChildren", listOf(addChildren.toString()))
                }
                if (minProteinPercent != null) {
                    put("minProteinPercent", listOf(minProteinPercent.toString()))
                }
                if (maxProteinPercent != null) {
                    put("maxProteinPercent", listOf(maxProteinPercent.toString()))
                }
                if (minFatPercent != null) {
                    put("minFatPercent", listOf(minFatPercent.toString()))
                }
                if (maxFatPercent != null) {
                    put("maxFatPercent", listOf(maxFatPercent.toString()))
                }
                if (minCarbsPercent != null) {
                    put("minCarbsPercent", listOf(minCarbsPercent.toString()))
                }
                if (maxCarbsPercent != null) {
                    put("maxCarbsPercent", listOf(maxCarbsPercent.toString()))
                }
                if (metaInformation != null) {
                    put("metaInformation", listOf(metaInformation.toString()))
                }
                if (intolerances != null) {
                    put("intolerances", listOf(intolerances.toString()))
                }
                if (sort != null) {
                    put("sort", listOf(sort.toString()))
                }
                if (sortDirection != null) {
                    put("sortDirection", listOf(sortDirection.toString()))
                }
                if (offset != null) {
                    put("offset", listOf(offset.toString()))
                }
                if (number != null) {
                    put("number", listOf(number.toString()))
                }
                if (language != null) {
                    put("language", listOf(language.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.GET,
            path = "/food/ingredients/search",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter measure
     */
     enum class MeasureIngredientsByIDImage(val value: kotlin.String) {
         @Json(name = "us") us("us"),
         @Json(name = "metric") metric("metric")
     }

    /**
     * Ingredients by ID Image
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id.
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return java.io.File
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun ingredientsByIDImage(id: java.math.BigDecimal, measure: MeasureIngredientsByIDImage? = null) : java.io.File {
        val localVarResponse = ingredientsByIDImageWithHttpInfo(id = id, measure = measure)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as java.io.File
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Ingredients by ID Image
     * Visualize a recipe&#39;s ingredient list.
     * @param id The recipe id.
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return ApiResponse<java.io.File?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun ingredientsByIDImageWithHttpInfo(id: java.math.BigDecimal, measure: MeasureIngredientsByIDImage?) : ApiResponse<java.io.File?> {
        val localVariableConfig = ingredientsByIDImageRequestConfig(id = id, measure = measure)

        return request<Unit, java.io.File>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation ingredientsByIDImage
     *
     * @param id The recipe id.
     * @param measure Whether the the measures should be &#39;us&#39; or &#39;metric&#39;. (optional)
     * @return RequestConfig
     */
    fun ingredientsByIDImageRequestConfig(id: java.math.BigDecimal, measure: MeasureIngredientsByIDImage?) : RequestConfig<Unit> {
        val localVariableBody = null
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (measure != null) {
                    put("measure", listOf(measure.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        
        return RequestConfig(
            method = RequestMethod.GET,
            path = "/recipes/{id}/ingredientWidget.png".replace("{"+"id"+"}", encodeURIComponent(id.toString())),
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * Map Ingredients to Grocery Products
     * Map a set of ingredients to products you can buy in the grocery store.
     * @param mapIngredientsToGroceryProductsRequest 
     * @return kotlin.collections.Set<MapIngredientsToGroceryProducts200ResponseInner>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun mapIngredientsToGroceryProducts(mapIngredientsToGroceryProductsRequest: MapIngredientsToGroceryProductsRequest) : kotlin.collections.Set<MapIngredientsToGroceryProducts200ResponseInner> {
        val localVarResponse = mapIngredientsToGroceryProductsWithHttpInfo(mapIngredientsToGroceryProductsRequest = mapIngredientsToGroceryProductsRequest)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.collections.Set<MapIngredientsToGroceryProducts200ResponseInner>
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Map Ingredients to Grocery Products
     * Map a set of ingredients to products you can buy in the grocery store.
     * @param mapIngredientsToGroceryProductsRequest 
     * @return ApiResponse<kotlin.collections.Set<MapIngredientsToGroceryProducts200ResponseInner>?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun mapIngredientsToGroceryProductsWithHttpInfo(mapIngredientsToGroceryProductsRequest: MapIngredientsToGroceryProductsRequest) : ApiResponse<kotlin.collections.Set<MapIngredientsToGroceryProducts200ResponseInner>?> {
        val localVariableConfig = mapIngredientsToGroceryProductsRequestConfig(mapIngredientsToGroceryProductsRequest = mapIngredientsToGroceryProductsRequest)

        return request<MapIngredientsToGroceryProductsRequest, kotlin.collections.Set<MapIngredientsToGroceryProducts200ResponseInner>>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation mapIngredientsToGroceryProducts
     *
     * @param mapIngredientsToGroceryProductsRequest 
     * @return RequestConfig
     */
    fun mapIngredientsToGroceryProductsRequestConfig(mapIngredientsToGroceryProductsRequest: MapIngredientsToGroceryProductsRequest) : RequestConfig<MapIngredientsToGroceryProductsRequest> {
        val localVariableBody = mapIngredientsToGroceryProductsRequest
        val localVariableQuery: MultiValueMap = mutableMapOf()
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf()
        localVariableHeaders["Content-Type"] = "application/json"
        localVariableHeaders["Accept"] = "application/json"

        return RequestConfig(
            method = RequestMethod.POST,
            path = "/food/ingredients/map",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }

    /**
     * enum for parameter language
     */
     enum class LanguageVisualizeIngredients(val value: kotlin.String) {
         @Json(name = "en") en("en"),
         @Json(name = "de") de("de")
     }

    /**
     * enum for parameter measure
     */
     enum class MeasureVisualizeIngredients(val value: kotlin.String) {
         @Json(name = "us") us("us"),
         @Json(name = "metric") metric("metric")
     }

    /**
     * enum for parameter view
     */
     enum class ViewVisualizeIngredients(val value: kotlin.String) {
         @Json(name = "grid") grid("grid"),
         @Json(name = "list") list("list")
     }

    /**
     * Ingredients Widget
     * Visualize ingredients of a recipe. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param servings The number of servings.
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param measure The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)
     * @param view How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return kotlin.String
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     * @throws UnsupportedOperationException If the API returns an informational or redirection response
     * @throws ClientException If the API returns a client error response
     * @throws ServerException If the API returns a server error response
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class, UnsupportedOperationException::class, ClientException::class, ServerException::class)
    fun visualizeIngredients(ingredientList: kotlin.String, servings: java.math.BigDecimal, language: LanguageVisualizeIngredients? = null, measure: MeasureVisualizeIngredients? = null, view: ViewVisualizeIngredients? = null, defaultCss: kotlin.Boolean? = null, showBacklink: kotlin.Boolean? = null) : kotlin.String {
        val localVarResponse = visualizeIngredientsWithHttpInfo(ingredientList = ingredientList, servings = servings, language = language, measure = measure, view = view, defaultCss = defaultCss, showBacklink = showBacklink)

        return when (localVarResponse.responseType) {
            ResponseType.Success -> (localVarResponse as Success<*>).data as kotlin.String
            ResponseType.Informational -> throw UnsupportedOperationException("Client does not support Informational responses.")
            ResponseType.Redirection -> throw UnsupportedOperationException("Client does not support Redirection responses.")
            ResponseType.ClientError -> {
                val localVarError = localVarResponse as ClientError<*>
                throw ClientException("Client error : ${localVarError.statusCode} ${localVarError.message.orEmpty()}", localVarError.statusCode, localVarResponse)
            }
            ResponseType.ServerError -> {
                val localVarError = localVarResponse as ServerError<*>
                throw ServerException("Server error : ${localVarError.statusCode} ${localVarError.message.orEmpty()} ${localVarError.body}", localVarError.statusCode, localVarResponse)
            }
        }
    }

    /**
     * Ingredients Widget
     * Visualize ingredients of a recipe. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param servings The number of servings.
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param measure The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)
     * @param view How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return ApiResponse<kotlin.String?>
     * @throws IllegalStateException If the request is not correctly configured
     * @throws IOException Rethrows the OkHttp execute method exception
     */
    @Suppress("UNCHECKED_CAST")
    @Throws(IllegalStateException::class, IOException::class)
    fun visualizeIngredientsWithHttpInfo(ingredientList: kotlin.String, servings: java.math.BigDecimal, language: LanguageVisualizeIngredients?, measure: MeasureVisualizeIngredients?, view: ViewVisualizeIngredients?, defaultCss: kotlin.Boolean?, showBacklink: kotlin.Boolean?) : ApiResponse<kotlin.String?> {
        val localVariableConfig = visualizeIngredientsRequestConfig(ingredientList = ingredientList, servings = servings, language = language, measure = measure, view = view, defaultCss = defaultCss, showBacklink = showBacklink)

        return request<Map<String, PartConfig<*>>, kotlin.String>(
            localVariableConfig
        )
    }

    /**
     * To obtain the request config of the operation visualizeIngredients
     *
     * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param servings The number of servings.
     * @param language The language of the input. Either &#39;en&#39; or &#39;de&#39;. (optional)
     * @param measure The original system of measurement, either &#39;metric&#39; or &#39;us&#39;. (optional)
     * @param view How to visualize the ingredients, either &#39;grid&#39; or &#39;list&#39;. (optional)
     * @param defaultCss Whether the default CSS should be added to the response. (optional)
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota. (optional)
     * @return RequestConfig
     */
    fun visualizeIngredientsRequestConfig(ingredientList: kotlin.String, servings: java.math.BigDecimal, language: LanguageVisualizeIngredients?, measure: MeasureVisualizeIngredients?, view: ViewVisualizeIngredients?, defaultCss: kotlin.Boolean?, showBacklink: kotlin.Boolean?) : RequestConfig<Map<String, PartConfig<*>>> {
        val localVariableBody = mapOf(
            "ingredientList" to PartConfig(body = ingredientList, headers = mutableMapOf()),
            "servings" to PartConfig(body = servings, headers = mutableMapOf()),
            "measure" to PartConfig(body = measure?.value, headers = mutableMapOf()),
            "view" to PartConfig(body = view?.value, headers = mutableMapOf()),
            "defaultCss" to PartConfig(body = defaultCss, headers = mutableMapOf()),
            "showBacklink" to PartConfig(body = showBacklink, headers = mutableMapOf()),)
        val localVariableQuery: MultiValueMap = mutableMapOf<kotlin.String, kotlin.collections.List<kotlin.String>>()
            .apply {
                if (language != null) {
                    put("language", listOf(language.value))
                }
            }
        val localVariableHeaders: MutableMap<String, String> = mutableMapOf("Content-Type" to "application/x-www-form-urlencoded")
        
        return RequestConfig(
            method = RequestMethod.POST,
            path = "/recipes/visualizeIngredients",
            query = localVariableQuery,
            headers = localVariableHeaders,
            requiresAuthentication = true,
            body = localVariableBody
        )
    }


    private fun encodeURIComponent(uriComponent: kotlin.String): kotlin.String =
        HttpUrl.Builder().scheme("http").host("localhost").addPathSegment(uriComponent).build().encodedPathSegments[0]
}
