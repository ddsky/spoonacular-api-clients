/*
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.spoonacular.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.spoonacular.client.model.GetRecipeInformation200ResponseExtendedIngredientsInner;
import com.spoonacular.client.model.GetRecipeInformation200ResponseWinePairing;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.spoonacular.client.JSON;

/**
 * 
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", comments = "Generator version: 7.7.0-SNAPSHOT")
public class GetRecipeInformation200Response {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_TITLE = "title";
  @SerializedName(SERIALIZED_NAME_TITLE)
  private String title;

  public static final String SERIALIZED_NAME_IMAGE = "image";
  @SerializedName(SERIALIZED_NAME_IMAGE)
  private String image;

  public static final String SERIALIZED_NAME_IMAGE_TYPE = "imageType";
  @SerializedName(SERIALIZED_NAME_IMAGE_TYPE)
  private String imageType;

  public static final String SERIALIZED_NAME_SERVINGS = "servings";
  @SerializedName(SERIALIZED_NAME_SERVINGS)
  private BigDecimal servings;

  public static final String SERIALIZED_NAME_READY_IN_MINUTES = "readyInMinutes";
  @SerializedName(SERIALIZED_NAME_READY_IN_MINUTES)
  private Integer readyInMinutes;

  public static final String SERIALIZED_NAME_LICENSE = "license";
  @SerializedName(SERIALIZED_NAME_LICENSE)
  private String license;

  public static final String SERIALIZED_NAME_SOURCE_NAME = "sourceName";
  @SerializedName(SERIALIZED_NAME_SOURCE_NAME)
  private String sourceName;

  public static final String SERIALIZED_NAME_SOURCE_URL = "sourceUrl";
  @SerializedName(SERIALIZED_NAME_SOURCE_URL)
  private String sourceUrl;

  public static final String SERIALIZED_NAME_SPOONACULAR_SOURCE_URL = "spoonacularSourceUrl";
  @SerializedName(SERIALIZED_NAME_SPOONACULAR_SOURCE_URL)
  private String spoonacularSourceUrl;

  public static final String SERIALIZED_NAME_AGGREGATE_LIKES = "aggregateLikes";
  @SerializedName(SERIALIZED_NAME_AGGREGATE_LIKES)
  private Integer aggregateLikes;

  public static final String SERIALIZED_NAME_HEALTH_SCORE = "healthScore";
  @SerializedName(SERIALIZED_NAME_HEALTH_SCORE)
  private BigDecimal healthScore;

  public static final String SERIALIZED_NAME_SPOONACULAR_SCORE = "spoonacularScore";
  @SerializedName(SERIALIZED_NAME_SPOONACULAR_SCORE)
  private BigDecimal spoonacularScore;

  public static final String SERIALIZED_NAME_PRICE_PER_SERVING = "pricePerServing";
  @SerializedName(SERIALIZED_NAME_PRICE_PER_SERVING)
  private BigDecimal pricePerServing;

  public static final String SERIALIZED_NAME_ANALYZED_INSTRUCTIONS = "analyzedInstructions";
  @SerializedName(SERIALIZED_NAME_ANALYZED_INSTRUCTIONS)
  private List<Object> analyzedInstructions = new ArrayList<>();

  public static final String SERIALIZED_NAME_CHEAP = "cheap";
  @SerializedName(SERIALIZED_NAME_CHEAP)
  private Boolean cheap;

  public static final String SERIALIZED_NAME_CREDITS_TEXT = "creditsText";
  @SerializedName(SERIALIZED_NAME_CREDITS_TEXT)
  private String creditsText;

  public static final String SERIALIZED_NAME_CUISINES = "cuisines";
  @SerializedName(SERIALIZED_NAME_CUISINES)
  private List<String> cuisines = new ArrayList<>();

  public static final String SERIALIZED_NAME_DAIRY_FREE = "dairyFree";
  @SerializedName(SERIALIZED_NAME_DAIRY_FREE)
  private Boolean dairyFree;

  public static final String SERIALIZED_NAME_DIETS = "diets";
  @SerializedName(SERIALIZED_NAME_DIETS)
  private List<String> diets = new ArrayList<>();

  public static final String SERIALIZED_NAME_GAPS = "gaps";
  @SerializedName(SERIALIZED_NAME_GAPS)
  private String gaps;

  public static final String SERIALIZED_NAME_GLUTEN_FREE = "glutenFree";
  @SerializedName(SERIALIZED_NAME_GLUTEN_FREE)
  private Boolean glutenFree;

  public static final String SERIALIZED_NAME_INSTRUCTIONS = "instructions";
  @SerializedName(SERIALIZED_NAME_INSTRUCTIONS)
  private String instructions;

  public static final String SERIALIZED_NAME_KETOGENIC = "ketogenic";
  @SerializedName(SERIALIZED_NAME_KETOGENIC)
  private Boolean ketogenic;

  public static final String SERIALIZED_NAME_LOW_FODMAP = "lowFodmap";
  @SerializedName(SERIALIZED_NAME_LOW_FODMAP)
  private Boolean lowFodmap;

  public static final String SERIALIZED_NAME_OCCASIONS = "occasions";
  @SerializedName(SERIALIZED_NAME_OCCASIONS)
  private List<String> occasions = new ArrayList<>();

  public static final String SERIALIZED_NAME_SUSTAINABLE = "sustainable";
  @SerializedName(SERIALIZED_NAME_SUSTAINABLE)
  private Boolean sustainable;

  public static final String SERIALIZED_NAME_VEGAN = "vegan";
  @SerializedName(SERIALIZED_NAME_VEGAN)
  private Boolean vegan;

  public static final String SERIALIZED_NAME_VEGETARIAN = "vegetarian";
  @SerializedName(SERIALIZED_NAME_VEGETARIAN)
  private Boolean vegetarian;

  public static final String SERIALIZED_NAME_VERY_HEALTHY = "veryHealthy";
  @SerializedName(SERIALIZED_NAME_VERY_HEALTHY)
  private Boolean veryHealthy;

  public static final String SERIALIZED_NAME_VERY_POPULAR = "veryPopular";
  @SerializedName(SERIALIZED_NAME_VERY_POPULAR)
  private Boolean veryPopular;

  public static final String SERIALIZED_NAME_WHOLE30 = "whole30";
  @SerializedName(SERIALIZED_NAME_WHOLE30)
  private Boolean whole30;

  public static final String SERIALIZED_NAME_WEIGHT_WATCHER_SMART_POINTS = "weightWatcherSmartPoints";
  @SerializedName(SERIALIZED_NAME_WEIGHT_WATCHER_SMART_POINTS)
  private BigDecimal weightWatcherSmartPoints;

  public static final String SERIALIZED_NAME_DISH_TYPES = "dishTypes";
  @SerializedName(SERIALIZED_NAME_DISH_TYPES)
  private List<String> dishTypes = new ArrayList<>();

  public static final String SERIALIZED_NAME_EXTENDED_INGREDIENTS = "extendedIngredients";
  @SerializedName(SERIALIZED_NAME_EXTENDED_INGREDIENTS)
  private Set<GetRecipeInformation200ResponseExtendedIngredientsInner> extendedIngredients = new LinkedHashSet<>();

  public static final String SERIALIZED_NAME_SUMMARY = "summary";
  @SerializedName(SERIALIZED_NAME_SUMMARY)
  private String summary;

  public static final String SERIALIZED_NAME_WINE_PAIRING = "winePairing";
  @SerializedName(SERIALIZED_NAME_WINE_PAIRING)
  private GetRecipeInformation200ResponseWinePairing winePairing;

  public GetRecipeInformation200Response() {
  }

  public GetRecipeInformation200Response id(Integer id) {
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nonnull
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public GetRecipeInformation200Response title(String title) {
    this.title = title;
    return this;
  }

   /**
   * Get title
   * @return title
  **/
  @javax.annotation.Nonnull
  public String getTitle() {
    return title;
  }

  public void setTitle(String title) {
    this.title = title;
  }


  public GetRecipeInformation200Response image(String image) {
    this.image = image;
    return this;
  }

   /**
   * Get image
   * @return image
  **/
  @javax.annotation.Nonnull
  public String getImage() {
    return image;
  }

  public void setImage(String image) {
    this.image = image;
  }


  public GetRecipeInformation200Response imageType(String imageType) {
    this.imageType = imageType;
    return this;
  }

   /**
   * Get imageType
   * @return imageType
  **/
  @javax.annotation.Nonnull
  public String getImageType() {
    return imageType;
  }

  public void setImageType(String imageType) {
    this.imageType = imageType;
  }


  public GetRecipeInformation200Response servings(BigDecimal servings) {
    this.servings = servings;
    return this;
  }

   /**
   * Get servings
   * @return servings
  **/
  @javax.annotation.Nonnull
  public BigDecimal getServings() {
    return servings;
  }

  public void setServings(BigDecimal servings) {
    this.servings = servings;
  }


  public GetRecipeInformation200Response readyInMinutes(Integer readyInMinutes) {
    this.readyInMinutes = readyInMinutes;
    return this;
  }

   /**
   * Get readyInMinutes
   * @return readyInMinutes
  **/
  @javax.annotation.Nonnull
  public Integer getReadyInMinutes() {
    return readyInMinutes;
  }

  public void setReadyInMinutes(Integer readyInMinutes) {
    this.readyInMinutes = readyInMinutes;
  }


  public GetRecipeInformation200Response license(String license) {
    this.license = license;
    return this;
  }

   /**
   * Get license
   * @return license
  **/
  @javax.annotation.Nonnull
  public String getLicense() {
    return license;
  }

  public void setLicense(String license) {
    this.license = license;
  }


  public GetRecipeInformation200Response sourceName(String sourceName) {
    this.sourceName = sourceName;
    return this;
  }

   /**
   * Get sourceName
   * @return sourceName
  **/
  @javax.annotation.Nonnull
  public String getSourceName() {
    return sourceName;
  }

  public void setSourceName(String sourceName) {
    this.sourceName = sourceName;
  }


  public GetRecipeInformation200Response sourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
    return this;
  }

   /**
   * Get sourceUrl
   * @return sourceUrl
  **/
  @javax.annotation.Nonnull
  public String getSourceUrl() {
    return sourceUrl;
  }

  public void setSourceUrl(String sourceUrl) {
    this.sourceUrl = sourceUrl;
  }


  public GetRecipeInformation200Response spoonacularSourceUrl(String spoonacularSourceUrl) {
    this.spoonacularSourceUrl = spoonacularSourceUrl;
    return this;
  }

   /**
   * Get spoonacularSourceUrl
   * @return spoonacularSourceUrl
  **/
  @javax.annotation.Nonnull
  public String getSpoonacularSourceUrl() {
    return spoonacularSourceUrl;
  }

  public void setSpoonacularSourceUrl(String spoonacularSourceUrl) {
    this.spoonacularSourceUrl = spoonacularSourceUrl;
  }


  public GetRecipeInformation200Response aggregateLikes(Integer aggregateLikes) {
    this.aggregateLikes = aggregateLikes;
    return this;
  }

   /**
   * Get aggregateLikes
   * @return aggregateLikes
  **/
  @javax.annotation.Nonnull
  public Integer getAggregateLikes() {
    return aggregateLikes;
  }

  public void setAggregateLikes(Integer aggregateLikes) {
    this.aggregateLikes = aggregateLikes;
  }


  public GetRecipeInformation200Response healthScore(BigDecimal healthScore) {
    this.healthScore = healthScore;
    return this;
  }

   /**
   * Get healthScore
   * @return healthScore
  **/
  @javax.annotation.Nonnull
  public BigDecimal getHealthScore() {
    return healthScore;
  }

  public void setHealthScore(BigDecimal healthScore) {
    this.healthScore = healthScore;
  }


  public GetRecipeInformation200Response spoonacularScore(BigDecimal spoonacularScore) {
    this.spoonacularScore = spoonacularScore;
    return this;
  }

   /**
   * Get spoonacularScore
   * @return spoonacularScore
  **/
  @javax.annotation.Nonnull
  public BigDecimal getSpoonacularScore() {
    return spoonacularScore;
  }

  public void setSpoonacularScore(BigDecimal spoonacularScore) {
    this.spoonacularScore = spoonacularScore;
  }


  public GetRecipeInformation200Response pricePerServing(BigDecimal pricePerServing) {
    this.pricePerServing = pricePerServing;
    return this;
  }

   /**
   * Get pricePerServing
   * @return pricePerServing
  **/
  @javax.annotation.Nonnull
  public BigDecimal getPricePerServing() {
    return pricePerServing;
  }

  public void setPricePerServing(BigDecimal pricePerServing) {
    this.pricePerServing = pricePerServing;
  }


  public GetRecipeInformation200Response analyzedInstructions(List<Object> analyzedInstructions) {
    this.analyzedInstructions = analyzedInstructions;
    return this;
  }

  public GetRecipeInformation200Response addAnalyzedInstructionsItem(Object analyzedInstructionsItem) {
    if (this.analyzedInstructions == null) {
      this.analyzedInstructions = new ArrayList<>();
    }
    this.analyzedInstructions.add(analyzedInstructionsItem);
    return this;
  }

   /**
   * Get analyzedInstructions
   * @return analyzedInstructions
  **/
  @javax.annotation.Nonnull
  public List<Object> getAnalyzedInstructions() {
    return analyzedInstructions;
  }

  public void setAnalyzedInstructions(List<Object> analyzedInstructions) {
    this.analyzedInstructions = analyzedInstructions;
  }


  public GetRecipeInformation200Response cheap(Boolean cheap) {
    this.cheap = cheap;
    return this;
  }

   /**
   * Get cheap
   * @return cheap
  **/
  @javax.annotation.Nonnull
  public Boolean getCheap() {
    return cheap;
  }

  public void setCheap(Boolean cheap) {
    this.cheap = cheap;
  }


  public GetRecipeInformation200Response creditsText(String creditsText) {
    this.creditsText = creditsText;
    return this;
  }

   /**
   * Get creditsText
   * @return creditsText
  **/
  @javax.annotation.Nonnull
  public String getCreditsText() {
    return creditsText;
  }

  public void setCreditsText(String creditsText) {
    this.creditsText = creditsText;
  }


  public GetRecipeInformation200Response cuisines(List<String> cuisines) {
    this.cuisines = cuisines;
    return this;
  }

  public GetRecipeInformation200Response addCuisinesItem(String cuisinesItem) {
    if (this.cuisines == null) {
      this.cuisines = new ArrayList<>();
    }
    this.cuisines.add(cuisinesItem);
    return this;
  }

   /**
   * Get cuisines
   * @return cuisines
  **/
  @javax.annotation.Nonnull
  public List<String> getCuisines() {
    return cuisines;
  }

  public void setCuisines(List<String> cuisines) {
    this.cuisines = cuisines;
  }


  public GetRecipeInformation200Response dairyFree(Boolean dairyFree) {
    this.dairyFree = dairyFree;
    return this;
  }

   /**
   * Get dairyFree
   * @return dairyFree
  **/
  @javax.annotation.Nonnull
  public Boolean getDairyFree() {
    return dairyFree;
  }

  public void setDairyFree(Boolean dairyFree) {
    this.dairyFree = dairyFree;
  }


  public GetRecipeInformation200Response diets(List<String> diets) {
    this.diets = diets;
    return this;
  }

  public GetRecipeInformation200Response addDietsItem(String dietsItem) {
    if (this.diets == null) {
      this.diets = new ArrayList<>();
    }
    this.diets.add(dietsItem);
    return this;
  }

   /**
   * Get diets
   * @return diets
  **/
  @javax.annotation.Nonnull
  public List<String> getDiets() {
    return diets;
  }

  public void setDiets(List<String> diets) {
    this.diets = diets;
  }


  public GetRecipeInformation200Response gaps(String gaps) {
    this.gaps = gaps;
    return this;
  }

   /**
   * Get gaps
   * @return gaps
  **/
  @javax.annotation.Nonnull
  public String getGaps() {
    return gaps;
  }

  public void setGaps(String gaps) {
    this.gaps = gaps;
  }


  public GetRecipeInformation200Response glutenFree(Boolean glutenFree) {
    this.glutenFree = glutenFree;
    return this;
  }

   /**
   * Get glutenFree
   * @return glutenFree
  **/
  @javax.annotation.Nonnull
  public Boolean getGlutenFree() {
    return glutenFree;
  }

  public void setGlutenFree(Boolean glutenFree) {
    this.glutenFree = glutenFree;
  }


  public GetRecipeInformation200Response instructions(String instructions) {
    this.instructions = instructions;
    return this;
  }

   /**
   * Get instructions
   * @return instructions
  **/
  @javax.annotation.Nonnull
  public String getInstructions() {
    return instructions;
  }

  public void setInstructions(String instructions) {
    this.instructions = instructions;
  }


  public GetRecipeInformation200Response ketogenic(Boolean ketogenic) {
    this.ketogenic = ketogenic;
    return this;
  }

   /**
   * Get ketogenic
   * @return ketogenic
  **/
  @javax.annotation.Nonnull
  public Boolean getKetogenic() {
    return ketogenic;
  }

  public void setKetogenic(Boolean ketogenic) {
    this.ketogenic = ketogenic;
  }


  public GetRecipeInformation200Response lowFodmap(Boolean lowFodmap) {
    this.lowFodmap = lowFodmap;
    return this;
  }

   /**
   * Get lowFodmap
   * @return lowFodmap
  **/
  @javax.annotation.Nonnull
  public Boolean getLowFodmap() {
    return lowFodmap;
  }

  public void setLowFodmap(Boolean lowFodmap) {
    this.lowFodmap = lowFodmap;
  }


  public GetRecipeInformation200Response occasions(List<String> occasions) {
    this.occasions = occasions;
    return this;
  }

  public GetRecipeInformation200Response addOccasionsItem(String occasionsItem) {
    if (this.occasions == null) {
      this.occasions = new ArrayList<>();
    }
    this.occasions.add(occasionsItem);
    return this;
  }

   /**
   * Get occasions
   * @return occasions
  **/
  @javax.annotation.Nonnull
  public List<String> getOccasions() {
    return occasions;
  }

  public void setOccasions(List<String> occasions) {
    this.occasions = occasions;
  }


  public GetRecipeInformation200Response sustainable(Boolean sustainable) {
    this.sustainable = sustainable;
    return this;
  }

   /**
   * Get sustainable
   * @return sustainable
  **/
  @javax.annotation.Nonnull
  public Boolean getSustainable() {
    return sustainable;
  }

  public void setSustainable(Boolean sustainable) {
    this.sustainable = sustainable;
  }


  public GetRecipeInformation200Response vegan(Boolean vegan) {
    this.vegan = vegan;
    return this;
  }

   /**
   * Get vegan
   * @return vegan
  **/
  @javax.annotation.Nonnull
  public Boolean getVegan() {
    return vegan;
  }

  public void setVegan(Boolean vegan) {
    this.vegan = vegan;
  }


  public GetRecipeInformation200Response vegetarian(Boolean vegetarian) {
    this.vegetarian = vegetarian;
    return this;
  }

   /**
   * Get vegetarian
   * @return vegetarian
  **/
  @javax.annotation.Nonnull
  public Boolean getVegetarian() {
    return vegetarian;
  }

  public void setVegetarian(Boolean vegetarian) {
    this.vegetarian = vegetarian;
  }


  public GetRecipeInformation200Response veryHealthy(Boolean veryHealthy) {
    this.veryHealthy = veryHealthy;
    return this;
  }

   /**
   * Get veryHealthy
   * @return veryHealthy
  **/
  @javax.annotation.Nonnull
  public Boolean getVeryHealthy() {
    return veryHealthy;
  }

  public void setVeryHealthy(Boolean veryHealthy) {
    this.veryHealthy = veryHealthy;
  }


  public GetRecipeInformation200Response veryPopular(Boolean veryPopular) {
    this.veryPopular = veryPopular;
    return this;
  }

   /**
   * Get veryPopular
   * @return veryPopular
  **/
  @javax.annotation.Nonnull
  public Boolean getVeryPopular() {
    return veryPopular;
  }

  public void setVeryPopular(Boolean veryPopular) {
    this.veryPopular = veryPopular;
  }


  public GetRecipeInformation200Response whole30(Boolean whole30) {
    this.whole30 = whole30;
    return this;
  }

   /**
   * Get whole30
   * @return whole30
  **/
  @javax.annotation.Nonnull
  public Boolean getWhole30() {
    return whole30;
  }

  public void setWhole30(Boolean whole30) {
    this.whole30 = whole30;
  }


  public GetRecipeInformation200Response weightWatcherSmartPoints(BigDecimal weightWatcherSmartPoints) {
    this.weightWatcherSmartPoints = weightWatcherSmartPoints;
    return this;
  }

   /**
   * Get weightWatcherSmartPoints
   * @return weightWatcherSmartPoints
  **/
  @javax.annotation.Nonnull
  public BigDecimal getWeightWatcherSmartPoints() {
    return weightWatcherSmartPoints;
  }

  public void setWeightWatcherSmartPoints(BigDecimal weightWatcherSmartPoints) {
    this.weightWatcherSmartPoints = weightWatcherSmartPoints;
  }


  public GetRecipeInformation200Response dishTypes(List<String> dishTypes) {
    this.dishTypes = dishTypes;
    return this;
  }

  public GetRecipeInformation200Response addDishTypesItem(String dishTypesItem) {
    if (this.dishTypes == null) {
      this.dishTypes = new ArrayList<>();
    }
    this.dishTypes.add(dishTypesItem);
    return this;
  }

   /**
   * Get dishTypes
   * @return dishTypes
  **/
  @javax.annotation.Nonnull
  public List<String> getDishTypes() {
    return dishTypes;
  }

  public void setDishTypes(List<String> dishTypes) {
    this.dishTypes = dishTypes;
  }


  public GetRecipeInformation200Response extendedIngredients(Set<GetRecipeInformation200ResponseExtendedIngredientsInner> extendedIngredients) {
    this.extendedIngredients = extendedIngredients;
    return this;
  }

  public GetRecipeInformation200Response addExtendedIngredientsItem(GetRecipeInformation200ResponseExtendedIngredientsInner extendedIngredientsItem) {
    if (this.extendedIngredients == null) {
      this.extendedIngredients = new LinkedHashSet<>();
    }
    this.extendedIngredients.add(extendedIngredientsItem);
    return this;
  }

   /**
   * Get extendedIngredients
   * @return extendedIngredients
  **/
  @javax.annotation.Nonnull
  public Set<GetRecipeInformation200ResponseExtendedIngredientsInner> getExtendedIngredients() {
    return extendedIngredients;
  }

  public void setExtendedIngredients(Set<GetRecipeInformation200ResponseExtendedIngredientsInner> extendedIngredients) {
    this.extendedIngredients = extendedIngredients;
  }


  public GetRecipeInformation200Response summary(String summary) {
    this.summary = summary;
    return this;
  }

   /**
   * Get summary
   * @return summary
  **/
  @javax.annotation.Nonnull
  public String getSummary() {
    return summary;
  }

  public void setSummary(String summary) {
    this.summary = summary;
  }


  public GetRecipeInformation200Response winePairing(GetRecipeInformation200ResponseWinePairing winePairing) {
    this.winePairing = winePairing;
    return this;
  }

   /**
   * Get winePairing
   * @return winePairing
  **/
  @javax.annotation.Nonnull
  public GetRecipeInformation200ResponseWinePairing getWinePairing() {
    return winePairing;
  }

  public void setWinePairing(GetRecipeInformation200ResponseWinePairing winePairing) {
    this.winePairing = winePairing;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    GetRecipeInformation200Response getRecipeInformation200Response = (GetRecipeInformation200Response) o;
    return Objects.equals(this.id, getRecipeInformation200Response.id) &&
        Objects.equals(this.title, getRecipeInformation200Response.title) &&
        Objects.equals(this.image, getRecipeInformation200Response.image) &&
        Objects.equals(this.imageType, getRecipeInformation200Response.imageType) &&
        Objects.equals(this.servings, getRecipeInformation200Response.servings) &&
        Objects.equals(this.readyInMinutes, getRecipeInformation200Response.readyInMinutes) &&
        Objects.equals(this.license, getRecipeInformation200Response.license) &&
        Objects.equals(this.sourceName, getRecipeInformation200Response.sourceName) &&
        Objects.equals(this.sourceUrl, getRecipeInformation200Response.sourceUrl) &&
        Objects.equals(this.spoonacularSourceUrl, getRecipeInformation200Response.spoonacularSourceUrl) &&
        Objects.equals(this.aggregateLikes, getRecipeInformation200Response.aggregateLikes) &&
        Objects.equals(this.healthScore, getRecipeInformation200Response.healthScore) &&
        Objects.equals(this.spoonacularScore, getRecipeInformation200Response.spoonacularScore) &&
        Objects.equals(this.pricePerServing, getRecipeInformation200Response.pricePerServing) &&
        Objects.equals(this.analyzedInstructions, getRecipeInformation200Response.analyzedInstructions) &&
        Objects.equals(this.cheap, getRecipeInformation200Response.cheap) &&
        Objects.equals(this.creditsText, getRecipeInformation200Response.creditsText) &&
        Objects.equals(this.cuisines, getRecipeInformation200Response.cuisines) &&
        Objects.equals(this.dairyFree, getRecipeInformation200Response.dairyFree) &&
        Objects.equals(this.diets, getRecipeInformation200Response.diets) &&
        Objects.equals(this.gaps, getRecipeInformation200Response.gaps) &&
        Objects.equals(this.glutenFree, getRecipeInformation200Response.glutenFree) &&
        Objects.equals(this.instructions, getRecipeInformation200Response.instructions) &&
        Objects.equals(this.ketogenic, getRecipeInformation200Response.ketogenic) &&
        Objects.equals(this.lowFodmap, getRecipeInformation200Response.lowFodmap) &&
        Objects.equals(this.occasions, getRecipeInformation200Response.occasions) &&
        Objects.equals(this.sustainable, getRecipeInformation200Response.sustainable) &&
        Objects.equals(this.vegan, getRecipeInformation200Response.vegan) &&
        Objects.equals(this.vegetarian, getRecipeInformation200Response.vegetarian) &&
        Objects.equals(this.veryHealthy, getRecipeInformation200Response.veryHealthy) &&
        Objects.equals(this.veryPopular, getRecipeInformation200Response.veryPopular) &&
        Objects.equals(this.whole30, getRecipeInformation200Response.whole30) &&
        Objects.equals(this.weightWatcherSmartPoints, getRecipeInformation200Response.weightWatcherSmartPoints) &&
        Objects.equals(this.dishTypes, getRecipeInformation200Response.dishTypes) &&
        Objects.equals(this.extendedIngredients, getRecipeInformation200Response.extendedIngredients) &&
        Objects.equals(this.summary, getRecipeInformation200Response.summary) &&
        Objects.equals(this.winePairing, getRecipeInformation200Response.winePairing);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, title, image, imageType, servings, readyInMinutes, license, sourceName, sourceUrl, spoonacularSourceUrl, aggregateLikes, healthScore, spoonacularScore, pricePerServing, analyzedInstructions, cheap, creditsText, cuisines, dairyFree, diets, gaps, glutenFree, instructions, ketogenic, lowFodmap, occasions, sustainable, vegan, vegetarian, veryHealthy, veryPopular, whole30, weightWatcherSmartPoints, dishTypes, extendedIngredients, summary, winePairing);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class GetRecipeInformation200Response {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    title: ").append(toIndentedString(title)).append("\n");
    sb.append("    image: ").append(toIndentedString(image)).append("\n");
    sb.append("    imageType: ").append(toIndentedString(imageType)).append("\n");
    sb.append("    servings: ").append(toIndentedString(servings)).append("\n");
    sb.append("    readyInMinutes: ").append(toIndentedString(readyInMinutes)).append("\n");
    sb.append("    license: ").append(toIndentedString(license)).append("\n");
    sb.append("    sourceName: ").append(toIndentedString(sourceName)).append("\n");
    sb.append("    sourceUrl: ").append(toIndentedString(sourceUrl)).append("\n");
    sb.append("    spoonacularSourceUrl: ").append(toIndentedString(spoonacularSourceUrl)).append("\n");
    sb.append("    aggregateLikes: ").append(toIndentedString(aggregateLikes)).append("\n");
    sb.append("    healthScore: ").append(toIndentedString(healthScore)).append("\n");
    sb.append("    spoonacularScore: ").append(toIndentedString(spoonacularScore)).append("\n");
    sb.append("    pricePerServing: ").append(toIndentedString(pricePerServing)).append("\n");
    sb.append("    analyzedInstructions: ").append(toIndentedString(analyzedInstructions)).append("\n");
    sb.append("    cheap: ").append(toIndentedString(cheap)).append("\n");
    sb.append("    creditsText: ").append(toIndentedString(creditsText)).append("\n");
    sb.append("    cuisines: ").append(toIndentedString(cuisines)).append("\n");
    sb.append("    dairyFree: ").append(toIndentedString(dairyFree)).append("\n");
    sb.append("    diets: ").append(toIndentedString(diets)).append("\n");
    sb.append("    gaps: ").append(toIndentedString(gaps)).append("\n");
    sb.append("    glutenFree: ").append(toIndentedString(glutenFree)).append("\n");
    sb.append("    instructions: ").append(toIndentedString(instructions)).append("\n");
    sb.append("    ketogenic: ").append(toIndentedString(ketogenic)).append("\n");
    sb.append("    lowFodmap: ").append(toIndentedString(lowFodmap)).append("\n");
    sb.append("    occasions: ").append(toIndentedString(occasions)).append("\n");
    sb.append("    sustainable: ").append(toIndentedString(sustainable)).append("\n");
    sb.append("    vegan: ").append(toIndentedString(vegan)).append("\n");
    sb.append("    vegetarian: ").append(toIndentedString(vegetarian)).append("\n");
    sb.append("    veryHealthy: ").append(toIndentedString(veryHealthy)).append("\n");
    sb.append("    veryPopular: ").append(toIndentedString(veryPopular)).append("\n");
    sb.append("    whole30: ").append(toIndentedString(whole30)).append("\n");
    sb.append("    weightWatcherSmartPoints: ").append(toIndentedString(weightWatcherSmartPoints)).append("\n");
    sb.append("    dishTypes: ").append(toIndentedString(dishTypes)).append("\n");
    sb.append("    extendedIngredients: ").append(toIndentedString(extendedIngredients)).append("\n");
    sb.append("    summary: ").append(toIndentedString(summary)).append("\n");
    sb.append("    winePairing: ").append(toIndentedString(winePairing)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("title");
    openapiFields.add("image");
    openapiFields.add("imageType");
    openapiFields.add("servings");
    openapiFields.add("readyInMinutes");
    openapiFields.add("license");
    openapiFields.add("sourceName");
    openapiFields.add("sourceUrl");
    openapiFields.add("spoonacularSourceUrl");
    openapiFields.add("aggregateLikes");
    openapiFields.add("healthScore");
    openapiFields.add("spoonacularScore");
    openapiFields.add("pricePerServing");
    openapiFields.add("analyzedInstructions");
    openapiFields.add("cheap");
    openapiFields.add("creditsText");
    openapiFields.add("cuisines");
    openapiFields.add("dairyFree");
    openapiFields.add("diets");
    openapiFields.add("gaps");
    openapiFields.add("glutenFree");
    openapiFields.add("instructions");
    openapiFields.add("ketogenic");
    openapiFields.add("lowFodmap");
    openapiFields.add("occasions");
    openapiFields.add("sustainable");
    openapiFields.add("vegan");
    openapiFields.add("vegetarian");
    openapiFields.add("veryHealthy");
    openapiFields.add("veryPopular");
    openapiFields.add("whole30");
    openapiFields.add("weightWatcherSmartPoints");
    openapiFields.add("dishTypes");
    openapiFields.add("extendedIngredients");
    openapiFields.add("summary");
    openapiFields.add("winePairing");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("id");
    openapiRequiredFields.add("title");
    openapiRequiredFields.add("image");
    openapiRequiredFields.add("imageType");
    openapiRequiredFields.add("servings");
    openapiRequiredFields.add("readyInMinutes");
    openapiRequiredFields.add("license");
    openapiRequiredFields.add("sourceName");
    openapiRequiredFields.add("sourceUrl");
    openapiRequiredFields.add("spoonacularSourceUrl");
    openapiRequiredFields.add("aggregateLikes");
    openapiRequiredFields.add("healthScore");
    openapiRequiredFields.add("spoonacularScore");
    openapiRequiredFields.add("pricePerServing");
    openapiRequiredFields.add("analyzedInstructions");
    openapiRequiredFields.add("cheap");
    openapiRequiredFields.add("creditsText");
    openapiRequiredFields.add("cuisines");
    openapiRequiredFields.add("dairyFree");
    openapiRequiredFields.add("diets");
    openapiRequiredFields.add("gaps");
    openapiRequiredFields.add("glutenFree");
    openapiRequiredFields.add("instructions");
    openapiRequiredFields.add("ketogenic");
    openapiRequiredFields.add("lowFodmap");
    openapiRequiredFields.add("occasions");
    openapiRequiredFields.add("sustainable");
    openapiRequiredFields.add("vegan");
    openapiRequiredFields.add("vegetarian");
    openapiRequiredFields.add("veryHealthy");
    openapiRequiredFields.add("veryPopular");
    openapiRequiredFields.add("whole30");
    openapiRequiredFields.add("weightWatcherSmartPoints");
    openapiRequiredFields.add("dishTypes");
    openapiRequiredFields.add("extendedIngredients");
    openapiRequiredFields.add("summary");
    openapiRequiredFields.add("winePairing");
  }

 /**
  * Validates the JSON Element and throws an exception if issues found
  *
  * @param jsonElement JSON Element
  * @throws IOException if the JSON Element is invalid with respect to GetRecipeInformation200Response
  */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!GetRecipeInformation200Response.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in GetRecipeInformation200Response is not found in the empty JSON string", GetRecipeInformation200Response.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!GetRecipeInformation200Response.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `GetRecipeInformation200Response` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : GetRecipeInformation200Response.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("title").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `title` to be a primitive type in the JSON string but got `%s`", jsonObj.get("title").toString()));
      }
      if (!jsonObj.get("image").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `image` to be a primitive type in the JSON string but got `%s`", jsonObj.get("image").toString()));
      }
      if (!jsonObj.get("imageType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `imageType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("imageType").toString()));
      }
      if (!jsonObj.get("license").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `license` to be a primitive type in the JSON string but got `%s`", jsonObj.get("license").toString()));
      }
      if (!jsonObj.get("sourceName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceName").toString()));
      }
      if (!jsonObj.get("sourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sourceUrl").toString()));
      }
      if (!jsonObj.get("spoonacularSourceUrl").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `spoonacularSourceUrl` to be a primitive type in the JSON string but got `%s`", jsonObj.get("spoonacularSourceUrl").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("analyzedInstructions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("analyzedInstructions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `analyzedInstructions` to be an array in the JSON string but got `%s`", jsonObj.get("analyzedInstructions").toString()));
      }
      if (!jsonObj.get("creditsText").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creditsText` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creditsText").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("cuisines") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("cuisines").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `cuisines` to be an array in the JSON string but got `%s`", jsonObj.get("cuisines").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("diets") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("diets").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `diets` to be an array in the JSON string but got `%s`", jsonObj.get("diets").toString()));
      }
      if (!jsonObj.get("gaps").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `gaps` to be a primitive type in the JSON string but got `%s`", jsonObj.get("gaps").toString()));
      }
      if (!jsonObj.get("instructions").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `instructions` to be a primitive type in the JSON string but got `%s`", jsonObj.get("instructions").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("occasions") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("occasions").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `occasions` to be an array in the JSON string but got `%s`", jsonObj.get("occasions").toString()));
      }
      // ensure the required json array is present
      if (jsonObj.get("dishTypes") == null) {
        throw new IllegalArgumentException("Expected the field `linkedContent` to be an array in the JSON string but got `null`");
      } else if (!jsonObj.get("dishTypes").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `dishTypes` to be an array in the JSON string but got `%s`", jsonObj.get("dishTypes").toString()));
      }
      // ensure the json data is an array
      if (!jsonObj.get("extendedIngredients").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `extendedIngredients` to be an array in the JSON string but got `%s`", jsonObj.get("extendedIngredients").toString()));
      }

      JsonArray jsonArrayextendedIngredients = jsonObj.getAsJsonArray("extendedIngredients");
      // validate the required field `extendedIngredients` (array)
      for (int i = 0; i < jsonArrayextendedIngredients.size(); i++) {
        GetRecipeInformation200ResponseExtendedIngredientsInner.validateJsonElement(jsonArrayextendedIngredients.get(i));
      };
      if (!jsonObj.get("summary").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `summary` to be a primitive type in the JSON string but got `%s`", jsonObj.get("summary").toString()));
      }
      // validate the required field `winePairing`
      GetRecipeInformation200ResponseWinePairing.validateJsonElement(jsonObj.get("winePairing"));
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!GetRecipeInformation200Response.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'GetRecipeInformation200Response' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<GetRecipeInformation200Response> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(GetRecipeInformation200Response.class));

       return (TypeAdapter<T>) new TypeAdapter<GetRecipeInformation200Response>() {
           @Override
           public void write(JsonWriter out, GetRecipeInformation200Response value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public GetRecipeInformation200Response read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of GetRecipeInformation200Response given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of GetRecipeInformation200Response
  * @throws IOException if the JSON string is invalid with respect to GetRecipeInformation200Response
  */
  public static GetRecipeInformation200Response fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, GetRecipeInformation200Response.class);
  }

 /**
  * Convert an instance of GetRecipeInformation200Response to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

