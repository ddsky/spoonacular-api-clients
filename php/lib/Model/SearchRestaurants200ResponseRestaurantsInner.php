<?php
/**
 * SearchRestaurants200ResponseRestaurantsInner
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * spoonacular API
 *
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what's in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.7.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SearchRestaurants200ResponseRestaurantsInner Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SearchRestaurants200ResponseRestaurantsInner implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'searchRestaurants_200_response_restaurants_inner';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        '_id' => 'string',
        'name' => 'string',
        'phone_number' => 'int',
        'address' => '\OpenAPI\Client\Model\SearchRestaurants200ResponseRestaurantsInnerAddress',
        'type' => 'string',
        'description' => 'string',
        'local_hours' => '\OpenAPI\Client\Model\SearchRestaurants200ResponseRestaurantsInnerLocalHours',
        'cuisines' => 'string[]',
        'food_photos' => 'string[]',
        'logo_photos' => 'string[]',
        'store_photos' => 'string[]',
        'dollar_signs' => 'int',
        'pickup_enabled' => 'bool',
        'delivery_enabled' => 'bool',
        'is_open' => 'bool',
        'offers_first_party_delivery' => 'bool',
        'offers_third_party_delivery' => 'bool',
        'miles' => 'float',
        'weighted_rating_value' => 'float',
        'aggregated_rating_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        '_id' => null,
        'name' => null,
        'phone_number' => null,
        'address' => null,
        'type' => null,
        'description' => null,
        'local_hours' => null,
        'cuisines' => null,
        'food_photos' => null,
        'logo_photos' => null,
        'store_photos' => null,
        'dollar_signs' => null,
        'pickup_enabled' => null,
        'delivery_enabled' => null,
        'is_open' => null,
        'offers_first_party_delivery' => null,
        'offers_third_party_delivery' => null,
        'miles' => null,
        'weighted_rating_value' => null,
        'aggregated_rating_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        '_id' => false,
        'name' => false,
        'phone_number' => false,
        'address' => false,
        'type' => false,
        'description' => false,
        'local_hours' => false,
        'cuisines' => false,
        'food_photos' => false,
        'logo_photos' => false,
        'store_photos' => false,
        'dollar_signs' => false,
        'pickup_enabled' => false,
        'delivery_enabled' => false,
        'is_open' => false,
        'offers_first_party_delivery' => false,
        'offers_third_party_delivery' => false,
        'miles' => false,
        'weighted_rating_value' => false,
        'aggregated_rating_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_id' => '_id',
        'name' => 'name',
        'phone_number' => 'phone_number',
        'address' => 'address',
        'type' => 'type',
        'description' => 'description',
        'local_hours' => 'local_hours',
        'cuisines' => 'cuisines',
        'food_photos' => 'food_photos',
        'logo_photos' => 'logo_photos',
        'store_photos' => 'store_photos',
        'dollar_signs' => 'dollar_signs',
        'pickup_enabled' => 'pickup_enabled',
        'delivery_enabled' => 'delivery_enabled',
        'is_open' => 'is_open',
        'offers_first_party_delivery' => 'offers_first_party_delivery',
        'offers_third_party_delivery' => 'offers_third_party_delivery',
        'miles' => 'miles',
        'weighted_rating_value' => 'weighted_rating_value',
        'aggregated_rating_count' => 'aggregated_rating_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_id' => 'setId',
        'name' => 'setName',
        'phone_number' => 'setPhoneNumber',
        'address' => 'setAddress',
        'type' => 'setType',
        'description' => 'setDescription',
        'local_hours' => 'setLocalHours',
        'cuisines' => 'setCuisines',
        'food_photos' => 'setFoodPhotos',
        'logo_photos' => 'setLogoPhotos',
        'store_photos' => 'setStorePhotos',
        'dollar_signs' => 'setDollarSigns',
        'pickup_enabled' => 'setPickupEnabled',
        'delivery_enabled' => 'setDeliveryEnabled',
        'is_open' => 'setIsOpen',
        'offers_first_party_delivery' => 'setOffersFirstPartyDelivery',
        'offers_third_party_delivery' => 'setOffersThirdPartyDelivery',
        'miles' => 'setMiles',
        'weighted_rating_value' => 'setWeightedRatingValue',
        'aggregated_rating_count' => 'setAggregatedRatingCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_id' => 'getId',
        'name' => 'getName',
        'phone_number' => 'getPhoneNumber',
        'address' => 'getAddress',
        'type' => 'getType',
        'description' => 'getDescription',
        'local_hours' => 'getLocalHours',
        'cuisines' => 'getCuisines',
        'food_photos' => 'getFoodPhotos',
        'logo_photos' => 'getLogoPhotos',
        'store_photos' => 'getStorePhotos',
        'dollar_signs' => 'getDollarSigns',
        'pickup_enabled' => 'getPickupEnabled',
        'delivery_enabled' => 'getDeliveryEnabled',
        'is_open' => 'getIsOpen',
        'offers_first_party_delivery' => 'getOffersFirstPartyDelivery',
        'offers_third_party_delivery' => 'getOffersThirdPartyDelivery',
        'miles' => 'getMiles',
        'weighted_rating_value' => 'getWeightedRatingValue',
        'aggregated_rating_count' => 'getAggregatedRatingCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('_id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('phone_number', $data ?? [], null);
        $this->setIfExists('address', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('local_hours', $data ?? [], null);
        $this->setIfExists('cuisines', $data ?? [], null);
        $this->setIfExists('food_photos', $data ?? [], null);
        $this->setIfExists('logo_photos', $data ?? [], null);
        $this->setIfExists('store_photos', $data ?? [], null);
        $this->setIfExists('dollar_signs', $data ?? [], null);
        $this->setIfExists('pickup_enabled', $data ?? [], null);
        $this->setIfExists('delivery_enabled', $data ?? [], null);
        $this->setIfExists('is_open', $data ?? [], null);
        $this->setIfExists('offers_first_party_delivery', $data ?? [], null);
        $this->setIfExists('offers_third_party_delivery', $data ?? [], null);
        $this->setIfExists('miles', $data ?? [], null);
        $this->setIfExists('weighted_rating_value', $data ?? [], null);
        $this->setIfExists('aggregated_rating_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['_id'];
    }

    /**
     * Sets _id
     *
     * @param string|null $_id _id
     *
     * @return self
     */
    public function setId($_id)
    {
        if (is_null($_id)) {
            throw new \InvalidArgumentException('non-nullable _id cannot be null');
        }
        $this->container['_id'] = $_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phone_number
     *
     * @return int|null
     */
    public function getPhoneNumber()
    {
        return $this->container['phone_number'];
    }

    /**
     * Sets phone_number
     *
     * @param int|null $phone_number phone_number
     *
     * @return self
     */
    public function setPhoneNumber($phone_number)
    {
        if (is_null($phone_number)) {
            throw new \InvalidArgumentException('non-nullable phone_number cannot be null');
        }
        $this->container['phone_number'] = $phone_number;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \OpenAPI\Client\Model\SearchRestaurants200ResponseRestaurantsInnerAddress|null
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \OpenAPI\Client\Model\SearchRestaurants200ResponseRestaurantsInnerAddress|null $address address
     *
     * @return self
     */
    public function setAddress($address)
    {
        if (is_null($address)) {
            throw new \InvalidArgumentException('non-nullable address cannot be null');
        }
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description description
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets local_hours
     *
     * @return \OpenAPI\Client\Model\SearchRestaurants200ResponseRestaurantsInnerLocalHours|null
     */
    public function getLocalHours()
    {
        return $this->container['local_hours'];
    }

    /**
     * Sets local_hours
     *
     * @param \OpenAPI\Client\Model\SearchRestaurants200ResponseRestaurantsInnerLocalHours|null $local_hours local_hours
     *
     * @return self
     */
    public function setLocalHours($local_hours)
    {
        if (is_null($local_hours)) {
            throw new \InvalidArgumentException('non-nullable local_hours cannot be null');
        }
        $this->container['local_hours'] = $local_hours;

        return $this;
    }

    /**
     * Gets cuisines
     *
     * @return string[]|null
     */
    public function getCuisines()
    {
        return $this->container['cuisines'];
    }

    /**
     * Sets cuisines
     *
     * @param string[]|null $cuisines cuisines
     *
     * @return self
     */
    public function setCuisines($cuisines)
    {
        if (is_null($cuisines)) {
            throw new \InvalidArgumentException('non-nullable cuisines cannot be null');
        }
        $this->container['cuisines'] = $cuisines;

        return $this;
    }

    /**
     * Gets food_photos
     *
     * @return string[]|null
     */
    public function getFoodPhotos()
    {
        return $this->container['food_photos'];
    }

    /**
     * Sets food_photos
     *
     * @param string[]|null $food_photos food_photos
     *
     * @return self
     */
    public function setFoodPhotos($food_photos)
    {
        if (is_null($food_photos)) {
            throw new \InvalidArgumentException('non-nullable food_photos cannot be null');
        }
        $this->container['food_photos'] = $food_photos;

        return $this;
    }

    /**
     * Gets logo_photos
     *
     * @return string[]|null
     */
    public function getLogoPhotos()
    {
        return $this->container['logo_photos'];
    }

    /**
     * Sets logo_photos
     *
     * @param string[]|null $logo_photos logo_photos
     *
     * @return self
     */
    public function setLogoPhotos($logo_photos)
    {
        if (is_null($logo_photos)) {
            throw new \InvalidArgumentException('non-nullable logo_photos cannot be null');
        }
        $this->container['logo_photos'] = $logo_photos;

        return $this;
    }

    /**
     * Gets store_photos
     *
     * @return string[]|null
     */
    public function getStorePhotos()
    {
        return $this->container['store_photos'];
    }

    /**
     * Sets store_photos
     *
     * @param string[]|null $store_photos store_photos
     *
     * @return self
     */
    public function setStorePhotos($store_photos)
    {
        if (is_null($store_photos)) {
            throw new \InvalidArgumentException('non-nullable store_photos cannot be null');
        }
        $this->container['store_photos'] = $store_photos;

        return $this;
    }

    /**
     * Gets dollar_signs
     *
     * @return int|null
     */
    public function getDollarSigns()
    {
        return $this->container['dollar_signs'];
    }

    /**
     * Sets dollar_signs
     *
     * @param int|null $dollar_signs dollar_signs
     *
     * @return self
     */
    public function setDollarSigns($dollar_signs)
    {
        if (is_null($dollar_signs)) {
            throw new \InvalidArgumentException('non-nullable dollar_signs cannot be null');
        }
        $this->container['dollar_signs'] = $dollar_signs;

        return $this;
    }

    /**
     * Gets pickup_enabled
     *
     * @return bool|null
     */
    public function getPickupEnabled()
    {
        return $this->container['pickup_enabled'];
    }

    /**
     * Sets pickup_enabled
     *
     * @param bool|null $pickup_enabled pickup_enabled
     *
     * @return self
     */
    public function setPickupEnabled($pickup_enabled)
    {
        if (is_null($pickup_enabled)) {
            throw new \InvalidArgumentException('non-nullable pickup_enabled cannot be null');
        }
        $this->container['pickup_enabled'] = $pickup_enabled;

        return $this;
    }

    /**
     * Gets delivery_enabled
     *
     * @return bool|null
     */
    public function getDeliveryEnabled()
    {
        return $this->container['delivery_enabled'];
    }

    /**
     * Sets delivery_enabled
     *
     * @param bool|null $delivery_enabled delivery_enabled
     *
     * @return self
     */
    public function setDeliveryEnabled($delivery_enabled)
    {
        if (is_null($delivery_enabled)) {
            throw new \InvalidArgumentException('non-nullable delivery_enabled cannot be null');
        }
        $this->container['delivery_enabled'] = $delivery_enabled;

        return $this;
    }

    /**
     * Gets is_open
     *
     * @return bool|null
     */
    public function getIsOpen()
    {
        return $this->container['is_open'];
    }

    /**
     * Sets is_open
     *
     * @param bool|null $is_open is_open
     *
     * @return self
     */
    public function setIsOpen($is_open)
    {
        if (is_null($is_open)) {
            throw new \InvalidArgumentException('non-nullable is_open cannot be null');
        }
        $this->container['is_open'] = $is_open;

        return $this;
    }

    /**
     * Gets offers_first_party_delivery
     *
     * @return bool|null
     */
    public function getOffersFirstPartyDelivery()
    {
        return $this->container['offers_first_party_delivery'];
    }

    /**
     * Sets offers_first_party_delivery
     *
     * @param bool|null $offers_first_party_delivery offers_first_party_delivery
     *
     * @return self
     */
    public function setOffersFirstPartyDelivery($offers_first_party_delivery)
    {
        if (is_null($offers_first_party_delivery)) {
            throw new \InvalidArgumentException('non-nullable offers_first_party_delivery cannot be null');
        }
        $this->container['offers_first_party_delivery'] = $offers_first_party_delivery;

        return $this;
    }

    /**
     * Gets offers_third_party_delivery
     *
     * @return bool|null
     */
    public function getOffersThirdPartyDelivery()
    {
        return $this->container['offers_third_party_delivery'];
    }

    /**
     * Sets offers_third_party_delivery
     *
     * @param bool|null $offers_third_party_delivery offers_third_party_delivery
     *
     * @return self
     */
    public function setOffersThirdPartyDelivery($offers_third_party_delivery)
    {
        if (is_null($offers_third_party_delivery)) {
            throw new \InvalidArgumentException('non-nullable offers_third_party_delivery cannot be null');
        }
        $this->container['offers_third_party_delivery'] = $offers_third_party_delivery;

        return $this;
    }

    /**
     * Gets miles
     *
     * @return float|null
     */
    public function getMiles()
    {
        return $this->container['miles'];
    }

    /**
     * Sets miles
     *
     * @param float|null $miles miles
     *
     * @return self
     */
    public function setMiles($miles)
    {
        if (is_null($miles)) {
            throw new \InvalidArgumentException('non-nullable miles cannot be null');
        }
        $this->container['miles'] = $miles;

        return $this;
    }

    /**
     * Gets weighted_rating_value
     *
     * @return float|null
     */
    public function getWeightedRatingValue()
    {
        return $this->container['weighted_rating_value'];
    }

    /**
     * Sets weighted_rating_value
     *
     * @param float|null $weighted_rating_value weighted_rating_value
     *
     * @return self
     */
    public function setWeightedRatingValue($weighted_rating_value)
    {
        if (is_null($weighted_rating_value)) {
            throw new \InvalidArgumentException('non-nullable weighted_rating_value cannot be null');
        }
        $this->container['weighted_rating_value'] = $weighted_rating_value;

        return $this;
    }

    /**
     * Gets aggregated_rating_count
     *
     * @return int|null
     */
    public function getAggregatedRatingCount()
    {
        return $this->container['aggregated_rating_count'];
    }

    /**
     * Sets aggregated_rating_count
     *
     * @param int|null $aggregated_rating_count aggregated_rating_count
     *
     * @return self
     */
    public function setAggregatedRatingCount($aggregated_rating_count)
    {
        if (is_null($aggregated_rating_count)) {
            throw new \InvalidArgumentException('non-nullable aggregated_rating_count cannot be null');
        }
        $this->container['aggregated_rating_count'] = $aggregated_rating_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


