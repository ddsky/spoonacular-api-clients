/**
 * spoonacular API
 * The spoonacular Nutrition, Recipe, and Food API allows you to access over thousands of recipes, thousands of ingredients, 800,000 food products, over 100,000 menu items, and restaurants. Our food ontology and semantic recipe search engine makes it possible to search for recipes using natural language queries, such as \"gluten free brownies without sugar\" or \"low fat vegan cupcakes.\" You can automatically calculate the nutritional information for any recipe, analyze recipe costs, visualize ingredient lists, find recipes for what\'s in your fridge, find recipes based on special diets, nutritional requirements, or favorite ingredients, classify recipes into types and cuisines, convert ingredient amounts, or even compute an entire meal plan. With our powerful API, you can create many kinds of food and especially nutrition apps.  Special diets/dietary requirements currently available include: vegan, vegetarian, pescetarian, gluten free, grain free, dairy free, high protein, whole 30, low sodium, low carb, Paleo, ketogenic, FODMAP, and Primal.
 *
 * The version of the OpenAPI document: 1.1
 * Contact: mail@spoonacular.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent, HttpParameterCodec, HttpContext 
        }       from '@angular/common/http';
import { CustomHttpParameterCodec }                          from '../encoder';
import { Observable }                                        from 'rxjs';

// @ts-ignore
import { AnalyzeARecipeSearchQuery200Response } from '../model/analyzeARecipeSearchQuery200Response';
// @ts-ignore
import { AnalyzeRecipeInstructions200Response } from '../model/analyzeRecipeInstructions200Response';
// @ts-ignore
import { AutocompleteRecipeSearch200ResponseInner } from '../model/autocompleteRecipeSearch200ResponseInner';
// @ts-ignore
import { ClassifyCuisine200Response } from '../model/classifyCuisine200Response';
// @ts-ignore
import { ComputeGlycemicLoad200Response } from '../model/computeGlycemicLoad200Response';
// @ts-ignore
import { ComputeGlycemicLoadRequest } from '../model/computeGlycemicLoadRequest';
// @ts-ignore
import { ConvertAmounts200Response } from '../model/convertAmounts200Response';
// @ts-ignore
import { CreateRecipeCard200Response } from '../model/createRecipeCard200Response';
// @ts-ignore
import { GetAnalyzedRecipeInstructions200Response } from '../model/getAnalyzedRecipeInstructions200Response';
// @ts-ignore
import { GetRandomRecipes200Response } from '../model/getRandomRecipes200Response';
// @ts-ignore
import { GetRecipeEquipmentByID200Response } from '../model/getRecipeEquipmentByID200Response';
// @ts-ignore
import { GetRecipeInformation200Response } from '../model/getRecipeInformation200Response';
// @ts-ignore
import { GetRecipeInformationBulk200ResponseInner } from '../model/getRecipeInformationBulk200ResponseInner';
// @ts-ignore
import { GetRecipeIngredientsByID200Response } from '../model/getRecipeIngredientsByID200Response';
// @ts-ignore
import { GetRecipeNutritionWidgetByID200Response } from '../model/getRecipeNutritionWidgetByID200Response';
// @ts-ignore
import { GetRecipePriceBreakdownByID200Response } from '../model/getRecipePriceBreakdownByID200Response';
// @ts-ignore
import { GetRecipeTasteByID200Response } from '../model/getRecipeTasteByID200Response';
// @ts-ignore
import { GetSimilarRecipes200ResponseInner } from '../model/getSimilarRecipes200ResponseInner';
// @ts-ignore
import { GuessNutritionByDishName200Response } from '../model/guessNutritionByDishName200Response';
// @ts-ignore
import { ParseIngredients200ResponseInner } from '../model/parseIngredients200ResponseInner';
// @ts-ignore
import { QuickAnswer200Response } from '../model/quickAnswer200Response';
// @ts-ignore
import { SearchRecipes200Response } from '../model/searchRecipes200Response';
// @ts-ignore
import { SearchRecipesByIngredients200ResponseInner } from '../model/searchRecipesByIngredients200ResponseInner';
// @ts-ignore
import { SearchRecipesByNutrients200ResponseInner } from '../model/searchRecipesByNutrients200ResponseInner';
// @ts-ignore
import { SummarizeRecipe200Response } from '../model/summarizeRecipe200Response';

// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';



@Injectable({
  providedIn: 'root'
})
export class RecipesService {

    protected basePath = 'https://api.spoonacular.com';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();
    public encoder: HttpParameterCodec;

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string|string[], @Optional() configuration: Configuration) {
        if (configuration) {
            this.configuration = configuration;
        }
        if (typeof this.configuration.basePath !== 'string') {
            const firstBasePath = Array.isArray(basePath) ? basePath[0] : undefined;
            if (firstBasePath != undefined) {
                basePath = firstBasePath;
            }

            if (typeof basePath !== 'string') {
                basePath = this.basePath;
            }
            this.configuration.basePath = basePath;
        }
        this.encoder = this.configuration.encoder || new CustomHttpParameterCodec();
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }

    // @ts-ignore
    private addToHttpParams(httpParams: HttpParams, value: any, key?: string): HttpParams {
        if (typeof value === "object" && value instanceof Date === false) {
            httpParams = this.addToHttpParamsRecursive(httpParams, value);
        } else {
            httpParams = this.addToHttpParamsRecursive(httpParams, value, key);
        }
        return httpParams;
    }

    private addToHttpParamsRecursive(httpParams: HttpParams, value?: any, key?: string): HttpParams {
        if (value == null) {
            return httpParams;
        }

        if (typeof value === "object") {
            if (Array.isArray(value)) {
                (value as any[]).forEach( elem => httpParams = this.addToHttpParamsRecursive(httpParams, elem, key));
            } else if (value instanceof Date) {
                if (key != null) {
                    httpParams = httpParams.append(key, (value as Date).toISOString().substring(0, 10));
                } else {
                   throw Error("key may not be null if value is Date");
                }
            } else {
                Object.keys(value).forEach( k => httpParams = this.addToHttpParamsRecursive(
                    httpParams, value[k], key != null ? `${key}.${k}` : k));
            }
        } else if (key != null) {
            httpParams = httpParams.append(key, value);
        } else {
            throw Error("key may not be null if value is not object or array");
        }
        return httpParams;
    }

    /**
     * Analyze a Recipe Search Query
     * Parse a recipe search query to find out its intention.
     * @param q The recipe search query.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyzeARecipeSearchQuery(q: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AnalyzeARecipeSearchQuery200Response>;
    public analyzeARecipeSearchQuery(q: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AnalyzeARecipeSearchQuery200Response>>;
    public analyzeARecipeSearchQuery(q: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AnalyzeARecipeSearchQuery200Response>>;
    public analyzeARecipeSearchQuery(q: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling analyzeARecipeSearchQuery.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (q !== undefined && q !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>q, 'q');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/queries/analyze`;
        return this.httpClient.request<AnalyzeARecipeSearchQuery200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Analyze Recipe Instructions
     * This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe\&#39;s instructions will be extracted independently of the step they\&#39;re used in.
     * @param instructions The recipe\\\&#39;s instructions.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public analyzeRecipeInstructions(instructions: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<AnalyzeRecipeInstructions200Response>;
    public analyzeRecipeInstructions(instructions: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<AnalyzeRecipeInstructions200Response>>;
    public analyzeRecipeInstructions(instructions: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<AnalyzeRecipeInstructions200Response>>;
    public analyzeRecipeInstructions(instructions: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (instructions === null || instructions === undefined) {
            throw new Error('Required parameter instructions was null or undefined when calling analyzeRecipeInstructions.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (instructions !== undefined) {
            localVarFormParams = localVarFormParams.append('instructions', <any>instructions) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/analyzeInstructions`;
        return this.httpClient.request<AnalyzeRecipeInstructions200Response>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Autocomplete Recipe Search
     * Autocomplete a partial input to suggest possible recipe names.
     * @param query The (natural language) search query.
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public autocompleteRecipeSearch(query?: string, number?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Set<AutocompleteRecipeSearch200ResponseInner>>;
    public autocompleteRecipeSearch(query?: string, number?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Set<AutocompleteRecipeSearch200ResponseInner>>>;
    public autocompleteRecipeSearch(query?: string, number?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Set<AutocompleteRecipeSearch200ResponseInner>>>;
    public autocompleteRecipeSearch(query?: string, number?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (query !== undefined && query !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>query, 'query');
        }
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/autocomplete`;
        return this.httpClient.request<Set<AutocompleteRecipeSearch200ResponseInner>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Classify Cuisine
     * Classify the recipe\&#39;s cuisine.
     * @param title The title of the recipe.
     * @param ingredientList The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param language The language of the input. Either \&#39;en\&#39; or \&#39;de\&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public classifyCuisine(title: string, ingredientList: string, language?: 'en' | 'de', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ClassifyCuisine200Response>;
    public classifyCuisine(title: string, ingredientList: string, language?: 'en' | 'de', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ClassifyCuisine200Response>>;
    public classifyCuisine(title: string, ingredientList: string, language?: 'en' | 'de', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ClassifyCuisine200Response>>;
    public classifyCuisine(title: string, ingredientList: string, language?: 'en' | 'de', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (title === null || title === undefined) {
            throw new Error('Required parameter title was null or undefined when calling classifyCuisine.');
        }
        if (ingredientList === null || ingredientList === undefined) {
            throw new Error('Required parameter ingredientList was null or undefined when calling classifyCuisine.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (language !== undefined && language !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>language, 'language');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (title !== undefined) {
            localVarFormParams = localVarFormParams.append('title', <any>title) as any || localVarFormParams;
        }
        if (ingredientList !== undefined) {
            localVarFormParams = localVarFormParams.append('ingredientList', <any>ingredientList) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/cuisine`;
        return this.httpClient.request<ClassifyCuisine200Response>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Compute Glycemic Load
     * Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.
     * @param computeGlycemicLoadRequest 
     * @param language The language of the input. Either \&#39;en\&#39; or \&#39;de\&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public computeGlycemicLoad(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language?: 'en' | 'de', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ComputeGlycemicLoad200Response>;
    public computeGlycemicLoad(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language?: 'en' | 'de', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ComputeGlycemicLoad200Response>>;
    public computeGlycemicLoad(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language?: 'en' | 'de', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ComputeGlycemicLoad200Response>>;
    public computeGlycemicLoad(computeGlycemicLoadRequest: ComputeGlycemicLoadRequest, language?: 'en' | 'de', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (computeGlycemicLoadRequest === null || computeGlycemicLoadRequest === undefined) {
            throw new Error('Required parameter computeGlycemicLoadRequest was null or undefined when calling computeGlycemicLoad.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (language !== undefined && language !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>language, 'language');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Content-Type', httpContentTypeSelected);
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/food/ingredients/glycemicLoad`;
        return this.httpClient.request<ComputeGlycemicLoad200Response>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: computeGlycemicLoadRequest,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Convert Amounts
     * Convert amounts like \&quot;2 cups of flour to grams\&quot;.
     * @param ingredientName The ingredient which you want to convert.
     * @param sourceAmount The amount from which you want to convert, e.g. the 2.5 in \&quot;2.5 cups of flour to grams\&quot;.
     * @param sourceUnit The unit from which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @param targetUnit The unit to which you want to convert, e.g. the grams in \&quot;2.5 cups of flour to grams\&quot;. You can also use \&quot;piece\&quot;, e.g. \&quot;3.4 oz tomatoes to piece\&quot;
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public convertAmounts(ingredientName: string, sourceAmount: number, sourceUnit: string, targetUnit: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<ConvertAmounts200Response>;
    public convertAmounts(ingredientName: string, sourceAmount: number, sourceUnit: string, targetUnit: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<ConvertAmounts200Response>>;
    public convertAmounts(ingredientName: string, sourceAmount: number, sourceUnit: string, targetUnit: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<ConvertAmounts200Response>>;
    public convertAmounts(ingredientName: string, sourceAmount: number, sourceUnit: string, targetUnit: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (ingredientName === null || ingredientName === undefined) {
            throw new Error('Required parameter ingredientName was null or undefined when calling convertAmounts.');
        }
        if (sourceAmount === null || sourceAmount === undefined) {
            throw new Error('Required parameter sourceAmount was null or undefined when calling convertAmounts.');
        }
        if (sourceUnit === null || sourceUnit === undefined) {
            throw new Error('Required parameter sourceUnit was null or undefined when calling convertAmounts.');
        }
        if (targetUnit === null || targetUnit === undefined) {
            throw new Error('Required parameter targetUnit was null or undefined when calling convertAmounts.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ingredientName !== undefined && ingredientName !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ingredientName, 'ingredientName');
        }
        if (sourceAmount !== undefined && sourceAmount !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sourceAmount, 'sourceAmount');
        }
        if (sourceUnit !== undefined && sourceUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sourceUnit, 'sourceUnit');
        }
        if (targetUnit !== undefined && targetUnit !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>targetUnit, 'targetUnit');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/convert`;
        return this.httpClient.request<ConvertAmounts200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create Recipe Card
     * Generate a recipe card for a recipe.
     * @param title The title of the recipe.
     * @param ingredients The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
     * @param instructions The instructions to make the recipe. One step per line (separate lines with \\\\n).
     * @param readyInMinutes The number of minutes it takes to get the recipe on the table.
     * @param servings The number of servings the recipe makes.
     * @param mask The mask to put over the recipe image (\\\&#39;ellipseMask\\\&#39;, \\\&#39;diamondMask\\\&#39;, \\\&#39;starMask\\\&#39;, \\\&#39;heartMask\\\&#39;, \\\&#39;potMask\\\&#39;, \\\&#39;fishMask\\\&#39;).
     * @param backgroundImage The background image (\\\&#39;none\\\&#39;, \\\&#39;background1\\\&#39;, or \\\&#39;background2\\\&#39;).
     * @param image The binary image of the recipe as jpg.
     * @param imageUrl If you do not sent a binary image you can also pass the image URL.
     * @param author The author of the recipe.
     * @param backgroundColor The background color for the recipe card as a hex-string.
     * @param fontColor The font color for the recipe card as a hex-string.
     * @param source The source of the recipe.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createRecipeCard(title: string, ingredients: string, instructions: string, readyInMinutes: number, servings: number, mask: string, backgroundImage: string, image?: Blob, imageUrl?: string, author?: string, backgroundColor?: string, fontColor?: string, source?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<CreateRecipeCard200Response>;
    public createRecipeCard(title: string, ingredients: string, instructions: string, readyInMinutes: number, servings: number, mask: string, backgroundImage: string, image?: Blob, imageUrl?: string, author?: string, backgroundColor?: string, fontColor?: string, source?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<CreateRecipeCard200Response>>;
    public createRecipeCard(title: string, ingredients: string, instructions: string, readyInMinutes: number, servings: number, mask: string, backgroundImage: string, image?: Blob, imageUrl?: string, author?: string, backgroundColor?: string, fontColor?: string, source?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<CreateRecipeCard200Response>>;
    public createRecipeCard(title: string, ingredients: string, instructions: string, readyInMinutes: number, servings: number, mask: string, backgroundImage: string, image?: Blob, imageUrl?: string, author?: string, backgroundColor?: string, fontColor?: string, source?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (title === null || title === undefined) {
            throw new Error('Required parameter title was null or undefined when calling createRecipeCard.');
        }
        if (ingredients === null || ingredients === undefined) {
            throw new Error('Required parameter ingredients was null or undefined when calling createRecipeCard.');
        }
        if (instructions === null || instructions === undefined) {
            throw new Error('Required parameter instructions was null or undefined when calling createRecipeCard.');
        }
        if (readyInMinutes === null || readyInMinutes === undefined) {
            throw new Error('Required parameter readyInMinutes was null or undefined when calling createRecipeCard.');
        }
        if (servings === null || servings === undefined) {
            throw new Error('Required parameter servings was null or undefined when calling createRecipeCard.');
        }
        if (mask === null || mask === undefined) {
            throw new Error('Required parameter mask was null or undefined when calling createRecipeCard.');
        }
        if (backgroundImage === null || backgroundImage === undefined) {
            throw new Error('Required parameter backgroundImage was null or undefined when calling createRecipeCard.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'multipart/form-data'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        // see https://stackoverflow.com/questions/4007969/application-x-www-form-urlencoded-or-multipart-form-data
        localVarUseForm = canConsumeForm;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (title !== undefined) {
            localVarFormParams = localVarFormParams.append('title', <any>title) as any || localVarFormParams;
        }
        if (ingredients !== undefined) {
            localVarFormParams = localVarFormParams.append('ingredients', <any>ingredients) as any || localVarFormParams;
        }
        if (instructions !== undefined) {
            localVarFormParams = localVarFormParams.append('instructions', <any>instructions) as any || localVarFormParams;
        }
        if (readyInMinutes !== undefined) {
            localVarFormParams = localVarFormParams.append('readyInMinutes', <any>readyInMinutes) as any || localVarFormParams;
        }
        if (servings !== undefined) {
            localVarFormParams = localVarFormParams.append('servings', <any>servings) as any || localVarFormParams;
        }
        if (mask !== undefined) {
            localVarFormParams = localVarFormParams.append('mask', <any>mask) as any || localVarFormParams;
        }
        if (backgroundImage !== undefined) {
            localVarFormParams = localVarFormParams.append('backgroundImage', <any>backgroundImage) as any || localVarFormParams;
        }
        if (image !== undefined) {
            localVarFormParams = localVarFormParams.append('image', <any>image) as any || localVarFormParams;
        }
        if (imageUrl !== undefined) {
            localVarFormParams = localVarFormParams.append('imageUrl', <any>imageUrl) as any || localVarFormParams;
        }
        if (author !== undefined) {
            localVarFormParams = localVarFormParams.append('author', <any>author) as any || localVarFormParams;
        }
        if (backgroundColor !== undefined) {
            localVarFormParams = localVarFormParams.append('backgroundColor', <any>backgroundColor) as any || localVarFormParams;
        }
        if (fontColor !== undefined) {
            localVarFormParams = localVarFormParams.append('fontColor', <any>fontColor) as any || localVarFormParams;
        }
        if (source !== undefined) {
            localVarFormParams = localVarFormParams.append('source', <any>source) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/visualizeRecipe`;
        return this.httpClient.request<CreateRecipeCard200Response>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Equipment by ID Image
     * Visualize a recipe\&#39;s equipment list as an image.
     * @param id The recipe id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public equipmentByIDImage(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public equipmentByIDImage(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public equipmentByIDImage(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public equipmentByIDImage(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling equipmentByIDImage.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/png'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/equipmentWidget.png`;
        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Extract Recipe from Website
     * This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.
     * @param url The URL of the recipe page.
     * @param forceExtraction If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
     * @param analyze If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param includeTaste Whether taste data should be added to correctly parsed ingredients.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public extractRecipeFromWebsite(url: string, forceExtraction?: boolean, analyze?: boolean, includeNutrition?: boolean, includeTaste?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRecipeInformation200Response>;
    public extractRecipeFromWebsite(url: string, forceExtraction?: boolean, analyze?: boolean, includeNutrition?: boolean, includeTaste?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRecipeInformation200Response>>;
    public extractRecipeFromWebsite(url: string, forceExtraction?: boolean, analyze?: boolean, includeNutrition?: boolean, includeTaste?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRecipeInformation200Response>>;
    public extractRecipeFromWebsite(url: string, forceExtraction?: boolean, analyze?: boolean, includeNutrition?: boolean, includeTaste?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (url === null || url === undefined) {
            throw new Error('Required parameter url was null or undefined when calling extractRecipeFromWebsite.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (url !== undefined && url !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>url, 'url');
        }
        if (forceExtraction !== undefined && forceExtraction !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>forceExtraction, 'forceExtraction');
        }
        if (analyze !== undefined && analyze !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>analyze, 'analyze');
        }
        if (includeNutrition !== undefined && includeNutrition !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeNutrition, 'includeNutrition');
        }
        if (includeTaste !== undefined && includeTaste !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeTaste, 'includeTaste');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/extract`;
        return this.httpClient.request<GetRecipeInformation200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Analyzed Recipe Instructions
     * Get an analyzed breakdown of a recipe\&#39;s instructions. Each step is enriched with the ingredients and equipment required.
     * @param id The item\&#39;s id.
     * @param stepBreakdown Whether to break down the recipe steps even more.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAnalyzedRecipeInstructions(id: number, stepBreakdown?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetAnalyzedRecipeInstructions200Response>;
    public getAnalyzedRecipeInstructions(id: number, stepBreakdown?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetAnalyzedRecipeInstructions200Response>>;
    public getAnalyzedRecipeInstructions(id: number, stepBreakdown?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetAnalyzedRecipeInstructions200Response>>;
    public getAnalyzedRecipeInstructions(id: number, stepBreakdown?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getAnalyzedRecipeInstructions.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (stepBreakdown !== undefined && stepBreakdown !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>stepBreakdown, 'stepBreakdown');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/analyzedInstructions`;
        return this.httpClient.request<GetAnalyzedRecipeInstructions200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Random Recipes
     * Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param includeTags A comma-separated list of tags that the random recipe(s) must adhere to.
     * @param excludeTags A comma-separated list of tags that the random recipe(s) must not adhere to.
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRandomRecipes(limitLicense?: boolean, includeNutrition?: boolean, includeTags?: string, excludeTags?: string, number?: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRandomRecipes200Response>;
    public getRandomRecipes(limitLicense?: boolean, includeNutrition?: boolean, includeTags?: string, excludeTags?: string, number?: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRandomRecipes200Response>>;
    public getRandomRecipes(limitLicense?: boolean, includeNutrition?: boolean, includeTags?: string, excludeTags?: string, number?: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRandomRecipes200Response>>;
    public getRandomRecipes(limitLicense?: boolean, includeNutrition?: boolean, includeTags?: string, excludeTags?: string, number?: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (limitLicense !== undefined && limitLicense !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limitLicense, 'limitLicense');
        }
        if (includeNutrition !== undefined && includeNutrition !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeNutrition, 'includeNutrition');
        }
        if (includeTags !== undefined && includeTags !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeTags, 'include-tags');
        }
        if (excludeTags !== undefined && excludeTags !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>excludeTags, 'exclude-tags');
        }
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/random`;
        return this.httpClient.request<GetRandomRecipes200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Equipment by ID
     * Get a recipe\&#39;s equipment list.
     * @param id The item\&#39;s id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRecipeEquipmentByID(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRecipeEquipmentByID200Response>;
    public getRecipeEquipmentByID(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRecipeEquipmentByID200Response>>;
    public getRecipeEquipmentByID(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRecipeEquipmentByID200Response>>;
    public getRecipeEquipmentByID(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRecipeEquipmentByID.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/equipmentWidget.json`;
        return this.httpClient.request<GetRecipeEquipmentByID200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Recipe Information
     * Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.
     * @param id The item\&#39;s id.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRecipeInformation(id: number, includeNutrition?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRecipeInformation200Response>;
    public getRecipeInformation(id: number, includeNutrition?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRecipeInformation200Response>>;
    public getRecipeInformation(id: number, includeNutrition?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRecipeInformation200Response>>;
    public getRecipeInformation(id: number, includeNutrition?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRecipeInformation.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (includeNutrition !== undefined && includeNutrition !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeNutrition, 'includeNutrition');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/information`;
        return this.httpClient.request<GetRecipeInformation200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Recipe Information Bulk
     * Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.
     * @param ids A comma-separated list of recipe ids.
     * @param includeNutrition Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRecipeInformationBulk(ids: string, includeNutrition?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Set<GetRecipeInformationBulk200ResponseInner>>;
    public getRecipeInformationBulk(ids: string, includeNutrition?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Set<GetRecipeInformationBulk200ResponseInner>>>;
    public getRecipeInformationBulk(ids: string, includeNutrition?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Set<GetRecipeInformationBulk200ResponseInner>>>;
    public getRecipeInformationBulk(ids: string, includeNutrition?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (ids === null || ids === undefined) {
            throw new Error('Required parameter ids was null or undefined when calling getRecipeInformationBulk.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ids !== undefined && ids !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ids, 'ids');
        }
        if (includeNutrition !== undefined && includeNutrition !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeNutrition, 'includeNutrition');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/informationBulk`;
        return this.httpClient.request<Set<GetRecipeInformationBulk200ResponseInner>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ingredients by ID
     * Get a recipe\&#39;s ingredient list.
     * @param id The item\&#39;s id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRecipeIngredientsByID(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRecipeIngredientsByID200Response>;
    public getRecipeIngredientsByID(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRecipeIngredientsByID200Response>>;
    public getRecipeIngredientsByID(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRecipeIngredientsByID200Response>>;
    public getRecipeIngredientsByID(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRecipeIngredientsByID.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/ingredientWidget.json`;
        return this.httpClient.request<GetRecipeIngredientsByID200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Nutrition by ID
     * Get a recipe\&#39;s nutrition data.
     * @param id The item\&#39;s id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRecipeNutritionWidgetByID(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRecipeNutritionWidgetByID200Response>;
    public getRecipeNutritionWidgetByID(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRecipeNutritionWidgetByID200Response>>;
    public getRecipeNutritionWidgetByID(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRecipeNutritionWidgetByID200Response>>;
    public getRecipeNutritionWidgetByID(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRecipeNutritionWidgetByID.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/nutritionWidget.json`;
        return this.httpClient.request<GetRecipeNutritionWidgetByID200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Price Breakdown by ID
     * Get a recipe\&#39;s price breakdown data.
     * @param id The item\&#39;s id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRecipePriceBreakdownByID(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRecipePriceBreakdownByID200Response>;
    public getRecipePriceBreakdownByID(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRecipePriceBreakdownByID200Response>>;
    public getRecipePriceBreakdownByID(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRecipePriceBreakdownByID200Response>>;
    public getRecipePriceBreakdownByID(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRecipePriceBreakdownByID.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/priceBreakdownWidget.json`;
        return this.httpClient.request<GetRecipePriceBreakdownByID200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Taste by ID
     * Get a recipe\&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item\&#39;s id.
     * @param normalize Normalize to the strongest taste.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getRecipeTasteByID(id: number, normalize?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GetRecipeTasteByID200Response>;
    public getRecipeTasteByID(id: number, normalize?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GetRecipeTasteByID200Response>>;
    public getRecipeTasteByID(id: number, normalize?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GetRecipeTasteByID200Response>>;
    public getRecipeTasteByID(id: number, normalize?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getRecipeTasteByID.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (normalize !== undefined && normalize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>normalize, 'normalize');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/tasteWidget.json`;
        return this.httpClient.request<GetRecipeTasteByID200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get Similar Recipes
     * Find recipes which are similar to the given one.
     * @param id The item\&#39;s id.
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSimilarRecipes(id: number, number?: number, limitLicense?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Set<GetSimilarRecipes200ResponseInner>>;
    public getSimilarRecipes(id: number, number?: number, limitLicense?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Set<GetSimilarRecipes200ResponseInner>>>;
    public getSimilarRecipes(id: number, number?: number, limitLicense?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Set<GetSimilarRecipes200ResponseInner>>>;
    public getSimilarRecipes(id: number, number?: number, limitLicense?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getSimilarRecipes.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }
        if (limitLicense !== undefined && limitLicense !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limitLicense, 'limitLicense');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/similar`;
        return this.httpClient.request<Set<GetSimilarRecipes200ResponseInner>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Guess Nutrition by Dish Name
     * Estimate the macronutrients of a dish based on its title.
     * @param title The title of the dish.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public guessNutritionByDishName(title: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<GuessNutritionByDishName200Response>;
    public guessNutritionByDishName(title: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<GuessNutritionByDishName200Response>>;
    public guessNutritionByDishName(title: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<GuessNutritionByDishName200Response>>;
    public guessNutritionByDishName(title: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (title === null || title === undefined) {
            throw new Error('Required parameter title was null or undefined when calling guessNutritionByDishName.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (title !== undefined && title !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>title, 'title');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/guessNutrition`;
        return this.httpClient.request<GuessNutritionByDishName200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Parse Ingredients
     * Extract an ingredient from plain text.
     * @param ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param servings The number of servings that you can make from the ingredients.
     * @param language The language of the input. Either \&#39;en\&#39; or \&#39;de\&#39;.
     * @param includeNutrition 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public parseIngredients(ingredientList: string, servings: number, language?: 'en' | 'de', includeNutrition?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Set<ParseIngredients200ResponseInner>>;
    public parseIngredients(ingredientList: string, servings: number, language?: 'en' | 'de', includeNutrition?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Set<ParseIngredients200ResponseInner>>>;
    public parseIngredients(ingredientList: string, servings: number, language?: 'en' | 'de', includeNutrition?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Set<ParseIngredients200ResponseInner>>>;
    public parseIngredients(ingredientList: string, servings: number, language?: 'en' | 'de', includeNutrition?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (ingredientList === null || ingredientList === undefined) {
            throw new Error('Required parameter ingredientList was null or undefined when calling parseIngredients.');
        }
        if (servings === null || servings === undefined) {
            throw new Error('Required parameter servings was null or undefined when calling parseIngredients.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (language !== undefined && language !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>language, 'language');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (ingredientList !== undefined) {
            localVarFormParams = localVarFormParams.append('ingredientList', <any>ingredientList) as any || localVarFormParams;
        }
        if (servings !== undefined) {
            localVarFormParams = localVarFormParams.append('servings', <any>servings) as any || localVarFormParams;
        }
        if (includeNutrition !== undefined) {
            localVarFormParams = localVarFormParams.append('includeNutrition', <any>includeNutrition) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/parseIngredients`;
        return this.httpClient.request<Set<ParseIngredients200ResponseInner>>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Price Breakdown by ID Image
     * Visualize a recipe\&#39;s price breakdown.
     * @param id The recipe id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public priceBreakdownByIDImage(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public priceBreakdownByIDImage(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public priceBreakdownByIDImage(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public priceBreakdownByIDImage(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling priceBreakdownByIDImage.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/png'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/priceBreakdownWidget.png`;
        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Quick Answer
     * Answer a nutrition related natural language question.
     * @param q The nutrition related question.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public quickAnswer(q: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<QuickAnswer200Response>;
    public quickAnswer(q: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<QuickAnswer200Response>>;
    public quickAnswer(q: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<QuickAnswer200Response>>;
    public quickAnswer(q: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (q === null || q === undefined) {
            throw new Error('Required parameter q was null or undefined when calling quickAnswer.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (q !== undefined && q !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>q, 'q');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/quickAnswer`;
        return this.httpClient.request<QuickAnswer200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recipe Nutrition by ID Image
     * Visualize a recipe\&#39;s nutritional information as an image.
     * @param id The recipe id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public recipeNutritionByIDImage(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public recipeNutritionByIDImage(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public recipeNutritionByIDImage(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public recipeNutritionByIDImage(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling recipeNutritionByIDImage.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/png'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/nutritionWidget.png`;
        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recipe Nutrition Label Image
     * Get a recipe\&#39;s nutrition label as an image.
     * @param id The recipe id.
     * @param showOptionalNutrients Whether to show optional nutrients.
     * @param showZeroValues Whether to show zero values.
     * @param showIngredients Whether to show a list of ingredients.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public recipeNutritionLabelImage(id: number, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public recipeNutritionLabelImage(id: number, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public recipeNutritionLabelImage(id: number, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public recipeNutritionLabelImage(id: number, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling recipeNutritionLabelImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (showOptionalNutrients !== undefined && showOptionalNutrients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showOptionalNutrients, 'showOptionalNutrients');
        }
        if (showZeroValues !== undefined && showZeroValues !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showZeroValues, 'showZeroValues');
        }
        if (showIngredients !== undefined && showIngredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showIngredients, 'showIngredients');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/png'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/nutritionLabel.png`;
        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recipe Nutrition Label Widget
     * Get a recipe\&#39;s nutrition label as an HTML widget.
     * @param id The recipe id.
     * @param defaultCss Whether the default CSS should be added to the response.
     * @param showOptionalNutrients Whether to show optional nutrients.
     * @param showZeroValues Whether to show zero values.
     * @param showIngredients Whether to show a list of ingredients.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public recipeNutritionLabelWidget(id: number, defaultCss?: boolean, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public recipeNutritionLabelWidget(id: number, defaultCss?: boolean, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public recipeNutritionLabelWidget(id: number, defaultCss?: boolean, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public recipeNutritionLabelWidget(id: number, defaultCss?: boolean, showOptionalNutrients?: boolean, showZeroValues?: boolean, showIngredients?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling recipeNutritionLabelWidget.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (defaultCss !== undefined && defaultCss !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>defaultCss, 'defaultCss');
        }
        if (showOptionalNutrients !== undefined && showOptionalNutrients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showOptionalNutrients, 'showOptionalNutrients');
        }
        if (showZeroValues !== undefined && showZeroValues !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showZeroValues, 'showZeroValues');
        }
        if (showIngredients !== undefined && showIngredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>showIngredients, 'showIngredients');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/nutritionLabel`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recipe Taste by ID Image
     * Get a recipe\&#39;s taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The recipe id.
     * @param normalize Normalize to the strongest taste.
     * @param rgb Red, green, blue values for the chart color.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public recipeTasteByIDImage(id: number, normalize?: boolean, rgb?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<Blob>;
    public recipeTasteByIDImage(id: number, normalize?: boolean, rgb?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Blob>>;
    public recipeTasteByIDImage(id: number, normalize?: boolean, rgb?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Blob>>;
    public recipeTasteByIDImage(id: number, normalize?: boolean, rgb?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'image/png', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling recipeTasteByIDImage.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (normalize !== undefined && normalize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>normalize, 'normalize');
        }
        if (rgb !== undefined && rgb !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rgb, 'rgb');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'image/png'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/tasteWidget.png`;
        return this.httpClient.request('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: "blob",
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Recipes
     * Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.
     * @param query The (natural language) search query.
     * @param cuisine The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as \&#39;OR\&#39;). See a full list of supported cuisines.
     * @param excludeCuisine The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as \&#39;AND\&#39;). See a full list of supported cuisines.
     * @param diet The diet for which the recipes must be suitable. See a full list of supported diets.
     * @param intolerances A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
     * @param equipment The equipment required. Multiple values will be interpreted as \&#39;or\&#39;. For example, value could be \&quot;blender, frying pan, bowl\&quot;.
     * @param includeIngredients A comma-separated list of ingredients that should/must be used in the recipes.
     * @param excludeIngredients A comma-separated list of ingredients or ingredient types that the recipes must not contain.
     * @param type The type of recipe. See a full list of supported meal types.
     * @param instructionsRequired Whether the recipes must have instructions.
     * @param fillIngredients Add information about the ingredients and whether they are used or missing in relation to the query.
     * @param addRecipeInformation If set to true, you get more information about the recipes returned.
     * @param addRecipeNutrition If set to true, you get nutritional information about each recipes returned.
     * @param author The username of the recipe author.
     * @param tags The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
     * @param recipeBoxId The id of the recipe box to which the search should be limited to.
     * @param titleMatch Enter text that must be found in the title of the recipes.
     * @param maxReadyTime The maximum time in minutes it should take to prepare and cook the recipe.
     * @param minServings The minimum amount of servings the recipe is for.
     * @param maxServings The maximum amount of servings the recipe is for.
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
     * @param sort The strategy to sort recipes by. See a full list of supported sorting options.
     * @param sortDirection The direction in which to sort. Must be either \&#39;asc\&#39; (ascending) or \&#39;desc\&#39; (descending).
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have.
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have.
     * @param minProtein The minimum amount of protein in grams the recipe must have.
     * @param maxProtein The maximum amount of protein in grams the recipe can have.
     * @param minCalories The minimum amount of calories the recipe must have.
     * @param maxCalories The maximum amount of calories the recipe can have.
     * @param minFat The minimum amount of fat in grams the recipe must have.
     * @param maxFat The maximum amount of fat in grams the recipe can have.
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have.
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have.
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have.
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have.
     * @param minCopper The minimum amount of copper in milligrams the recipe must have.
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have.
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have.
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have.
     * @param minCholine The minimum amount of choline in milligrams the recipe must have.
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have.
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have.
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have.
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have.
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have.
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have.
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have.
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have.
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have.
     * @param minVitaminC The minimum amount of Vitamin C milligrams the recipe must have.
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have.
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have.
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have.
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have.
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have.
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have.
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have.
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
     * @param minFiber The minimum amount of fiber in grams the recipe must have.
     * @param maxFiber The maximum amount of fiber in grams the recipe can have.
     * @param minFolate The minimum amount of folate in micrograms the recipe must have.
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have.
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have.
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have.
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have.
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have.
     * @param minIron The minimum amount of iron in milligrams the recipe must have.
     * @param maxIron The maximum amount of iron in milligrams the recipe can have.
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have.
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have.
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have.
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have.
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have.
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have.
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have.
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have.
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have.
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have.
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have.
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have.
     * @param minSugar The minimum amount of sugar in grams the recipe must have.
     * @param maxSugar The maximum amount of sugar in grams the recipe can have.
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have.
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have.
     * @param offset The number of results to skip (between 0 and 900).
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRecipes(query?: string, cuisine?: string, excludeCuisine?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, type?: string, instructionsRequired?: boolean, fillIngredients?: boolean, addRecipeInformation?: boolean, addRecipeNutrition?: boolean, author?: string, tags?: string, recipeBoxId?: number, titleMatch?: string, maxReadyTime?: number, minServings?: number, maxServings?: number, ignorePantry?: boolean, sort?: string, sortDirection?: string, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, limitLicense?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SearchRecipes200Response>;
    public searchRecipes(query?: string, cuisine?: string, excludeCuisine?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, type?: string, instructionsRequired?: boolean, fillIngredients?: boolean, addRecipeInformation?: boolean, addRecipeNutrition?: boolean, author?: string, tags?: string, recipeBoxId?: number, titleMatch?: string, maxReadyTime?: number, minServings?: number, maxServings?: number, ignorePantry?: boolean, sort?: string, sortDirection?: string, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, limitLicense?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SearchRecipes200Response>>;
    public searchRecipes(query?: string, cuisine?: string, excludeCuisine?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, type?: string, instructionsRequired?: boolean, fillIngredients?: boolean, addRecipeInformation?: boolean, addRecipeNutrition?: boolean, author?: string, tags?: string, recipeBoxId?: number, titleMatch?: string, maxReadyTime?: number, minServings?: number, maxServings?: number, ignorePantry?: boolean, sort?: string, sortDirection?: string, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, limitLicense?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SearchRecipes200Response>>;
    public searchRecipes(query?: string, cuisine?: string, excludeCuisine?: string, diet?: string, intolerances?: string, equipment?: string, includeIngredients?: string, excludeIngredients?: string, type?: string, instructionsRequired?: boolean, fillIngredients?: boolean, addRecipeInformation?: boolean, addRecipeNutrition?: boolean, author?: string, tags?: string, recipeBoxId?: number, titleMatch?: string, maxReadyTime?: number, minServings?: number, maxServings?: number, ignorePantry?: boolean, sort?: string, sortDirection?: string, minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, limitLicense?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (query !== undefined && query !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>query, 'query');
        }
        if (cuisine !== undefined && cuisine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>cuisine, 'cuisine');
        }
        if (excludeCuisine !== undefined && excludeCuisine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>excludeCuisine, 'excludeCuisine');
        }
        if (diet !== undefined && diet !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>diet, 'diet');
        }
        if (intolerances !== undefined && intolerances !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>intolerances, 'intolerances');
        }
        if (equipment !== undefined && equipment !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>equipment, 'equipment');
        }
        if (includeIngredients !== undefined && includeIngredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>includeIngredients, 'includeIngredients');
        }
        if (excludeIngredients !== undefined && excludeIngredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>excludeIngredients, 'excludeIngredients');
        }
        if (type !== undefined && type !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>type, 'type');
        }
        if (instructionsRequired !== undefined && instructionsRequired !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>instructionsRequired, 'instructionsRequired');
        }
        if (fillIngredients !== undefined && fillIngredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>fillIngredients, 'fillIngredients');
        }
        if (addRecipeInformation !== undefined && addRecipeInformation !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addRecipeInformation, 'addRecipeInformation');
        }
        if (addRecipeNutrition !== undefined && addRecipeNutrition !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>addRecipeNutrition, 'addRecipeNutrition');
        }
        if (author !== undefined && author !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>author, 'author');
        }
        if (tags !== undefined && tags !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>tags, 'tags');
        }
        if (recipeBoxId !== undefined && recipeBoxId !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>recipeBoxId, 'recipeBoxId');
        }
        if (titleMatch !== undefined && titleMatch !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>titleMatch, 'titleMatch');
        }
        if (maxReadyTime !== undefined && maxReadyTime !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxReadyTime, 'maxReadyTime');
        }
        if (minServings !== undefined && minServings !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minServings, 'minServings');
        }
        if (maxServings !== undefined && maxServings !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxServings, 'maxServings');
        }
        if (ignorePantry !== undefined && ignorePantry !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ignorePantry, 'ignorePantry');
        }
        if (sort !== undefined && sort !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sort, 'sort');
        }
        if (sortDirection !== undefined && sortDirection !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>sortDirection, 'sortDirection');
        }
        if (minCarbs !== undefined && minCarbs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCarbs, 'minCarbs');
        }
        if (maxCarbs !== undefined && maxCarbs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCarbs, 'maxCarbs');
        }
        if (minProtein !== undefined && minProtein !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minProtein, 'minProtein');
        }
        if (maxProtein !== undefined && maxProtein !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxProtein, 'maxProtein');
        }
        if (minCalories !== undefined && minCalories !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCalories, 'minCalories');
        }
        if (maxCalories !== undefined && maxCalories !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCalories, 'maxCalories');
        }
        if (minFat !== undefined && minFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFat, 'minFat');
        }
        if (maxFat !== undefined && maxFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFat, 'maxFat');
        }
        if (minAlcohol !== undefined && minAlcohol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minAlcohol, 'minAlcohol');
        }
        if (maxAlcohol !== undefined && maxAlcohol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxAlcohol, 'maxAlcohol');
        }
        if (minCaffeine !== undefined && minCaffeine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCaffeine, 'minCaffeine');
        }
        if (maxCaffeine !== undefined && maxCaffeine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCaffeine, 'maxCaffeine');
        }
        if (minCopper !== undefined && minCopper !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCopper, 'minCopper');
        }
        if (maxCopper !== undefined && maxCopper !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCopper, 'maxCopper');
        }
        if (minCalcium !== undefined && minCalcium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCalcium, 'minCalcium');
        }
        if (maxCalcium !== undefined && maxCalcium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCalcium, 'maxCalcium');
        }
        if (minCholine !== undefined && minCholine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCholine, 'minCholine');
        }
        if (maxCholine !== undefined && maxCholine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCholine, 'maxCholine');
        }
        if (minCholesterol !== undefined && minCholesterol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCholesterol, 'minCholesterol');
        }
        if (maxCholesterol !== undefined && maxCholesterol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCholesterol, 'maxCholesterol');
        }
        if (minFluoride !== undefined && minFluoride !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFluoride, 'minFluoride');
        }
        if (maxFluoride !== undefined && maxFluoride !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFluoride, 'maxFluoride');
        }
        if (minSaturatedFat !== undefined && minSaturatedFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSaturatedFat, 'minSaturatedFat');
        }
        if (maxSaturatedFat !== undefined && maxSaturatedFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSaturatedFat, 'maxSaturatedFat');
        }
        if (minVitaminA !== undefined && minVitaminA !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminA, 'minVitaminA');
        }
        if (maxVitaminA !== undefined && maxVitaminA !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminA, 'maxVitaminA');
        }
        if (minVitaminC !== undefined && minVitaminC !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminC, 'minVitaminC');
        }
        if (maxVitaminC !== undefined && maxVitaminC !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminC, 'maxVitaminC');
        }
        if (minVitaminD !== undefined && minVitaminD !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminD, 'minVitaminD');
        }
        if (maxVitaminD !== undefined && maxVitaminD !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminD, 'maxVitaminD');
        }
        if (minVitaminE !== undefined && minVitaminE !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminE, 'minVitaminE');
        }
        if (maxVitaminE !== undefined && maxVitaminE !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminE, 'maxVitaminE');
        }
        if (minVitaminK !== undefined && minVitaminK !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminK, 'minVitaminK');
        }
        if (maxVitaminK !== undefined && maxVitaminK !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminK, 'maxVitaminK');
        }
        if (minVitaminB1 !== undefined && minVitaminB1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB1, 'minVitaminB1');
        }
        if (maxVitaminB1 !== undefined && maxVitaminB1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB1, 'maxVitaminB1');
        }
        if (minVitaminB2 !== undefined && minVitaminB2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB2, 'minVitaminB2');
        }
        if (maxVitaminB2 !== undefined && maxVitaminB2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB2, 'maxVitaminB2');
        }
        if (minVitaminB5 !== undefined && minVitaminB5 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB5, 'minVitaminB5');
        }
        if (maxVitaminB5 !== undefined && maxVitaminB5 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB5, 'maxVitaminB5');
        }
        if (minVitaminB3 !== undefined && minVitaminB3 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB3, 'minVitaminB3');
        }
        if (maxVitaminB3 !== undefined && maxVitaminB3 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB3, 'maxVitaminB3');
        }
        if (minVitaminB6 !== undefined && minVitaminB6 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB6, 'minVitaminB6');
        }
        if (maxVitaminB6 !== undefined && maxVitaminB6 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB6, 'maxVitaminB6');
        }
        if (minVitaminB12 !== undefined && minVitaminB12 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB12, 'minVitaminB12');
        }
        if (maxVitaminB12 !== undefined && maxVitaminB12 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB12, 'maxVitaminB12');
        }
        if (minFiber !== undefined && minFiber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFiber, 'minFiber');
        }
        if (maxFiber !== undefined && maxFiber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFiber, 'maxFiber');
        }
        if (minFolate !== undefined && minFolate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFolate, 'minFolate');
        }
        if (maxFolate !== undefined && maxFolate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFolate, 'maxFolate');
        }
        if (minFolicAcid !== undefined && minFolicAcid !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFolicAcid, 'minFolicAcid');
        }
        if (maxFolicAcid !== undefined && maxFolicAcid !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFolicAcid, 'maxFolicAcid');
        }
        if (minIodine !== undefined && minIodine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minIodine, 'minIodine');
        }
        if (maxIodine !== undefined && maxIodine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxIodine, 'maxIodine');
        }
        if (minIron !== undefined && minIron !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minIron, 'minIron');
        }
        if (maxIron !== undefined && maxIron !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxIron, 'maxIron');
        }
        if (minMagnesium !== undefined && minMagnesium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minMagnesium, 'minMagnesium');
        }
        if (maxMagnesium !== undefined && maxMagnesium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxMagnesium, 'maxMagnesium');
        }
        if (minManganese !== undefined && minManganese !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minManganese, 'minManganese');
        }
        if (maxManganese !== undefined && maxManganese !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxManganese, 'maxManganese');
        }
        if (minPhosphorus !== undefined && minPhosphorus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minPhosphorus, 'minPhosphorus');
        }
        if (maxPhosphorus !== undefined && maxPhosphorus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxPhosphorus, 'maxPhosphorus');
        }
        if (minPotassium !== undefined && minPotassium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minPotassium, 'minPotassium');
        }
        if (maxPotassium !== undefined && maxPotassium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxPotassium, 'maxPotassium');
        }
        if (minSelenium !== undefined && minSelenium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSelenium, 'minSelenium');
        }
        if (maxSelenium !== undefined && maxSelenium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSelenium, 'maxSelenium');
        }
        if (minSodium !== undefined && minSodium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSodium, 'minSodium');
        }
        if (maxSodium !== undefined && maxSodium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSodium, 'maxSodium');
        }
        if (minSugar !== undefined && minSugar !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSugar, 'minSugar');
        }
        if (maxSugar !== undefined && maxSugar !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSugar, 'maxSugar');
        }
        if (minZinc !== undefined && minZinc !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minZinc, 'minZinc');
        }
        if (maxZinc !== undefined && maxZinc !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxZinc, 'maxZinc');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }
        if (limitLicense !== undefined && limitLicense !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limitLicense, 'limitLicense');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/complexSearch`;
        return this.httpClient.request<SearchRecipes200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Recipes by Ingredients
     *  Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don\&#39;t currently have (post shopping).         
     * @param ingredients A comma-separated list of ingredients that the recipes should contain.
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
     * @param ranking Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
     * @param ignorePantry Whether to ignore typical pantry items, such as water, salt, flour, etc.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRecipesByIngredients(ingredients?: string, number?: number, limitLicense?: boolean, ranking?: number, ignorePantry?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Set<SearchRecipesByIngredients200ResponseInner>>;
    public searchRecipesByIngredients(ingredients?: string, number?: number, limitLicense?: boolean, ranking?: number, ignorePantry?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Set<SearchRecipesByIngredients200ResponseInner>>>;
    public searchRecipesByIngredients(ingredients?: string, number?: number, limitLicense?: boolean, ranking?: number, ignorePantry?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Set<SearchRecipesByIngredients200ResponseInner>>>;
    public searchRecipesByIngredients(ingredients?: string, number?: number, limitLicense?: boolean, ranking?: number, ignorePantry?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (ingredients !== undefined && ingredients !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ingredients, 'ingredients');
        }
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }
        if (limitLicense !== undefined && limitLicense !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limitLicense, 'limitLicense');
        }
        if (ranking !== undefined && ranking !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ranking, 'ranking');
        }
        if (ignorePantry !== undefined && ignorePantry !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>ignorePantry, 'ignorePantry');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/findByIngredients`;
        return this.httpClient.request<Set<SearchRecipesByIngredients200ResponseInner>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Search Recipes by Nutrients
     * Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.
     * @param minCarbs The minimum amount of carbohydrates in grams the recipe must have.
     * @param maxCarbs The maximum amount of carbohydrates in grams the recipe can have.
     * @param minProtein The minimum amount of protein in grams the recipe must have.
     * @param maxProtein The maximum amount of protein in grams the recipe can have.
     * @param minCalories The minimum amount of calories the recipe must have.
     * @param maxCalories The maximum amount of calories the recipe can have.
     * @param minFat The minimum amount of fat in grams the recipe must have.
     * @param maxFat The maximum amount of fat in grams the recipe can have.
     * @param minAlcohol The minimum amount of alcohol in grams the recipe must have.
     * @param maxAlcohol The maximum amount of alcohol in grams the recipe can have.
     * @param minCaffeine The minimum amount of caffeine in milligrams the recipe must have.
     * @param maxCaffeine The maximum amount of caffeine in milligrams the recipe can have.
     * @param minCopper The minimum amount of copper in milligrams the recipe must have.
     * @param maxCopper The maximum amount of copper in milligrams the recipe can have.
     * @param minCalcium The minimum amount of calcium in milligrams the recipe must have.
     * @param maxCalcium The maximum amount of calcium in milligrams the recipe can have.
     * @param minCholine The minimum amount of choline in milligrams the recipe must have.
     * @param maxCholine The maximum amount of choline in milligrams the recipe can have.
     * @param minCholesterol The minimum amount of cholesterol in milligrams the recipe must have.
     * @param maxCholesterol The maximum amount of cholesterol in milligrams the recipe can have.
     * @param minFluoride The minimum amount of fluoride in milligrams the recipe must have.
     * @param maxFluoride The maximum amount of fluoride in milligrams the recipe can have.
     * @param minSaturatedFat The minimum amount of saturated fat in grams the recipe must have.
     * @param maxSaturatedFat The maximum amount of saturated fat in grams the recipe can have.
     * @param minVitaminA The minimum amount of Vitamin A in IU the recipe must have.
     * @param maxVitaminA The maximum amount of Vitamin A in IU the recipe can have.
     * @param minVitaminC The minimum amount of Vitamin C in milligrams the recipe must have.
     * @param maxVitaminC The maximum amount of Vitamin C in milligrams the recipe can have.
     * @param minVitaminD The minimum amount of Vitamin D in micrograms the recipe must have.
     * @param maxVitaminD The maximum amount of Vitamin D in micrograms the recipe can have.
     * @param minVitaminE The minimum amount of Vitamin E in milligrams the recipe must have.
     * @param maxVitaminE The maximum amount of Vitamin E in milligrams the recipe can have.
     * @param minVitaminK The minimum amount of Vitamin K in micrograms the recipe must have.
     * @param maxVitaminK The maximum amount of Vitamin K in micrograms the recipe can have.
     * @param minVitaminB1 The minimum amount of Vitamin B1 in milligrams the recipe must have.
     * @param maxVitaminB1 The maximum amount of Vitamin B1 in milligrams the recipe can have.
     * @param minVitaminB2 The minimum amount of Vitamin B2 in milligrams the recipe must have.
     * @param maxVitaminB2 The maximum amount of Vitamin B2 in milligrams the recipe can have.
     * @param minVitaminB5 The minimum amount of Vitamin B5 in milligrams the recipe must have.
     * @param maxVitaminB5 The maximum amount of Vitamin B5 in milligrams the recipe can have.
     * @param minVitaminB3 The minimum amount of Vitamin B3 in milligrams the recipe must have.
     * @param maxVitaminB3 The maximum amount of Vitamin B3 in milligrams the recipe can have.
     * @param minVitaminB6 The minimum amount of Vitamin B6 in milligrams the recipe must have.
     * @param maxVitaminB6 The maximum amount of Vitamin B6 in milligrams the recipe can have.
     * @param minVitaminB12 The minimum amount of Vitamin B12 in micrograms the recipe must have.
     * @param maxVitaminB12 The maximum amount of Vitamin B12 in micrograms the recipe can have.
     * @param minFiber The minimum amount of fiber in grams the recipe must have.
     * @param maxFiber The maximum amount of fiber in grams the recipe can have.
     * @param minFolate The minimum amount of folate in micrograms the recipe must have.
     * @param maxFolate The maximum amount of folate in micrograms the recipe can have.
     * @param minFolicAcid The minimum amount of folic acid in micrograms the recipe must have.
     * @param maxFolicAcid The maximum amount of folic acid in micrograms the recipe can have.
     * @param minIodine The minimum amount of iodine in micrograms the recipe must have.
     * @param maxIodine The maximum amount of iodine in micrograms the recipe can have.
     * @param minIron The minimum amount of iron in milligrams the recipe must have.
     * @param maxIron The maximum amount of iron in milligrams the recipe can have.
     * @param minMagnesium The minimum amount of magnesium in milligrams the recipe must have.
     * @param maxMagnesium The maximum amount of magnesium in milligrams the recipe can have.
     * @param minManganese The minimum amount of manganese in milligrams the recipe must have.
     * @param maxManganese The maximum amount of manganese in milligrams the recipe can have.
     * @param minPhosphorus The minimum amount of phosphorus in milligrams the recipe must have.
     * @param maxPhosphorus The maximum amount of phosphorus in milligrams the recipe can have.
     * @param minPotassium The minimum amount of potassium in milligrams the recipe must have.
     * @param maxPotassium The maximum amount of potassium in milligrams the recipe can have.
     * @param minSelenium The minimum amount of selenium in micrograms the recipe must have.
     * @param maxSelenium The maximum amount of selenium in micrograms the recipe can have.
     * @param minSodium The minimum amount of sodium in milligrams the recipe must have.
     * @param maxSodium The maximum amount of sodium in milligrams the recipe can have.
     * @param minSugar The minimum amount of sugar in grams the recipe must have.
     * @param maxSugar The maximum amount of sugar in grams the recipe can have.
     * @param minZinc The minimum amount of zinc in milligrams the recipe must have.
     * @param maxZinc The maximum amount of zinc in milligrams the recipe can have.
     * @param offset The number of results to skip (between 0 and 900).
     * @param number The maximum number of items to return (between 1 and 100). Defaults to 10.
     * @param random If true, every request will give you a random set of recipes within the requested limits.
     * @param limitLicense Whether the recipes should have an open license that allows display with proper attribution.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public searchRecipesByNutrients(minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, random?: boolean, limitLicense?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<Set<SearchRecipesByNutrients200ResponseInner>>;
    public searchRecipesByNutrients(minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, random?: boolean, limitLicense?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<Set<SearchRecipesByNutrients200ResponseInner>>>;
    public searchRecipesByNutrients(minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, random?: boolean, limitLicense?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<Set<SearchRecipesByNutrients200ResponseInner>>>;
    public searchRecipesByNutrients(minCarbs?: number, maxCarbs?: number, minProtein?: number, maxProtein?: number, minCalories?: number, maxCalories?: number, minFat?: number, maxFat?: number, minAlcohol?: number, maxAlcohol?: number, minCaffeine?: number, maxCaffeine?: number, minCopper?: number, maxCopper?: number, minCalcium?: number, maxCalcium?: number, minCholine?: number, maxCholine?: number, minCholesterol?: number, maxCholesterol?: number, minFluoride?: number, maxFluoride?: number, minSaturatedFat?: number, maxSaturatedFat?: number, minVitaminA?: number, maxVitaminA?: number, minVitaminC?: number, maxVitaminC?: number, minVitaminD?: number, maxVitaminD?: number, minVitaminE?: number, maxVitaminE?: number, minVitaminK?: number, maxVitaminK?: number, minVitaminB1?: number, maxVitaminB1?: number, minVitaminB2?: number, maxVitaminB2?: number, minVitaminB5?: number, maxVitaminB5?: number, minVitaminB3?: number, maxVitaminB3?: number, minVitaminB6?: number, maxVitaminB6?: number, minVitaminB12?: number, maxVitaminB12?: number, minFiber?: number, maxFiber?: number, minFolate?: number, maxFolate?: number, minFolicAcid?: number, maxFolicAcid?: number, minIodine?: number, maxIodine?: number, minIron?: number, maxIron?: number, minMagnesium?: number, maxMagnesium?: number, minManganese?: number, maxManganese?: number, minPhosphorus?: number, maxPhosphorus?: number, minPotassium?: number, maxPotassium?: number, minSelenium?: number, maxSelenium?: number, minSodium?: number, maxSodium?: number, minSugar?: number, maxSugar?: number, minZinc?: number, maxZinc?: number, offset?: number, number?: number, random?: boolean, limitLicense?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (minCarbs !== undefined && minCarbs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCarbs, 'minCarbs');
        }
        if (maxCarbs !== undefined && maxCarbs !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCarbs, 'maxCarbs');
        }
        if (minProtein !== undefined && minProtein !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minProtein, 'minProtein');
        }
        if (maxProtein !== undefined && maxProtein !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxProtein, 'maxProtein');
        }
        if (minCalories !== undefined && minCalories !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCalories, 'minCalories');
        }
        if (maxCalories !== undefined && maxCalories !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCalories, 'maxCalories');
        }
        if (minFat !== undefined && minFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFat, 'minFat');
        }
        if (maxFat !== undefined && maxFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFat, 'maxFat');
        }
        if (minAlcohol !== undefined && minAlcohol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minAlcohol, 'minAlcohol');
        }
        if (maxAlcohol !== undefined && maxAlcohol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxAlcohol, 'maxAlcohol');
        }
        if (minCaffeine !== undefined && minCaffeine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCaffeine, 'minCaffeine');
        }
        if (maxCaffeine !== undefined && maxCaffeine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCaffeine, 'maxCaffeine');
        }
        if (minCopper !== undefined && minCopper !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCopper, 'minCopper');
        }
        if (maxCopper !== undefined && maxCopper !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCopper, 'maxCopper');
        }
        if (minCalcium !== undefined && minCalcium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCalcium, 'minCalcium');
        }
        if (maxCalcium !== undefined && maxCalcium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCalcium, 'maxCalcium');
        }
        if (minCholine !== undefined && minCholine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCholine, 'minCholine');
        }
        if (maxCholine !== undefined && maxCholine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCholine, 'maxCholine');
        }
        if (minCholesterol !== undefined && minCholesterol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minCholesterol, 'minCholesterol');
        }
        if (maxCholesterol !== undefined && maxCholesterol !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxCholesterol, 'maxCholesterol');
        }
        if (minFluoride !== undefined && minFluoride !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFluoride, 'minFluoride');
        }
        if (maxFluoride !== undefined && maxFluoride !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFluoride, 'maxFluoride');
        }
        if (minSaturatedFat !== undefined && minSaturatedFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSaturatedFat, 'minSaturatedFat');
        }
        if (maxSaturatedFat !== undefined && maxSaturatedFat !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSaturatedFat, 'maxSaturatedFat');
        }
        if (minVitaminA !== undefined && minVitaminA !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminA, 'minVitaminA');
        }
        if (maxVitaminA !== undefined && maxVitaminA !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminA, 'maxVitaminA');
        }
        if (minVitaminC !== undefined && minVitaminC !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminC, 'minVitaminC');
        }
        if (maxVitaminC !== undefined && maxVitaminC !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminC, 'maxVitaminC');
        }
        if (minVitaminD !== undefined && minVitaminD !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminD, 'minVitaminD');
        }
        if (maxVitaminD !== undefined && maxVitaminD !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminD, 'maxVitaminD');
        }
        if (minVitaminE !== undefined && minVitaminE !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminE, 'minVitaminE');
        }
        if (maxVitaminE !== undefined && maxVitaminE !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminE, 'maxVitaminE');
        }
        if (minVitaminK !== undefined && minVitaminK !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminK, 'minVitaminK');
        }
        if (maxVitaminK !== undefined && maxVitaminK !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminK, 'maxVitaminK');
        }
        if (minVitaminB1 !== undefined && minVitaminB1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB1, 'minVitaminB1');
        }
        if (maxVitaminB1 !== undefined && maxVitaminB1 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB1, 'maxVitaminB1');
        }
        if (minVitaminB2 !== undefined && minVitaminB2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB2, 'minVitaminB2');
        }
        if (maxVitaminB2 !== undefined && maxVitaminB2 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB2, 'maxVitaminB2');
        }
        if (minVitaminB5 !== undefined && minVitaminB5 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB5, 'minVitaminB5');
        }
        if (maxVitaminB5 !== undefined && maxVitaminB5 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB5, 'maxVitaminB5');
        }
        if (minVitaminB3 !== undefined && minVitaminB3 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB3, 'minVitaminB3');
        }
        if (maxVitaminB3 !== undefined && maxVitaminB3 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB3, 'maxVitaminB3');
        }
        if (minVitaminB6 !== undefined && minVitaminB6 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB6, 'minVitaminB6');
        }
        if (maxVitaminB6 !== undefined && maxVitaminB6 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB6, 'maxVitaminB6');
        }
        if (minVitaminB12 !== undefined && minVitaminB12 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minVitaminB12, 'minVitaminB12');
        }
        if (maxVitaminB12 !== undefined && maxVitaminB12 !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxVitaminB12, 'maxVitaminB12');
        }
        if (minFiber !== undefined && minFiber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFiber, 'minFiber');
        }
        if (maxFiber !== undefined && maxFiber !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFiber, 'maxFiber');
        }
        if (minFolate !== undefined && minFolate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFolate, 'minFolate');
        }
        if (maxFolate !== undefined && maxFolate !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFolate, 'maxFolate');
        }
        if (minFolicAcid !== undefined && minFolicAcid !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minFolicAcid, 'minFolicAcid');
        }
        if (maxFolicAcid !== undefined && maxFolicAcid !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxFolicAcid, 'maxFolicAcid');
        }
        if (minIodine !== undefined && minIodine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minIodine, 'minIodine');
        }
        if (maxIodine !== undefined && maxIodine !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxIodine, 'maxIodine');
        }
        if (minIron !== undefined && minIron !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minIron, 'minIron');
        }
        if (maxIron !== undefined && maxIron !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxIron, 'maxIron');
        }
        if (minMagnesium !== undefined && minMagnesium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minMagnesium, 'minMagnesium');
        }
        if (maxMagnesium !== undefined && maxMagnesium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxMagnesium, 'maxMagnesium');
        }
        if (minManganese !== undefined && minManganese !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minManganese, 'minManganese');
        }
        if (maxManganese !== undefined && maxManganese !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxManganese, 'maxManganese');
        }
        if (minPhosphorus !== undefined && minPhosphorus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minPhosphorus, 'minPhosphorus');
        }
        if (maxPhosphorus !== undefined && maxPhosphorus !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxPhosphorus, 'maxPhosphorus');
        }
        if (minPotassium !== undefined && minPotassium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minPotassium, 'minPotassium');
        }
        if (maxPotassium !== undefined && maxPotassium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxPotassium, 'maxPotassium');
        }
        if (minSelenium !== undefined && minSelenium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSelenium, 'minSelenium');
        }
        if (maxSelenium !== undefined && maxSelenium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSelenium, 'maxSelenium');
        }
        if (minSodium !== undefined && minSodium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSodium, 'minSodium');
        }
        if (maxSodium !== undefined && maxSodium !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSodium, 'maxSodium');
        }
        if (minSugar !== undefined && minSugar !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minSugar, 'minSugar');
        }
        if (maxSugar !== undefined && maxSugar !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxSugar, 'maxSugar');
        }
        if (minZinc !== undefined && minZinc !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>minZinc, 'minZinc');
        }
        if (maxZinc !== undefined && maxZinc !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>maxZinc, 'maxZinc');
        }
        if (offset !== undefined && offset !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>offset, 'offset');
        }
        if (number !== undefined && number !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>number, 'number');
        }
        if (random !== undefined && random !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>random, 'random');
        }
        if (limitLicense !== undefined && limitLicense !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>limitLicense, 'limitLicense');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/findByNutrients`;
        return this.httpClient.request<Set<SearchRecipesByNutrients200ResponseInner>>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Summarize Recipe
     * Automatically generate a short description that summarizes key information about the recipe.
     * @param id The item\&#39;s id.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public summarizeRecipe(id: number, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<SummarizeRecipe200Response>;
    public summarizeRecipe(id: number, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<SummarizeRecipe200Response>>;
    public summarizeRecipe(id: number, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<SummarizeRecipe200Response>>;
    public summarizeRecipe(id: number, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'application/json', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling summarizeRecipe.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'application/json'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/summary`;
        return this.httpClient.request<SummarizeRecipe200Response>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Equipment Widget
     * Visualize the equipment used to make a recipe.
     * @param instructions The recipe\\\&#39;s instructions.
     * @param view How to visualize the ingredients, either \\\&#39;grid\\\&#39; or \\\&#39;list\\\&#39;.
     * @param defaultCss Whether the default CSS should be added to the response.
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public visualizeEquipment(instructions: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public visualizeEquipment(instructions: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public visualizeEquipment(instructions: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public visualizeEquipment(instructions: string, view?: string, defaultCss?: boolean, showBacklink?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (instructions === null || instructions === undefined) {
            throw new Error('Required parameter instructions was null or undefined when calling visualizeEquipment.');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (instructions !== undefined) {
            localVarFormParams = localVarFormParams.append('instructions', <any>instructions) as any || localVarFormParams;
        }
        if (view !== undefined) {
            localVarFormParams = localVarFormParams.append('view', <any>view) as any || localVarFormParams;
        }
        if (defaultCss !== undefined) {
            localVarFormParams = localVarFormParams.append('defaultCss', <any>defaultCss) as any || localVarFormParams;
        }
        if (showBacklink !== undefined) {
            localVarFormParams = localVarFormParams.append('showBacklink', <any>showBacklink) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/visualizeEquipment`;
        return this.httpClient.request<string>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Price Breakdown Widget
     * Visualize the price breakdown of a recipe.
     * @param ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param servings The number of servings.
     * @param language The language of the input. Either \&#39;en\&#39; or \&#39;de\&#39;.
     * @param mode The mode in which the widget should be delivered. 1 &#x3D; separate views (compact), 2 &#x3D; all in one view (full).
     * @param defaultCss Whether the default CSS should be added to the response.
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public visualizePriceBreakdown(ingredientList: string, servings: number, language?: 'en' | 'de', mode?: number, defaultCss?: boolean, showBacklink?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public visualizePriceBreakdown(ingredientList: string, servings: number, language?: 'en' | 'de', mode?: number, defaultCss?: boolean, showBacklink?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public visualizePriceBreakdown(ingredientList: string, servings: number, language?: 'en' | 'de', mode?: number, defaultCss?: boolean, showBacklink?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public visualizePriceBreakdown(ingredientList: string, servings: number, language?: 'en' | 'de', mode?: number, defaultCss?: boolean, showBacklink?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (ingredientList === null || ingredientList === undefined) {
            throw new Error('Required parameter ingredientList was null or undefined when calling visualizePriceBreakdown.');
        }
        if (servings === null || servings === undefined) {
            throw new Error('Required parameter servings was null or undefined when calling visualizePriceBreakdown.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (language !== undefined && language !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>language, 'language');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (ingredientList !== undefined) {
            localVarFormParams = localVarFormParams.append('ingredientList', <any>ingredientList) as any || localVarFormParams;
        }
        if (servings !== undefined) {
            localVarFormParams = localVarFormParams.append('servings', <any>servings) as any || localVarFormParams;
        }
        if (mode !== undefined) {
            localVarFormParams = localVarFormParams.append('mode', <any>mode) as any || localVarFormParams;
        }
        if (defaultCss !== undefined) {
            localVarFormParams = localVarFormParams.append('defaultCss', <any>defaultCss) as any || localVarFormParams;
        }
        if (showBacklink !== undefined) {
            localVarFormParams = localVarFormParams.append('showBacklink', <any>showBacklink) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/visualizePriceEstimator`;
        return this.httpClient.request<string>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Equipment by ID Widget
     * Visualize a recipe\&#39;s equipment list.
     * @param id The item\&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public visualizeRecipeEquipmentByID(id: number, defaultCss?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public visualizeRecipeEquipmentByID(id: number, defaultCss?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public visualizeRecipeEquipmentByID(id: number, defaultCss?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public visualizeRecipeEquipmentByID(id: number, defaultCss?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling visualizeRecipeEquipmentByID.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (defaultCss !== undefined && defaultCss !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>defaultCss, 'defaultCss');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/equipmentWidget`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Ingredients by ID Widget
     * Visualize a recipe\&#39;s ingredient list.
     * @param id The item\&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response.
     * @param measure Whether the the measures should be \&#39;us\&#39; or \&#39;metric\&#39;.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public visualizeRecipeIngredientsByID(id: number, defaultCss?: boolean, measure?: 'us' | 'metric', observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public visualizeRecipeIngredientsByID(id: number, defaultCss?: boolean, measure?: 'us' | 'metric', observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public visualizeRecipeIngredientsByID(id: number, defaultCss?: boolean, measure?: 'us' | 'metric', observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public visualizeRecipeIngredientsByID(id: number, defaultCss?: boolean, measure?: 'us' | 'metric', observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling visualizeRecipeIngredientsByID.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (defaultCss !== undefined && defaultCss !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>defaultCss, 'defaultCss');
        }
        if (measure !== undefined && measure !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>measure, 'measure');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/ingredientWidget`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recipe Nutrition Widget
     * Visualize a recipe\&#39;s nutritional information as HTML including CSS.
     * @param ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param servings The number of servings.
     * @param language The language of the input. Either \&#39;en\&#39; or \&#39;de\&#39;.
     * @param defaultCss Whether the default CSS should be added to the response.
     * @param showBacklink Whether to show a backlink to spoonacular. If set false, this call counts against your quota.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public visualizeRecipeNutrition(ingredientList: string, servings: number, language?: 'en' | 'de', defaultCss?: boolean, showBacklink?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public visualizeRecipeNutrition(ingredientList: string, servings: number, language?: 'en' | 'de', defaultCss?: boolean, showBacklink?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public visualizeRecipeNutrition(ingredientList: string, servings: number, language?: 'en' | 'de', defaultCss?: boolean, showBacklink?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public visualizeRecipeNutrition(ingredientList: string, servings: number, language?: 'en' | 'de', defaultCss?: boolean, showBacklink?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (ingredientList === null || ingredientList === undefined) {
            throw new Error('Required parameter ingredientList was null or undefined when calling visualizeRecipeNutrition.');
        }
        if (servings === null || servings === undefined) {
            throw new Error('Required parameter servings was null or undefined when calling visualizeRecipeNutrition.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (language !== undefined && language !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>language, 'language');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (ingredientList !== undefined) {
            localVarFormParams = localVarFormParams.append('ingredientList', <any>ingredientList) as any || localVarFormParams;
        }
        if (servings !== undefined) {
            localVarFormParams = localVarFormParams.append('servings', <any>servings) as any || localVarFormParams;
        }
        if (defaultCss !== undefined) {
            localVarFormParams = localVarFormParams.append('defaultCss', <any>defaultCss) as any || localVarFormParams;
        }
        if (showBacklink !== undefined) {
            localVarFormParams = localVarFormParams.append('showBacklink', <any>showBacklink) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/visualizeNutrition`;
        return this.httpClient.request<string>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recipe Nutrition by ID Widget
     * Visualize a recipe\&#39;s nutritional information as HTML including CSS.
     * @param id The item\&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public visualizeRecipeNutritionByID(id: number, defaultCss?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public visualizeRecipeNutritionByID(id: number, defaultCss?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public visualizeRecipeNutritionByID(id: number, defaultCss?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public visualizeRecipeNutritionByID(id: number, defaultCss?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling visualizeRecipeNutritionByID.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (defaultCss !== undefined && defaultCss !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>defaultCss, 'defaultCss');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/nutritionWidget`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Price Breakdown by ID Widget
     * Visualize a recipe\&#39;s price breakdown.
     * @param id The item\&#39;s id.
     * @param defaultCss Whether the default CSS should be added to the response.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public visualizeRecipePriceBreakdownByID(id: number, defaultCss?: boolean, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public visualizeRecipePriceBreakdownByID(id: number, defaultCss?: boolean, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public visualizeRecipePriceBreakdownByID(id: number, defaultCss?: boolean, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public visualizeRecipePriceBreakdownByID(id: number, defaultCss?: boolean, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling visualizeRecipePriceBreakdownByID.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (defaultCss !== undefined && defaultCss !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>defaultCss, 'defaultCss');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/priceBreakdownWidget`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recipe Taste Widget
     * Visualize a recipe\&#39;s taste information as HTML including CSS. You can play around with that endpoint!
     * @param ingredientList The ingredient list of the recipe, one ingredient per line.
     * @param language The language of the input. Either \&#39;en\&#39; or \&#39;de\&#39;.
     * @param normalize Normalize to the strongest taste.
     * @param rgb Red, green, blue values for the chart color.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public visualizeRecipeTaste(ingredientList: string, language?: 'en' | 'de', normalize?: boolean, rgb?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public visualizeRecipeTaste(ingredientList: string, language?: 'en' | 'de', normalize?: boolean, rgb?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public visualizeRecipeTaste(ingredientList: string, language?: 'en' | 'de', normalize?: boolean, rgb?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public visualizeRecipeTaste(ingredientList: string, language?: 'en' | 'de', normalize?: boolean, rgb?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (ingredientList === null || ingredientList === undefined) {
            throw new Error('Required parameter ingredientList was null or undefined when calling visualizeRecipeTaste.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (language !== undefined && language !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>language, 'language');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/x-www-form-urlencoded'
        ];

        const canConsumeForm = this.canConsumeForm(consumes);

        let localVarFormParams: { append(param: string, value: any): any; };
        let localVarUseForm = false;
        let localVarConvertFormParamsToString = false;
        if (localVarUseForm) {
            localVarFormParams = new FormData();
        } else {
            localVarFormParams = new HttpParams({encoder: this.encoder});
        }

        if (ingredientList !== undefined) {
            localVarFormParams = localVarFormParams.append('ingredientList', <any>ingredientList) as any || localVarFormParams;
        }
        if (normalize !== undefined) {
            localVarFormParams = localVarFormParams.append('normalize', <any>normalize) as any || localVarFormParams;
        }
        if (rgb !== undefined) {
            localVarFormParams = localVarFormParams.append('rgb', <any>rgb) as any || localVarFormParams;
        }

        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/visualizeTaste`;
        return this.httpClient.request<string>('post', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                body: localVarConvertFormParamsToString ? localVarFormParams.toString() : localVarFormParams,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Recipe Taste by ID Widget
     * Get a recipe\&#39;s taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.
     * @param id The item\&#39;s id.
     * @param normalize Whether to normalize to the strongest taste.
     * @param rgb Red, green, blue values for the chart color.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public visualizeRecipeTasteByID(id: number, normalize?: boolean, rgb?: string, observe?: 'body', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<string>;
    public visualizeRecipeTasteByID(id: number, normalize?: boolean, rgb?: string, observe?: 'response', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpResponse<string>>;
    public visualizeRecipeTasteByID(id: number, normalize?: boolean, rgb?: string, observe?: 'events', reportProgress?: boolean, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<HttpEvent<string>>;
    public visualizeRecipeTasteByID(id: number, normalize?: boolean, rgb?: string, observe: any = 'body', reportProgress: boolean = false, options?: {httpHeaderAccept?: 'text/html', context?: HttpContext, transferCache?: boolean}): Observable<any> {
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling visualizeRecipeTasteByID.');
        }

        let localVarQueryParameters = new HttpParams({encoder: this.encoder});
        if (normalize !== undefined && normalize !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>normalize, 'normalize');
        }
        if (rgb !== undefined && rgb !== null) {
          localVarQueryParameters = this.addToHttpParams(localVarQueryParameters,
            <any>rgb, 'rgb');
        }

        let localVarHeaders = this.defaultHeaders;

        let localVarCredential: string | undefined;
        // authentication (apiKeyScheme) required
        localVarCredential = this.configuration.lookupCredential('apiKeyScheme');
        if (localVarCredential) {
            localVarHeaders = localVarHeaders.set('x-api-key', localVarCredential);
        }

        let localVarHttpHeaderAcceptSelected: string | undefined = options && options.httpHeaderAccept;
        if (localVarHttpHeaderAcceptSelected === undefined) {
            // to determine the Accept header
            const httpHeaderAccepts: string[] = [
                'text/html'
            ];
            localVarHttpHeaderAcceptSelected = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        }
        if (localVarHttpHeaderAcceptSelected !== undefined) {
            localVarHeaders = localVarHeaders.set('Accept', localVarHttpHeaderAcceptSelected);
        }

        let localVarHttpContext: HttpContext | undefined = options && options.context;
        if (localVarHttpContext === undefined) {
            localVarHttpContext = new HttpContext();
        }

        let localVarTransferCache: boolean | undefined = options && options.transferCache;
        if (localVarTransferCache === undefined) {
            localVarTransferCache = true;
        }


        let responseType_: 'text' | 'json' | 'blob' = 'json';
        if (localVarHttpHeaderAcceptSelected) {
            if (localVarHttpHeaderAcceptSelected.startsWith('text')) {
                responseType_ = 'text';
            } else if (this.configuration.isJsonMime(localVarHttpHeaderAcceptSelected)) {
                responseType_ = 'json';
            } else {
                responseType_ = 'blob';
            }
        }

        let localVarPath = `/recipes/${this.configuration.encodeParam({name: "id", value: id, in: "path", style: "simple", explode: false, dataType: "number", dataFormat: undefined})}/tasteWidget`;
        return this.httpClient.request<string>('get', `${this.configuration.basePath}${localVarPath}`,
            {
                context: localVarHttpContext,
                params: localVarQueryParameters,
                responseType: <any>responseType_,
                withCredentials: this.configuration.withCredentials,
                headers: localVarHeaders,
                observe: observe,
                transferCache: localVarTransferCache,
                reportProgress: reportProgress
            }
        );
    }

}
