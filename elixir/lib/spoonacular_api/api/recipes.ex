# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule SpoonacularAPI.Api.Recipes do
  @moduledoc """
  API calls for all endpoints tagged `Recipes`.
  """

  alias SpoonacularAPI.Connection
  import SpoonacularAPI.RequestBuilder

  @doc """
  Analyze a Recipe Search Query
  Parse a recipe search query to find out its intention.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `q` (String.t): The recipe search query.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.AnalyzeARecipeSearchQuery200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec analyze_a_recipe_search_query(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.AnalyzeARecipeSearchQuery200Response.t} | {:error, Tesla.Env.t}
  def analyze_a_recipe_search_query(connection, q, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/queries/analyze")
      |> add_param(:query, :q, q)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.AnalyzeARecipeSearchQuery200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Analyze Recipe Instructions
  This endpoint allows you to break down instructions into atomic steps. Furthermore, each step will contain the ingredients and equipment required. Additionally, all ingredients and equipment from the recipe's instructions will be extracted independently of the step they're used in.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `instructions` (String.t): The recipe's instructions.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.AnalyzeRecipeInstructions200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec analyze_recipe_instructions(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.AnalyzeRecipeInstructions200Response.t} | {:error, Tesla.Env.t}
  def analyze_recipe_instructions(connection, instructions, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/recipes/analyzeInstructions")
      |> add_param(:form, :instructions, instructions)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.AnalyzeRecipeInstructions200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Autocomplete Recipe Search
  Autocomplete a partial input to suggest possible recipe names.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:query` (String.t): The (natural language) search query.
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.

  ### Returns

  - `{:ok, [%AutocompleteRecipeSearch200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec autocomplete_recipe_search(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [SpoonacularAPI.Model.AutocompleteRecipeSearch200ResponseInner.t]} | {:error, Tesla.Env.t}
  def autocomplete_recipe_search(connection, opts \\ []) do
    optional_params = %{
      :query => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/autocomplete")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.AutocompleteRecipeSearch200ResponseInner},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Classify Cuisine
  Classify the recipe's cuisine.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `title` (String.t): The title of the recipe.
  - `ingredient_list` (String.t): The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  - `opts` (keyword): Optional parameters
    - `:language` (String.t): The language of the input. Either 'en' or 'de'.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.ClassifyCuisine200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec classify_cuisine(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.ClassifyCuisine200Response.t} | {:error, Tesla.Env.t}
  def classify_cuisine(connection, title, ingredient_list, opts \\ []) do
    optional_params = %{
      :language => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/recipes/cuisine")
      |> add_param(:form, :title, title)
      |> add_param(:form, :ingredientList, ingredient_list)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.ClassifyCuisine200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Compute Glycemic Load
  Retrieve the glycemic index for a list of ingredients and compute the individual and total glycemic load.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `compute_glycemic_load_request` (ComputeGlycemicLoadRequest): 
  - `opts` (keyword): Optional parameters
    - `:language` (String.t): The language of the input. Either 'en' or 'de'.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.ComputeGlycemicLoad200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec compute_glycemic_load(Tesla.Env.client, SpoonacularAPI.Model.ComputeGlycemicLoadRequest.t, keyword()) :: {:ok, SpoonacularAPI.Model.ComputeGlycemicLoad200Response.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def compute_glycemic_load(connection, compute_glycemic_load_request, opts \\ []) do
    optional_params = %{
      :language => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/food/ingredients/glycemicLoad")
      |> add_param(:body, :body, compute_glycemic_load_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.ComputeGlycemicLoad200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Convert Amounts
  Convert amounts like \"2 cups of flour to grams\".

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `ingredient_name` (String.t): The ingredient which you want to convert.
  - `source_amount` (float()): The amount from which you want to convert, e.g. the 2.5 in \"2.5 cups of flour to grams\".
  - `source_unit` (String.t): The unit from which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  - `target_unit` (String.t): The unit to which you want to convert, e.g. the grams in \"2.5 cups of flour to grams\". You can also use \"piece\", e.g. \"3.4 oz tomatoes to piece\"
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.ConvertAmounts200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec convert_amounts(Tesla.Env.client, String.t, float(), String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.ConvertAmounts200Response.t} | {:error, Tesla.Env.t}
  def convert_amounts(connection, ingredient_name, source_amount, source_unit, target_unit, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/convert")
      |> add_param(:query, :ingredientName, ingredient_name)
      |> add_param(:query, :sourceAmount, source_amount)
      |> add_param(:query, :sourceUnit, source_unit)
      |> add_param(:query, :targetUnit, target_unit)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.ConvertAmounts200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Create Recipe Card
  Generate a recipe card for a recipe.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `title` (String.t): The title of the recipe.
  - `ingredients` (String.t): The ingredient list of the recipe, one ingredient per line (separate lines with \\\\n).
  - `instructions` (String.t): The instructions to make the recipe. One step per line (separate lines with \\\\n).
  - `ready_in_minutes` (float()): The number of minutes it takes to get the recipe on the table.
  - `servings` (float()): The number of servings the recipe makes.
  - `mask` (String.t): The mask to put over the recipe image ('ellipseMask', 'diamondMask', 'starMask', 'heartMask', 'potMask', 'fishMask').
  - `background_image` (String.t): The background image ('none', 'background1', or 'background2').
  - `opts` (keyword): Optional parameters
    - `:image` (String.t): The binary image of the recipe as jpg.
    - `:imageUrl` (String.t): If you do not sent a binary image you can also pass the image URL.
    - `:author` (String.t): The author of the recipe.
    - `:backgroundColor` (String.t): The background color for the recipe card as a hex-string.
    - `:fontColor` (String.t): The font color for the recipe card as a hex-string.
    - `:source` (String.t): The source of the recipe.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.CreateRecipeCard200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec create_recipe_card(Tesla.Env.client, String.t, String.t, String.t, float(), float(), String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.CreateRecipeCard200Response.t} | {:error, Tesla.Env.t}
  def create_recipe_card(connection, title, ingredients, instructions, ready_in_minutes, servings, mask, background_image, opts \\ []) do
    optional_params = %{
      :image => :form,
      :imageUrl => :form,
      :author => :form,
      :backgroundColor => :form,
      :fontColor => :form,
      :source => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/recipes/visualizeRecipe")
      |> add_param(:form, :title, title)
      |> add_param(:form, :ingredients, ingredients)
      |> add_param(:form, :instructions, instructions)
      |> add_param(:form, :readyInMinutes, ready_in_minutes)
      |> add_param(:form, :servings, servings)
      |> add_param(:form, :mask, mask)
      |> add_param(:form, :backgroundImage, background_image)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.CreateRecipeCard200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Equipment by ID Image
  Visualize a recipe's equipment list as an image.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (float()): The recipe id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec equipment_by_id_image(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def equipment_by_id_image(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/equipmentWidget.png")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Extract Recipe from Website
  This endpoint lets you extract recipe data such as title, ingredients, and instructions from any properly formatted Website.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `url` (String.t): The URL of the recipe page.
  - `opts` (keyword): Optional parameters
    - `:forceExtraction` (boolean()): If true, the extraction will be triggered whether we already know the recipe or not. Use this only if information is missing as this operation is slower.
    - `:analyze` (boolean()): If true, the recipe will be analyzed and classified resolving in more data such as cuisines, dish types, and more.
    - `:includeNutrition` (boolean()): Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
    - `:includeTaste` (boolean()): Whether taste data should be added to correctly parsed ingredients.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetRecipeInformation200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec extract_recipe_from_website(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetRecipeInformation200Response.t} | {:error, Tesla.Env.t}
  def extract_recipe_from_website(connection, url, opts \\ []) do
    optional_params = %{
      :forceExtraction => :query,
      :analyze => :query,
      :includeNutrition => :query,
      :includeTaste => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/extract")
      |> add_param(:query, :url, url)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRecipeInformation200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Analyzed Recipe Instructions
  Get an analyzed breakdown of a recipe's instructions. Each step is enriched with the ingredients and equipment required.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:stepBreakdown` (boolean()): Whether to break down the recipe steps even more.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetAnalyzedRecipeInstructions200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_analyzed_recipe_instructions(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetAnalyzedRecipeInstructions200Response.t} | {:error, Tesla.Env.t}
  def get_analyzed_recipe_instructions(connection, id, opts \\ []) do
    optional_params = %{
      :stepBreakdown => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/analyzedInstructions")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetAnalyzedRecipeInstructions200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Random Recipes
  Find random (popular) recipes. If you need to filter recipes by diet, nutrition etc. you might want to consider using the complex recipe search endpoint and set the sort request parameter to random.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:limitLicense` (boolean()): Whether the recipes should have an open license that allows display with proper attribution.
    - `:includeNutrition` (boolean()): Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.
    - `:"include-tags"` (String.t): A comma-separated list of tags that the random recipe(s) must adhere to.
    - `:"exclude-tags"` (String.t): A comma-separated list of tags that the random recipe(s) must not adhere to.
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetRandomRecipes200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_random_recipes(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetRandomRecipes200Response.t} | {:error, Tesla.Env.t}
  def get_random_recipes(connection, opts \\ []) do
    optional_params = %{
      :limitLicense => :query,
      :includeNutrition => :query,
      :"include-tags" => :query,
      :"exclude-tags" => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/random")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRandomRecipes200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Equipment by ID
  Get a recipe's equipment list.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetRecipeEquipmentById200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_recipe_equipment_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetRecipeEquipmentById200Response.t} | {:error, Tesla.Env.t}
  def get_recipe_equipment_by_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/equipmentWidget.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRecipeEquipmentById200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Recipe Information
  Use a recipe id to get full information about a recipe, such as ingredients, nutrition, diet and allergen information, etc.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:includeNutrition` (boolean()): Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetRecipeInformation200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_recipe_information(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetRecipeInformation200Response.t} | {:error, Tesla.Env.t}
  def get_recipe_information(connection, id, opts \\ []) do
    optional_params = %{
      :includeNutrition => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/information")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRecipeInformation200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Recipe Information Bulk
  Get information about multiple recipes at once. This is equivalent to calling the Get Recipe Information endpoint multiple times, but faster.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `ids` (String.t): A comma-separated list of recipe ids.
  - `opts` (keyword): Optional parameters
    - `:includeNutrition` (boolean()): Include nutrition data in the recipe information. Nutrition data is per serving. If you want the nutrition data for the entire recipe, just multiply by the number of servings.

  ### Returns

  - `{:ok, [%GetRecipeInformationBulk200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_recipe_information_bulk(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, [SpoonacularAPI.Model.GetRecipeInformationBulk200ResponseInner.t]} | {:error, Tesla.Env.t}
  def get_recipe_information_bulk(connection, ids, opts \\ []) do
    optional_params = %{
      :includeNutrition => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/informationBulk")
      |> add_param(:query, :ids, ids)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRecipeInformationBulk200ResponseInner},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Ingredients by ID
  Get a recipe's ingredient list.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetRecipeIngredientsById200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_recipe_ingredients_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, SpoonacularAPI.Model.GetRecipeIngredientsById200Response.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def get_recipe_ingredients_by_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/ingredientWidget.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRecipeIngredientsById200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Nutrition by ID
  Get a recipe's nutrition data.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetRecipeNutritionWidgetById200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_recipe_nutrition_widget_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetRecipeNutritionWidgetById200Response.t} | {:error, Tesla.Env.t}
  def get_recipe_nutrition_widget_by_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/nutritionWidget.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRecipeNutritionWidgetById200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Price Breakdown by ID
  Get a recipe's price breakdown data.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetRecipePriceBreakdownById200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_recipe_price_breakdown_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetRecipePriceBreakdownById200Response.t} | {:error, Tesla.Env.t}
  def get_recipe_price_breakdown_by_id(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/priceBreakdownWidget.json")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRecipePriceBreakdownById200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Taste by ID
  Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:normalize` (boolean()): Normalize to the strongest taste.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetRecipeTasteById200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_recipe_taste_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetRecipeTasteById200Response.t} | {:error, Tesla.Env.t}
  def get_recipe_taste_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :normalize => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/tasteWidget.json")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRecipeTasteById200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Get Similar Recipes
  Find recipes which are similar to the given one.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.
    - `:limitLicense` (boolean()): Whether the recipes should have an open license that allows display with proper attribution.

  ### Returns

  - `{:ok, [%GetSimilarRecipes200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_similar_recipes(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, [SpoonacularAPI.Model.GetSimilarRecipes200ResponseInner.t]} | {:error, Tesla.Env.t}
  def get_similar_recipes(connection, id, opts \\ []) do
    optional_params = %{
      :number => :query,
      :limitLicense => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/similar")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetSimilarRecipes200ResponseInner},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Guess Nutrition by Dish Name
  Estimate the macronutrients of a dish based on its title.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `title` (String.t): The title of the dish.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GuessNutritionByDishName200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec guess_nutrition_by_dish_name(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GuessNutritionByDishName200Response.t} | {:error, Tesla.Env.t}
  def guess_nutrition_by_dish_name(connection, title, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/guessNutrition")
      |> add_param(:query, :title, title)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GuessNutritionByDishName200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Parse Ingredients
  Extract an ingredient from plain text.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `ingredient_list` (String.t): The ingredient list of the recipe, one ingredient per line.
  - `servings` (float()): The number of servings that you can make from the ingredients.
  - `opts` (keyword): Optional parameters
    - `:language` (String.t): The language of the input. Either 'en' or 'de'.
    - `:includeNutrition` (boolean()): 

  ### Returns

  - `{:ok, [%ParseIngredients200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec parse_ingredients(Tesla.Env.client, String.t, float(), keyword()) :: {:ok, nil} | {:ok, [SpoonacularAPI.Model.ParseIngredients200ResponseInner.t]} | {:error, Tesla.Env.t}
  def parse_ingredients(connection, ingredient_list, servings, opts \\ []) do
    optional_params = %{
      :language => :query,
      :includeNutrition => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/recipes/parseIngredients")
      |> add_param(:form, :ingredientList, ingredient_list)
      |> add_param(:form, :servings, servings)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.ParseIngredients200ResponseInner},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Price Breakdown by ID Image
  Visualize a recipe's price breakdown.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (float()): The recipe id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec price_breakdown_by_id_image(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def price_breakdown_by_id_image(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/priceBreakdownWidget.png")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Quick Answer
  Answer a nutrition related natural language question.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `q` (String.t): The nutrition related question.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.QuickAnswer200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec quick_answer(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.QuickAnswer200Response.t} | {:error, Tesla.Env.t}
  def quick_answer(connection, q, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/quickAnswer")
      |> add_param(:query, :q, q)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.QuickAnswer200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Recipe Nutrition by ID Image
  Visualize a recipe's nutritional information as an image.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (float()): The recipe id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec recipe_nutrition_by_id_image(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def recipe_nutrition_by_id_image(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/nutritionWidget.png")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Recipe Nutrition Label Image
  Get a recipe's nutrition label as an image.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (float()): The recipe id.
  - `opts` (keyword): Optional parameters
    - `:showOptionalNutrients` (boolean()): Whether to show optional nutrients.
    - `:showZeroValues` (boolean()): Whether to show zero values.
    - `:showIngredients` (boolean()): Whether to show a list of ingredients.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec recipe_nutrition_label_image(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def recipe_nutrition_label_image(connection, id, opts \\ []) do
    optional_params = %{
      :showOptionalNutrients => :query,
      :showZeroValues => :query,
      :showIngredients => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/nutritionLabel.png")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Recipe Nutrition Label Widget
  Get a recipe's nutrition label as an HTML widget.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (float()): The recipe id.
  - `opts` (keyword): Optional parameters
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.
    - `:showOptionalNutrients` (boolean()): Whether to show optional nutrients.
    - `:showZeroValues` (boolean()): Whether to show zero values.
    - `:showIngredients` (boolean()): Whether to show a list of ingredients.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec recipe_nutrition_label_widget(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def recipe_nutrition_label_widget(connection, id, opts \\ []) do
    optional_params = %{
      :defaultCss => :query,
      :showOptionalNutrients => :query,
      :showZeroValues => :query,
      :showIngredients => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/nutritionLabel")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Recipe Taste by ID Image
  Get a recipe's taste as an image. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (float()): The recipe id.
  - `opts` (keyword): Optional parameters
    - `:normalize` (boolean()): Normalize to the strongest taste.
    - `:rgb` (String.t): Red, green, blue values for the chart color.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec recipe_taste_by_id_image(Tesla.Env.client, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def recipe_taste_by_id_image(connection, id, opts \\ []) do
    optional_params = %{
      :normalize => :query,
      :rgb => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/tasteWidget.png")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Search Recipes
  Search through hundreds of thousands of recipes using advanced filtering and ranking. NOTE: This method combines searching by query, by ingredients, and by nutrients into one endpoint.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:query` (String.t): The (natural language) search query.
    - `:cuisine` (String.t): The cuisine(s) of the recipes. One or more, comma separated (will be interpreted as 'OR'). See a full list of supported cuisines.
    - `:excludeCuisine` (String.t): The cuisine(s) the recipes must not match. One or more, comma separated (will be interpreted as 'AND'). See a full list of supported cuisines.
    - `:diet` (String.t): The diet for which the recipes must be suitable. See a full list of supported diets.
    - `:intolerances` (String.t): A comma-separated list of intolerances. All recipes returned must not contain ingredients that are not suitable for people with the intolerances entered. See a full list of supported intolerances.
    - `:equipment` (String.t): The equipment required. Multiple values will be interpreted as 'or'. For example, value could be \"blender, frying pan, bowl\".
    - `:includeIngredients` (String.t): A comma-separated list of ingredients that should/must be used in the recipes.
    - `:excludeIngredients` (String.t): A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    - `:type` (String.t): The type of recipe. See a full list of supported meal types.
    - `:instructionsRequired` (boolean()): Whether the recipes must have instructions.
    - `:fillIngredients` (boolean()): Add information about the ingredients and whether they are used or missing in relation to the query.
    - `:addRecipeInformation` (boolean()): If set to true, you get more information about the recipes returned.
    - `:addRecipeNutrition` (boolean()): If set to true, you get nutritional information about each recipes returned.
    - `:author` (String.t): The username of the recipe author.
    - `:tags` (String.t): The tags (can be diets, meal types, cuisines, or intolerances) that the recipe must have.
    - `:recipeBoxId` (float()): The id of the recipe box to which the search should be limited to.
    - `:titleMatch` (String.t): Enter text that must be found in the title of the recipes.
    - `:maxReadyTime` (float()): The maximum time in minutes it should take to prepare and cook the recipe.
    - `:minServings` (float()): The minimum amount of servings the recipe is for.
    - `:maxServings` (float()): The maximum amount of servings the recipe is for.
    - `:ignorePantry` (boolean()): Whether to ignore typical pantry items, such as water, salt, flour, etc.
    - `:sort` (String.t): The strategy to sort recipes by. See a full list of supported sorting options.
    - `:sortDirection` (String.t): The direction in which to sort. Must be either 'asc' (ascending) or 'desc' (descending).
    - `:minCarbs` (float()): The minimum amount of carbohydrates in grams the recipe must have.
    - `:maxCarbs` (float()): The maximum amount of carbohydrates in grams the recipe can have.
    - `:minProtein` (float()): The minimum amount of protein in grams the recipe must have.
    - `:maxProtein` (float()): The maximum amount of protein in grams the recipe can have.
    - `:minCalories` (float()): The minimum amount of calories the recipe must have.
    - `:maxCalories` (float()): The maximum amount of calories the recipe can have.
    - `:minFat` (float()): The minimum amount of fat in grams the recipe must have.
    - `:maxFat` (float()): The maximum amount of fat in grams the recipe can have.
    - `:minAlcohol` (float()): The minimum amount of alcohol in grams the recipe must have.
    - `:maxAlcohol` (float()): The maximum amount of alcohol in grams the recipe can have.
    - `:minCaffeine` (float()): The minimum amount of caffeine in milligrams the recipe must have.
    - `:maxCaffeine` (float()): The maximum amount of caffeine in milligrams the recipe can have.
    - `:minCopper` (float()): The minimum amount of copper in milligrams the recipe must have.
    - `:maxCopper` (float()): The maximum amount of copper in milligrams the recipe can have.
    - `:minCalcium` (float()): The minimum amount of calcium in milligrams the recipe must have.
    - `:maxCalcium` (float()): The maximum amount of calcium in milligrams the recipe can have.
    - `:minCholine` (float()): The minimum amount of choline in milligrams the recipe must have.
    - `:maxCholine` (float()): The maximum amount of choline in milligrams the recipe can have.
    - `:minCholesterol` (float()): The minimum amount of cholesterol in milligrams the recipe must have.
    - `:maxCholesterol` (float()): The maximum amount of cholesterol in milligrams the recipe can have.
    - `:minFluoride` (float()): The minimum amount of fluoride in milligrams the recipe must have.
    - `:maxFluoride` (float()): The maximum amount of fluoride in milligrams the recipe can have.
    - `:minSaturatedFat` (float()): The minimum amount of saturated fat in grams the recipe must have.
    - `:maxSaturatedFat` (float()): The maximum amount of saturated fat in grams the recipe can have.
    - `:minVitaminA` (float()): The minimum amount of Vitamin A in IU the recipe must have.
    - `:maxVitaminA` (float()): The maximum amount of Vitamin A in IU the recipe can have.
    - `:minVitaminC` (float()): The minimum amount of Vitamin C milligrams the recipe must have.
    - `:maxVitaminC` (float()): The maximum amount of Vitamin C in milligrams the recipe can have.
    - `:minVitaminD` (float()): The minimum amount of Vitamin D in micrograms the recipe must have.
    - `:maxVitaminD` (float()): The maximum amount of Vitamin D in micrograms the recipe can have.
    - `:minVitaminE` (float()): The minimum amount of Vitamin E in milligrams the recipe must have.
    - `:maxVitaminE` (float()): The maximum amount of Vitamin E in milligrams the recipe can have.
    - `:minVitaminK` (float()): The minimum amount of Vitamin K in micrograms the recipe must have.
    - `:maxVitaminK` (float()): The maximum amount of Vitamin K in micrograms the recipe can have.
    - `:minVitaminB1` (float()): The minimum amount of Vitamin B1 in milligrams the recipe must have.
    - `:maxVitaminB1` (float()): The maximum amount of Vitamin B1 in milligrams the recipe can have.
    - `:minVitaminB2` (float()): The minimum amount of Vitamin B2 in milligrams the recipe must have.
    - `:maxVitaminB2` (float()): The maximum amount of Vitamin B2 in milligrams the recipe can have.
    - `:minVitaminB5` (float()): The minimum amount of Vitamin B5 in milligrams the recipe must have.
    - `:maxVitaminB5` (float()): The maximum amount of Vitamin B5 in milligrams the recipe can have.
    - `:minVitaminB3` (float()): The minimum amount of Vitamin B3 in milligrams the recipe must have.
    - `:maxVitaminB3` (float()): The maximum amount of Vitamin B3 in milligrams the recipe can have.
    - `:minVitaminB6` (float()): The minimum amount of Vitamin B6 in milligrams the recipe must have.
    - `:maxVitaminB6` (float()): The maximum amount of Vitamin B6 in milligrams the recipe can have.
    - `:minVitaminB12` (float()): The minimum amount of Vitamin B12 in micrograms the recipe must have.
    - `:maxVitaminB12` (float()): The maximum amount of Vitamin B12 in micrograms the recipe can have.
    - `:minFiber` (float()): The minimum amount of fiber in grams the recipe must have.
    - `:maxFiber` (float()): The maximum amount of fiber in grams the recipe can have.
    - `:minFolate` (float()): The minimum amount of folate in micrograms the recipe must have.
    - `:maxFolate` (float()): The maximum amount of folate in micrograms the recipe can have.
    - `:minFolicAcid` (float()): The minimum amount of folic acid in micrograms the recipe must have.
    - `:maxFolicAcid` (float()): The maximum amount of folic acid in micrograms the recipe can have.
    - `:minIodine` (float()): The minimum amount of iodine in micrograms the recipe must have.
    - `:maxIodine` (float()): The maximum amount of iodine in micrograms the recipe can have.
    - `:minIron` (float()): The minimum amount of iron in milligrams the recipe must have.
    - `:maxIron` (float()): The maximum amount of iron in milligrams the recipe can have.
    - `:minMagnesium` (float()): The minimum amount of magnesium in milligrams the recipe must have.
    - `:maxMagnesium` (float()): The maximum amount of magnesium in milligrams the recipe can have.
    - `:minManganese` (float()): The minimum amount of manganese in milligrams the recipe must have.
    - `:maxManganese` (float()): The maximum amount of manganese in milligrams the recipe can have.
    - `:minPhosphorus` (float()): The minimum amount of phosphorus in milligrams the recipe must have.
    - `:maxPhosphorus` (float()): The maximum amount of phosphorus in milligrams the recipe can have.
    - `:minPotassium` (float()): The minimum amount of potassium in milligrams the recipe must have.
    - `:maxPotassium` (float()): The maximum amount of potassium in milligrams the recipe can have.
    - `:minSelenium` (float()): The minimum amount of selenium in micrograms the recipe must have.
    - `:maxSelenium` (float()): The maximum amount of selenium in micrograms the recipe can have.
    - `:minSodium` (float()): The minimum amount of sodium in milligrams the recipe must have.
    - `:maxSodium` (float()): The maximum amount of sodium in milligrams the recipe can have.
    - `:minSugar` (float()): The minimum amount of sugar in grams the recipe must have.
    - `:maxSugar` (float()): The maximum amount of sugar in grams the recipe can have.
    - `:minZinc` (float()): The minimum amount of zinc in milligrams the recipe must have.
    - `:maxZinc` (float()): The maximum amount of zinc in milligrams the recipe can have.
    - `:offset` (integer()): The number of results to skip (between 0 and 900).
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.
    - `:limitLicense` (boolean()): Whether the recipes should have an open license that allows display with proper attribution.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.SearchRecipes200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_recipes(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.SearchRecipes200Response.t} | {:error, Tesla.Env.t}
  def search_recipes(connection, opts \\ []) do
    optional_params = %{
      :query => :query,
      :cuisine => :query,
      :excludeCuisine => :query,
      :diet => :query,
      :intolerances => :query,
      :equipment => :query,
      :includeIngredients => :query,
      :excludeIngredients => :query,
      :type => :query,
      :instructionsRequired => :query,
      :fillIngredients => :query,
      :addRecipeInformation => :query,
      :addRecipeNutrition => :query,
      :author => :query,
      :tags => :query,
      :recipeBoxId => :query,
      :titleMatch => :query,
      :maxReadyTime => :query,
      :minServings => :query,
      :maxServings => :query,
      :ignorePantry => :query,
      :sort => :query,
      :sortDirection => :query,
      :minCarbs => :query,
      :maxCarbs => :query,
      :minProtein => :query,
      :maxProtein => :query,
      :minCalories => :query,
      :maxCalories => :query,
      :minFat => :query,
      :maxFat => :query,
      :minAlcohol => :query,
      :maxAlcohol => :query,
      :minCaffeine => :query,
      :maxCaffeine => :query,
      :minCopper => :query,
      :maxCopper => :query,
      :minCalcium => :query,
      :maxCalcium => :query,
      :minCholine => :query,
      :maxCholine => :query,
      :minCholesterol => :query,
      :maxCholesterol => :query,
      :minFluoride => :query,
      :maxFluoride => :query,
      :minSaturatedFat => :query,
      :maxSaturatedFat => :query,
      :minVitaminA => :query,
      :maxVitaminA => :query,
      :minVitaminC => :query,
      :maxVitaminC => :query,
      :minVitaminD => :query,
      :maxVitaminD => :query,
      :minVitaminE => :query,
      :maxVitaminE => :query,
      :minVitaminK => :query,
      :maxVitaminK => :query,
      :minVitaminB1 => :query,
      :maxVitaminB1 => :query,
      :minVitaminB2 => :query,
      :maxVitaminB2 => :query,
      :minVitaminB5 => :query,
      :maxVitaminB5 => :query,
      :minVitaminB3 => :query,
      :maxVitaminB3 => :query,
      :minVitaminB6 => :query,
      :maxVitaminB6 => :query,
      :minVitaminB12 => :query,
      :maxVitaminB12 => :query,
      :minFiber => :query,
      :maxFiber => :query,
      :minFolate => :query,
      :maxFolate => :query,
      :minFolicAcid => :query,
      :maxFolicAcid => :query,
      :minIodine => :query,
      :maxIodine => :query,
      :minIron => :query,
      :maxIron => :query,
      :minMagnesium => :query,
      :maxMagnesium => :query,
      :minManganese => :query,
      :maxManganese => :query,
      :minPhosphorus => :query,
      :maxPhosphorus => :query,
      :minPotassium => :query,
      :maxPotassium => :query,
      :minSelenium => :query,
      :maxSelenium => :query,
      :minSodium => :query,
      :maxSodium => :query,
      :minSugar => :query,
      :maxSugar => :query,
      :minZinc => :query,
      :maxZinc => :query,
      :offset => :query,
      :number => :query,
      :limitLicense => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/complexSearch")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SearchRecipes200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Search Recipes by Ingredients
   Ever wondered what recipes you can cook with the ingredients you have in your fridge or pantry? This endpoint lets you find recipes that either maximize the usage of ingredients you have at hand (pre shopping) or minimize the ingredients that you don't currently have (post shopping).         

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:ingredients` (String.t): A comma-separated list of ingredients that the recipes should contain.
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.
    - `:limitLicense` (boolean()): Whether the recipes should have an open license that allows display with proper attribution.
    - `:ranking` (float()): Whether to maximize used ingredients (1) or minimize missing ingredients (2) first.
    - `:ignorePantry` (boolean()): Whether to ignore typical pantry items, such as water, salt, flour, etc.

  ### Returns

  - `{:ok, [%SearchRecipesByIngredients200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_recipes_by_ingredients(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [SpoonacularAPI.Model.SearchRecipesByIngredients200ResponseInner.t]} | {:error, Tesla.Env.t}
  def search_recipes_by_ingredients(connection, opts \\ []) do
    optional_params = %{
      :ingredients => :query,
      :number => :query,
      :limitLicense => :query,
      :ranking => :query,
      :ignorePantry => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/findByIngredients")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SearchRecipesByIngredients200ResponseInner},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Search Recipes by Nutrients
  Find a set of recipes that adhere to the given nutritional limits. You may set limits for macronutrients (calories, protein, fat, and carbohydrate) and/or many micronutrients.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:minCarbs` (float()): The minimum amount of carbohydrates in grams the recipe must have.
    - `:maxCarbs` (float()): The maximum amount of carbohydrates in grams the recipe can have.
    - `:minProtein` (float()): The minimum amount of protein in grams the recipe must have.
    - `:maxProtein` (float()): The maximum amount of protein in grams the recipe can have.
    - `:minCalories` (float()): The minimum amount of calories the recipe must have.
    - `:maxCalories` (float()): The maximum amount of calories the recipe can have.
    - `:minFat` (float()): The minimum amount of fat in grams the recipe must have.
    - `:maxFat` (float()): The maximum amount of fat in grams the recipe can have.
    - `:minAlcohol` (float()): The minimum amount of alcohol in grams the recipe must have.
    - `:maxAlcohol` (float()): The maximum amount of alcohol in grams the recipe can have.
    - `:minCaffeine` (float()): The minimum amount of caffeine in milligrams the recipe must have.
    - `:maxCaffeine` (float()): The maximum amount of caffeine in milligrams the recipe can have.
    - `:minCopper` (float()): The minimum amount of copper in milligrams the recipe must have.
    - `:maxCopper` (float()): The maximum amount of copper in milligrams the recipe can have.
    - `:minCalcium` (float()): The minimum amount of calcium in milligrams the recipe must have.
    - `:maxCalcium` (float()): The maximum amount of calcium in milligrams the recipe can have.
    - `:minCholine` (float()): The minimum amount of choline in milligrams the recipe must have.
    - `:maxCholine` (float()): The maximum amount of choline in milligrams the recipe can have.
    - `:minCholesterol` (float()): The minimum amount of cholesterol in milligrams the recipe must have.
    - `:maxCholesterol` (float()): The maximum amount of cholesterol in milligrams the recipe can have.
    - `:minFluoride` (float()): The minimum amount of fluoride in milligrams the recipe must have.
    - `:maxFluoride` (float()): The maximum amount of fluoride in milligrams the recipe can have.
    - `:minSaturatedFat` (float()): The minimum amount of saturated fat in grams the recipe must have.
    - `:maxSaturatedFat` (float()): The maximum amount of saturated fat in grams the recipe can have.
    - `:minVitaminA` (float()): The minimum amount of Vitamin A in IU the recipe must have.
    - `:maxVitaminA` (float()): The maximum amount of Vitamin A in IU the recipe can have.
    - `:minVitaminC` (float()): The minimum amount of Vitamin C in milligrams the recipe must have.
    - `:maxVitaminC` (float()): The maximum amount of Vitamin C in milligrams the recipe can have.
    - `:minVitaminD` (float()): The minimum amount of Vitamin D in micrograms the recipe must have.
    - `:maxVitaminD` (float()): The maximum amount of Vitamin D in micrograms the recipe can have.
    - `:minVitaminE` (float()): The minimum amount of Vitamin E in milligrams the recipe must have.
    - `:maxVitaminE` (float()): The maximum amount of Vitamin E in milligrams the recipe can have.
    - `:minVitaminK` (float()): The minimum amount of Vitamin K in micrograms the recipe must have.
    - `:maxVitaminK` (float()): The maximum amount of Vitamin K in micrograms the recipe can have.
    - `:minVitaminB1` (float()): The minimum amount of Vitamin B1 in milligrams the recipe must have.
    - `:maxVitaminB1` (float()): The maximum amount of Vitamin B1 in milligrams the recipe can have.
    - `:minVitaminB2` (float()): The minimum amount of Vitamin B2 in milligrams the recipe must have.
    - `:maxVitaminB2` (float()): The maximum amount of Vitamin B2 in milligrams the recipe can have.
    - `:minVitaminB5` (float()): The minimum amount of Vitamin B5 in milligrams the recipe must have.
    - `:maxVitaminB5` (float()): The maximum amount of Vitamin B5 in milligrams the recipe can have.
    - `:minVitaminB3` (float()): The minimum amount of Vitamin B3 in milligrams the recipe must have.
    - `:maxVitaminB3` (float()): The maximum amount of Vitamin B3 in milligrams the recipe can have.
    - `:minVitaminB6` (float()): The minimum amount of Vitamin B6 in milligrams the recipe must have.
    - `:maxVitaminB6` (float()): The maximum amount of Vitamin B6 in milligrams the recipe can have.
    - `:minVitaminB12` (float()): The minimum amount of Vitamin B12 in micrograms the recipe must have.
    - `:maxVitaminB12` (float()): The maximum amount of Vitamin B12 in micrograms the recipe can have.
    - `:minFiber` (float()): The minimum amount of fiber in grams the recipe must have.
    - `:maxFiber` (float()): The maximum amount of fiber in grams the recipe can have.
    - `:minFolate` (float()): The minimum amount of folate in micrograms the recipe must have.
    - `:maxFolate` (float()): The maximum amount of folate in micrograms the recipe can have.
    - `:minFolicAcid` (float()): The minimum amount of folic acid in micrograms the recipe must have.
    - `:maxFolicAcid` (float()): The maximum amount of folic acid in micrograms the recipe can have.
    - `:minIodine` (float()): The minimum amount of iodine in micrograms the recipe must have.
    - `:maxIodine` (float()): The maximum amount of iodine in micrograms the recipe can have.
    - `:minIron` (float()): The minimum amount of iron in milligrams the recipe must have.
    - `:maxIron` (float()): The maximum amount of iron in milligrams the recipe can have.
    - `:minMagnesium` (float()): The minimum amount of magnesium in milligrams the recipe must have.
    - `:maxMagnesium` (float()): The maximum amount of magnesium in milligrams the recipe can have.
    - `:minManganese` (float()): The minimum amount of manganese in milligrams the recipe must have.
    - `:maxManganese` (float()): The maximum amount of manganese in milligrams the recipe can have.
    - `:minPhosphorus` (float()): The minimum amount of phosphorus in milligrams the recipe must have.
    - `:maxPhosphorus` (float()): The maximum amount of phosphorus in milligrams the recipe can have.
    - `:minPotassium` (float()): The minimum amount of potassium in milligrams the recipe must have.
    - `:maxPotassium` (float()): The maximum amount of potassium in milligrams the recipe can have.
    - `:minSelenium` (float()): The minimum amount of selenium in micrograms the recipe must have.
    - `:maxSelenium` (float()): The maximum amount of selenium in micrograms the recipe can have.
    - `:minSodium` (float()): The minimum amount of sodium in milligrams the recipe must have.
    - `:maxSodium` (float()): The maximum amount of sodium in milligrams the recipe can have.
    - `:minSugar` (float()): The minimum amount of sugar in grams the recipe must have.
    - `:maxSugar` (float()): The maximum amount of sugar in grams the recipe can have.
    - `:minZinc` (float()): The minimum amount of zinc in milligrams the recipe must have.
    - `:maxZinc` (float()): The maximum amount of zinc in milligrams the recipe can have.
    - `:offset` (integer()): The number of results to skip (between 0 and 900).
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.
    - `:random` (boolean()): If true, every request will give you a random set of recipes within the requested limits.
    - `:limitLicense` (boolean()): Whether the recipes should have an open license that allows display with proper attribution.

  ### Returns

  - `{:ok, [%SearchRecipesByNutrients200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_recipes_by_nutrients(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, [SpoonacularAPI.Model.SearchRecipesByNutrients200ResponseInner.t]} | {:error, Tesla.Env.t}
  def search_recipes_by_nutrients(connection, opts \\ []) do
    optional_params = %{
      :minCarbs => :query,
      :maxCarbs => :query,
      :minProtein => :query,
      :maxProtein => :query,
      :minCalories => :query,
      :maxCalories => :query,
      :minFat => :query,
      :maxFat => :query,
      :minAlcohol => :query,
      :maxAlcohol => :query,
      :minCaffeine => :query,
      :maxCaffeine => :query,
      :minCopper => :query,
      :maxCopper => :query,
      :minCalcium => :query,
      :maxCalcium => :query,
      :minCholine => :query,
      :maxCholine => :query,
      :minCholesterol => :query,
      :maxCholesterol => :query,
      :minFluoride => :query,
      :maxFluoride => :query,
      :minSaturatedFat => :query,
      :maxSaturatedFat => :query,
      :minVitaminA => :query,
      :maxVitaminA => :query,
      :minVitaminC => :query,
      :maxVitaminC => :query,
      :minVitaminD => :query,
      :maxVitaminD => :query,
      :minVitaminE => :query,
      :maxVitaminE => :query,
      :minVitaminK => :query,
      :maxVitaminK => :query,
      :minVitaminB1 => :query,
      :maxVitaminB1 => :query,
      :minVitaminB2 => :query,
      :maxVitaminB2 => :query,
      :minVitaminB5 => :query,
      :maxVitaminB5 => :query,
      :minVitaminB3 => :query,
      :maxVitaminB3 => :query,
      :minVitaminB6 => :query,
      :maxVitaminB6 => :query,
      :minVitaminB12 => :query,
      :maxVitaminB12 => :query,
      :minFiber => :query,
      :maxFiber => :query,
      :minFolate => :query,
      :maxFolate => :query,
      :minFolicAcid => :query,
      :maxFolicAcid => :query,
      :minIodine => :query,
      :maxIodine => :query,
      :minIron => :query,
      :maxIron => :query,
      :minMagnesium => :query,
      :maxMagnesium => :query,
      :minManganese => :query,
      :maxManganese => :query,
      :minPhosphorus => :query,
      :maxPhosphorus => :query,
      :minPotassium => :query,
      :maxPotassium => :query,
      :minSelenium => :query,
      :maxSelenium => :query,
      :minSodium => :query,
      :maxSodium => :query,
      :minSugar => :query,
      :maxSugar => :query,
      :minZinc => :query,
      :maxZinc => :query,
      :offset => :query,
      :number => :query,
      :random => :query,
      :limitLicense => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/findByNutrients")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SearchRecipesByNutrients200ResponseInner},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Summarize Recipe
  Automatically generate a short description that summarizes key information about the recipe.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.SummarizeRecipe200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec summarize_recipe(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.SummarizeRecipe200Response.t} | {:error, Tesla.Env.t}
  def summarize_recipe(connection, id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/summary")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SummarizeRecipe200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Equipment Widget
  Visualize the equipment used to make a recipe.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `instructions` (String.t): The recipe's instructions.
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): How to visualize the ingredients, either 'grid' or 'list'.
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.
    - `:showBacklink` (boolean()): Whether to show a backlink to spoonacular. If set false, this call counts against your quota.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_equipment(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_equipment(connection, instructions, opts \\ []) do
    optional_params = %{
      :view => :form,
      :defaultCss => :form,
      :showBacklink => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/recipes/visualizeEquipment")
      |> add_param(:form, :instructions, instructions)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Price Breakdown Widget
  Visualize the price breakdown of a recipe.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `ingredient_list` (String.t): The ingredient list of the recipe, one ingredient per line.
  - `servings` (float()): The number of servings.
  - `opts` (keyword): Optional parameters
    - `:language` (String.t): The language of the input. Either 'en' or 'de'.
    - `:mode` (float()): The mode in which the widget should be delivered. 1 = separate views (compact), 2 = all in one view (full).
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.
    - `:showBacklink` (boolean()): Whether to show a backlink to spoonacular. If set false, this call counts against your quota.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_price_breakdown(Tesla.Env.client, String.t, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_price_breakdown(connection, ingredient_list, servings, opts \\ []) do
    optional_params = %{
      :language => :query,
      :mode => :form,
      :defaultCss => :form,
      :showBacklink => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/recipes/visualizePriceEstimator")
      |> add_param(:form, :ingredientList, ingredient_list)
      |> add_param(:form, :servings, servings)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Equipment by ID Widget
  Visualize a recipe's equipment list.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_recipe_equipment_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_equipment_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :defaultCss => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/equipmentWidget")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Ingredients by ID Widget
  Visualize a recipe's ingredient list.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.
    - `:measure` (String.t): Whether the the measures should be 'us' or 'metric'.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_recipe_ingredients_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_ingredients_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :defaultCss => :query,
      :measure => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/ingredientWidget")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Recipe Nutrition Widget
  Visualize a recipe's nutritional information as HTML including CSS.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `ingredient_list` (String.t): The ingredient list of the recipe, one ingredient per line.
  - `servings` (float()): The number of servings.
  - `opts` (keyword): Optional parameters
    - `:language` (String.t): The language of the input. Either 'en' or 'de'.
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.
    - `:showBacklink` (boolean()): Whether to show a backlink to spoonacular. If set false, this call counts against your quota.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_recipe_nutrition(Tesla.Env.client, String.t, float(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_nutrition(connection, ingredient_list, servings, opts \\ []) do
    optional_params = %{
      :language => :query,
      :defaultCss => :form,
      :showBacklink => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/recipes/visualizeNutrition")
      |> add_param(:form, :ingredientList, ingredient_list)
      |> add_param(:form, :servings, servings)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Recipe Nutrition by ID Widget
  Visualize a recipe's nutritional information as HTML including CSS.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_recipe_nutrition_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_nutrition_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :defaultCss => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/nutritionWidget")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Price Breakdown by ID Widget
  Visualize a recipe's price breakdown.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:defaultCss` (boolean()): Whether the default CSS should be added to the response.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_recipe_price_breakdown_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_price_breakdown_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :defaultCss => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/priceBreakdownWidget")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Recipe Taste Widget
  Visualize a recipe's taste information as HTML including CSS. You can play around with that endpoint!

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `ingredient_list` (String.t): The ingredient list of the recipe, one ingredient per line.
  - `opts` (keyword): Optional parameters
    - `:language` (String.t): The language of the input. Either 'en' or 'de'.
    - `:normalize` (boolean()): Normalize to the strongest taste.
    - `:rgb` (String.t): Red, green, blue values for the chart color.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_recipe_taste(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_taste(connection, ingredient_list, opts \\ []) do
    optional_params = %{
      :language => :query,
      :normalize => :form,
      :rgb => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/recipes/visualizeTaste")
      |> add_param(:form, :ingredientList, ingredient_list)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Recipe Taste by ID Widget
  Get a recipe's taste. The tastes supported are sweet, salty, sour, bitter, savory, and fatty.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `id` (integer()): The item's id.
  - `opts` (keyword): Optional parameters
    - `:normalize` (boolean()): Whether to normalize to the strongest taste.
    - `:rgb` (String.t): Red, green, blue values for the chart color.

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec visualize_recipe_taste_by_id(Tesla.Env.client, integer(), keyword()) :: {:ok, nil} | {:ok, String.t} | {:error, Tesla.Env.t}
  def visualize_recipe_taste_by_id(connection, id, opts \\ []) do
    optional_params = %{
      :normalize => :query,
      :rgb => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/recipes/#{id}/tasteWidget")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, false},
      {403, false},
      {404, false}
    ])
  end
end
