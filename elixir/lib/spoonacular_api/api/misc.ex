# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule SpoonacularAPI.Api.Misc do
  @moduledoc """
  API calls for all endpoints tagged `Misc`.
  """

  alias SpoonacularAPI.Connection
  import SpoonacularAPI.RequestBuilder

  @doc """
  Detect Food in Text
  Take any text and find all mentions of food contained within it. This task is also called Named Entity Recognition (NER). In this case, the entities are foods. Either dishes, such as pizza or cheeseburger, or ingredients, such as cucumber or almonds.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `text` (String.t): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.DetectFoodInText200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec detect_food_in_text(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.DetectFoodInText200Response.t} | {:error, Tesla.Env.t}
  def detect_food_in_text(connection, text, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/food/detect")
      |> add_param(:form, :text, text)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.DetectFoodInText200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Random Food Joke
  Get a random joke that is related to food. Caution: this is an endpoint for adults!

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetARandomFoodJoke200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_a_random_food_joke(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetARandomFoodJoke200Response.t} | {:error, Tesla.Env.t}
  def get_a_random_food_joke(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/jokes/random")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetARandomFoodJoke200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Conversation Suggests
  This endpoint returns suggestions for things the user can say or ask the chatbot.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `query` (String.t): A (partial) query from the user. The endpoint will return if it matches topics it can talk about.
  - `opts` (keyword): Optional parameters
    - `:number` (float()): The number of suggestions to return (between 1 and 25).

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetConversationSuggests200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_conversation_suggests(Tesla.Env.client, String.t, keyword()) :: {:ok, SpoonacularAPI.Model.GetConversationSuggests200Response.t} | {:ok, nil} | {:error, Tesla.Env.t}
  def get_conversation_suggests(connection, query, opts \\ []) do
    optional_params = %{
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/converse/suggest")
      |> add_param(:query, :query, query)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetConversationSuggests200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Random Food Trivia
  Returns random food trivia.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.GetRandomFoodTrivia200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec get_random_food_trivia(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.GetRandomFoodTrivia200Response.t} | {:error, Tesla.Env.t}
  def get_random_food_trivia(connection, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/trivia/random")
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.GetRandomFoodTrivia200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Image Analysis by URL
  Analyze a food image. The API tries to classify the image, guess the nutrition, and find a matching recipes.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `image_url` (String.t): The URL of the image to be analyzed.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.ImageAnalysisByUrl200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec image_analysis_by_url(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.ImageAnalysisByUrl200Response.t} | {:error, Tesla.Env.t}
  def image_analysis_by_url(connection, image_url, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/images/analyze")
      |> add_param(:query, :imageUrl, image_url)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.ImageAnalysisByUrl200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Image Classification by URL
  Classify a food image.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `image_url` (String.t): The URL of the image to be classified.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.ImageClassificationByUrl200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec image_classification_by_url(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.ImageClassificationByUrl200Response.t} | {:error, Tesla.Env.t}
  def image_classification_by_url(connection, image_url, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/images/classify")
      |> add_param(:query, :imageUrl, image_url)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.ImageClassificationByUrl200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Search All Food
  Search all food content with one call. That includes recipes, grocery products, menu items, simple foods (ingredients), and food videos.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `query` (String.t): The search query.
  - `opts` (keyword): Optional parameters
    - `:offset` (integer()): The number of results to skip (between 0 and 900).
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.SearchAllFood200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_all_food(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.SearchAllFood200Response.t} | {:error, Tesla.Env.t}
  def search_all_food(connection, query, opts \\ []) do
    optional_params = %{
      :offset => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/search")
      |> add_param(:query, :query, query)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SearchAllFood200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Search Custom Foods
  Search custom foods in a user's account.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `username` (String.t): The username.
  - `hash` (String.t): The private hash for the username.
  - `opts` (keyword): Optional parameters
    - `:query` (String.t): The (natural language) search query.
    - `:offset` (integer()): The number of results to skip (between 0 and 900).
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.SearchCustomFoods200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_custom_foods(Tesla.Env.client, String.t, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.SearchCustomFoods200Response.t} | {:error, Tesla.Env.t}
  def search_custom_foods(connection, username, hash, opts \\ []) do
    optional_params = %{
      :query => :query,
      :offset => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/customFoods/search")
      |> add_param(:query, :username, username)
      |> add_param(:query, :hash, hash)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SearchCustomFoods200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Search Food Videos
  Find recipe and other food related videos.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `opts` (keyword): Optional parameters
    - `:query` (String.t): The (natural language) search query.
    - `:type` (String.t): The type of the recipes. See a full list of supported meal types.
    - `:cuisine` (String.t): The cuisine(s) of the recipes. One or more, comma separated. See a full list of supported cuisines.
    - `:diet` (String.t): The diet for which the recipes must be suitable. See a full list of supported diets.
    - `:includeIngredients` (String.t): A comma-separated list of ingredients that the recipes should contain.
    - `:excludeIngredients` (String.t): A comma-separated list of ingredients or ingredient types that the recipes must not contain.
    - `:minLength` (float()): Minimum video length in seconds.
    - `:maxLength` (float()): Maximum video length in seconds.
    - `:offset` (integer()): The number of results to skip (between 0 and 900).
    - `:number` (integer()): The maximum number of items to return (between 1 and 100). Defaults to 10.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.SearchFoodVideos200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_food_videos(Tesla.Env.client, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.SearchFoodVideos200Response.t} | {:error, Tesla.Env.t}
  def search_food_videos(connection, opts \\ []) do
    optional_params = %{
      :query => :query,
      :type => :query,
      :cuisine => :query,
      :diet => :query,
      :includeIngredients => :query,
      :excludeIngredients => :query,
      :minLength => :query,
      :maxLength => :query,
      :offset => :query,
      :number => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/videos/search")
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SearchFoodVideos200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Search Site Content
  Search spoonacular's site content. You'll be able to find everything that you could also find using the search suggestions on spoonacular.com. This is a suggest API so you can send partial strings as queries.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `query` (String.t): The query to search for. You can also use partial queries such as \"spagh\" to already find spaghetti recipes, articles, grocery products, and other content.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, SpoonacularAPI.Model.SearchSiteContent200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec search_site_content(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.SearchSiteContent200Response.t} | {:error, Tesla.Env.t}
  def search_site_content(connection, query, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/food/site/search")
      |> add_param(:query, :query, query)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.SearchSiteContent200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end

  @doc """
  Talk to Chatbot
  This endpoint can be used to have a conversation about food with the spoonacular chatbot. Use the \"Get Conversation Suggests\" endpoint to show your user what he or she can say.

  ### Parameters

  - `connection` (SpoonacularAPI.Connection): Connection to server
  - `text` (String.t): The request / question / answer from the user to the chatbot.
  - `opts` (keyword): Optional parameters
    - `:contextId` (String.t): An arbitrary globally unique id for your conversation. The conversation can contain states so you should pass your context id if you want the bot to be able to remember the conversation.

  ### Returns

  - `{:ok, SpoonacularAPI.Model.TalkToChatbot200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec talk_to_chatbot(Tesla.Env.client, String.t, keyword()) :: {:ok, nil} | {:ok, SpoonacularAPI.Model.TalkToChatbot200Response.t} | {:error, Tesla.Env.t}
  def talk_to_chatbot(connection, text, opts \\ []) do
    optional_params = %{
      :contextId => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/food/converse")
      |> add_param(:query, :text, text)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, SpoonacularAPI.Model.TalkToChatbot200Response},
      {401, false},
      {403, false},
      {404, false}
    ])
  end
end
